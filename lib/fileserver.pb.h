// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fileserver.proto

#ifndef PROTOBUF_fileserver_2eproto__INCLUDED
#define PROTOBUF_fileserver_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace dfsFuse {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_fileserver_2eproto();
void protobuf_AssignDesc_fileserver_2eproto();
void protobuf_ShutdownFile_fileserver_2eproto();

class Attr;
class ClientInfo;
class DirEntry;
class FSstatus;
class GetAttrRequest;
class GetAttrResponse;
class MkdirRequest;
class MkdirResponse;
class MknodRequest;
class MknodResponse;
class OpenDirRequest;
class OpenDirResponse;
class OpenRequest;
class OpenResponse;
class Owner;
class ReadRequest;
class ReadResponse;
class ReleaseRequest;
class ReleaseResponse;
class RenameRequest;
class RenameResponse;
class RmdirRequest;
class RmdirResponse;
class UnlinkRequest;
class UnlinkResponse;
class WriteRequest;
class WriteResponse;

// ===================================================================

class FSstatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dfsFuse.FSstatus) */ {
 public:
  FSstatus();
  virtual ~FSstatus();

  FSstatus(const FSstatus& from);

  inline FSstatus& operator=(const FSstatus& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FSstatus& default_instance();

  void Swap(FSstatus* other);

  // implements Message ----------------------------------------------

  inline FSstatus* New() const { return New(NULL); }

  FSstatus* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FSstatus& from);
  void MergeFrom(const FSstatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FSstatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 retCode = 1;
  void clear_retcode();
  static const int kRetCodeFieldNumber = 1;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:dfsFuse.FSstatus)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 retcode_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_fileserver_2eproto();
  friend void protobuf_AssignDesc_fileserver_2eproto();
  friend void protobuf_ShutdownFile_fileserver_2eproto();

  void InitAsDefaultInstance();
  static FSstatus* default_instance_;
};
// -------------------------------------------------------------------

class Owner : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dfsFuse.Owner) */ {
 public:
  Owner();
  virtual ~Owner();

  Owner(const Owner& from);

  inline Owner& operator=(const Owner& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Owner& default_instance();

  void Swap(Owner* other);

  // implements Message ----------------------------------------------

  inline Owner* New() const { return New(NULL); }

  Owner* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Owner& from);
  void MergeFrom(const Owner& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Owner* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  void clear_uid();
  static const int kUidFieldNumber = 1;
  ::google::protobuf::uint32 uid() const;
  void set_uid(::google::protobuf::uint32 value);

  // optional uint32 gid = 2;
  void clear_gid();
  static const int kGidFieldNumber = 2;
  ::google::protobuf::uint32 gid() const;
  void set_gid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:dfsFuse.Owner)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 gid_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_fileserver_2eproto();
  friend void protobuf_AssignDesc_fileserver_2eproto();
  friend void protobuf_ShutdownFile_fileserver_2eproto();

  void InitAsDefaultInstance();
  static Owner* default_instance_;
};
// -------------------------------------------------------------------

class ClientInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dfsFuse.ClientInfo) */ {
 public:
  ClientInfo();
  virtual ~ClientInfo();

  ClientInfo(const ClientInfo& from);

  inline ClientInfo& operator=(const ClientInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientInfo& default_instance();

  void Swap(ClientInfo* other);

  // implements Message ----------------------------------------------

  inline ClientInfo* New() const { return New(NULL); }

  ClientInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientInfo& from);
  void MergeFrom(const ClientInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .dfsFuse.Owner Owner = 1;
  bool has_owner() const;
  void clear_owner();
  static const int kOwnerFieldNumber = 1;
  const ::dfsFuse::Owner& owner() const;
  ::dfsFuse::Owner* mutable_owner();
  ::dfsFuse::Owner* release_owner();
  void set_allocated_owner(::dfsFuse::Owner* owner);

  // optional uint32 Pid = 2;
  void clear_pid();
  static const int kPidFieldNumber = 2;
  ::google::protobuf::uint32 pid() const;
  void set_pid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:dfsFuse.ClientInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::dfsFuse::Owner* owner_;
  ::google::protobuf::uint32 pid_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_fileserver_2eproto();
  friend void protobuf_AssignDesc_fileserver_2eproto();
  friend void protobuf_ShutdownFile_fileserver_2eproto();

  void InitAsDefaultInstance();
  static ClientInfo* default_instance_;
};
// -------------------------------------------------------------------

class Attr : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dfsFuse.Attr) */ {
 public:
  Attr();
  virtual ~Attr();

  Attr(const Attr& from);

  inline Attr& operator=(const Attr& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Attr& default_instance();

  void Swap(Attr* other);

  // implements Message ----------------------------------------------

  inline Attr* New() const { return New(NULL); }

  Attr* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Attr& from);
  void MergeFrom(const Attr& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Attr* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 dev = 1;
  void clear_dev();
  static const int kDevFieldNumber = 1;
  ::google::protobuf::uint64 dev() const;
  void set_dev(::google::protobuf::uint64 value);

  // optional uint64 ino = 2;
  void clear_ino();
  static const int kInoFieldNumber = 2;
  ::google::protobuf::uint64 ino() const;
  void set_ino(::google::protobuf::uint64 value);

  // optional uint64 mode = 3;
  void clear_mode();
  static const int kModeFieldNumber = 3;
  ::google::protobuf::uint64 mode() const;
  void set_mode(::google::protobuf::uint64 value);

  // optional uint64 nlink = 4;
  void clear_nlink();
  static const int kNlinkFieldNumber = 4;
  ::google::protobuf::uint64 nlink() const;
  void set_nlink(::google::protobuf::uint64 value);

  // optional .dfsFuse.Owner owner = 5;
  bool has_owner() const;
  void clear_owner();
  static const int kOwnerFieldNumber = 5;
  const ::dfsFuse::Owner& owner() const;
  ::dfsFuse::Owner* mutable_owner();
  ::dfsFuse::Owner* release_owner();
  void set_allocated_owner(::dfsFuse::Owner* owner);

  // optional uint64 rdev = 6;
  void clear_rdev();
  static const int kRdevFieldNumber = 6;
  ::google::protobuf::uint64 rdev() const;
  void set_rdev(::google::protobuf::uint64 value);

  // optional uint64 size = 7;
  void clear_size();
  static const int kSizeFieldNumber = 7;
  ::google::protobuf::uint64 size() const;
  void set_size(::google::protobuf::uint64 value);

  // optional uint64 blksize = 8;
  void clear_blksize();
  static const int kBlksizeFieldNumber = 8;
  ::google::protobuf::uint64 blksize() const;
  void set_blksize(::google::protobuf::uint64 value);

  // optional uint64 blocks = 9;
  void clear_blocks();
  static const int kBlocksFieldNumber = 9;
  ::google::protobuf::uint64 blocks() const;
  void set_blocks(::google::protobuf::uint64 value);

  // optional uint64 atime = 10;
  void clear_atime();
  static const int kAtimeFieldNumber = 10;
  ::google::protobuf::uint64 atime() const;
  void set_atime(::google::protobuf::uint64 value);

  // optional uint64 atimens = 11;
  void clear_atimens();
  static const int kAtimensFieldNumber = 11;
  ::google::protobuf::uint64 atimens() const;
  void set_atimens(::google::protobuf::uint64 value);

  // optional uint64 mtime = 12;
  void clear_mtime();
  static const int kMtimeFieldNumber = 12;
  ::google::protobuf::uint64 mtime() const;
  void set_mtime(::google::protobuf::uint64 value);

  // optional uint64 mtimens = 13;
  void clear_mtimens();
  static const int kMtimensFieldNumber = 13;
  ::google::protobuf::uint64 mtimens() const;
  void set_mtimens(::google::protobuf::uint64 value);

  // optional uint64 ctime = 14;
  void clear_ctime();
  static const int kCtimeFieldNumber = 14;
  ::google::protobuf::uint64 ctime() const;
  void set_ctime(::google::protobuf::uint64 value);

  // optional uint64 ctimens = 15;
  void clear_ctimens();
  static const int kCtimensFieldNumber = 15;
  ::google::protobuf::uint64 ctimens() const;
  void set_ctimens(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:dfsFuse.Attr)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint64 dev_;
  ::google::protobuf::uint64 ino_;
  ::google::protobuf::uint64 mode_;
  ::google::protobuf::uint64 nlink_;
  ::dfsFuse::Owner* owner_;
  ::google::protobuf::uint64 rdev_;
  ::google::protobuf::uint64 size_;
  ::google::protobuf::uint64 blksize_;
  ::google::protobuf::uint64 blocks_;
  ::google::protobuf::uint64 atime_;
  ::google::protobuf::uint64 atimens_;
  ::google::protobuf::uint64 mtime_;
  ::google::protobuf::uint64 mtimens_;
  ::google::protobuf::uint64 ctime_;
  ::google::protobuf::uint64 ctimens_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_fileserver_2eproto();
  friend void protobuf_AssignDesc_fileserver_2eproto();
  friend void protobuf_ShutdownFile_fileserver_2eproto();

  void InitAsDefaultInstance();
  static Attr* default_instance_;
};
// -------------------------------------------------------------------

class GetAttrRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dfsFuse.GetAttrRequest) */ {
 public:
  GetAttrRequest();
  virtual ~GetAttrRequest();

  GetAttrRequest(const GetAttrRequest& from);

  inline GetAttrRequest& operator=(const GetAttrRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetAttrRequest& default_instance();

  void Swap(GetAttrRequest* other);

  // implements Message ----------------------------------------------

  inline GetAttrRequest* New() const { return New(NULL); }

  GetAttrRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetAttrRequest& from);
  void MergeFrom(const GetAttrRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetAttrRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .dfsFuse.ClientInfo info = 2;
  bool has_info() const;
  void clear_info();
  static const int kInfoFieldNumber = 2;
  const ::dfsFuse::ClientInfo& info() const;
  ::dfsFuse::ClientInfo* mutable_info();
  ::dfsFuse::ClientInfo* release_info();
  void set_allocated_info(::dfsFuse::ClientInfo* info);

  // @@protoc_insertion_point(class_scope:dfsFuse.GetAttrRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::dfsFuse::ClientInfo* info_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_fileserver_2eproto();
  friend void protobuf_AssignDesc_fileserver_2eproto();
  friend void protobuf_ShutdownFile_fileserver_2eproto();

  void InitAsDefaultInstance();
  static GetAttrRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetAttrResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dfsFuse.GetAttrResponse) */ {
 public:
  GetAttrResponse();
  virtual ~GetAttrResponse();

  GetAttrResponse(const GetAttrResponse& from);

  inline GetAttrResponse& operator=(const GetAttrResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetAttrResponse& default_instance();

  void Swap(GetAttrResponse* other);

  // implements Message ----------------------------------------------

  inline GetAttrResponse* New() const { return New(NULL); }

  GetAttrResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetAttrResponse& from);
  void MergeFrom(const GetAttrResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetAttrResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .dfsFuse.Attr attr = 1;
  bool has_attr() const;
  void clear_attr();
  static const int kAttrFieldNumber = 1;
  const ::dfsFuse::Attr& attr() const;
  ::dfsFuse::Attr* mutable_attr();
  ::dfsFuse::Attr* release_attr();
  void set_allocated_attr(::dfsFuse::Attr* attr);

  // optional .dfsFuse.FSstatus status = 2;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 2;
  const ::dfsFuse::FSstatus& status() const;
  ::dfsFuse::FSstatus* mutable_status();
  ::dfsFuse::FSstatus* release_status();
  void set_allocated_status(::dfsFuse::FSstatus* status);

  // @@protoc_insertion_point(class_scope:dfsFuse.GetAttrResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::dfsFuse::Attr* attr_;
  ::dfsFuse::FSstatus* status_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_fileserver_2eproto();
  friend void protobuf_AssignDesc_fileserver_2eproto();
  friend void protobuf_ShutdownFile_fileserver_2eproto();

  void InitAsDefaultInstance();
  static GetAttrResponse* default_instance_;
};
// -------------------------------------------------------------------

class MkdirRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dfsFuse.MkdirRequest) */ {
 public:
  MkdirRequest();
  virtual ~MkdirRequest();

  MkdirRequest(const MkdirRequest& from);

  inline MkdirRequest& operator=(const MkdirRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MkdirRequest& default_instance();

  void Swap(MkdirRequest* other);

  // implements Message ----------------------------------------------

  inline MkdirRequest* New() const { return New(NULL); }

  MkdirRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MkdirRequest& from);
  void MergeFrom(const MkdirRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MkdirRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional uint64 mode = 2;
  void clear_mode();
  static const int kModeFieldNumber = 2;
  ::google::protobuf::uint64 mode() const;
  void set_mode(::google::protobuf::uint64 value);

  // optional .dfsFuse.ClientInfo info = 3;
  bool has_info() const;
  void clear_info();
  static const int kInfoFieldNumber = 3;
  const ::dfsFuse::ClientInfo& info() const;
  ::dfsFuse::ClientInfo* mutable_info();
  ::dfsFuse::ClientInfo* release_info();
  void set_allocated_info(::dfsFuse::ClientInfo* info);

  // @@protoc_insertion_point(class_scope:dfsFuse.MkdirRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint64 mode_;
  ::dfsFuse::ClientInfo* info_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_fileserver_2eproto();
  friend void protobuf_AssignDesc_fileserver_2eproto();
  friend void protobuf_ShutdownFile_fileserver_2eproto();

  void InitAsDefaultInstance();
  static MkdirRequest* default_instance_;
};
// -------------------------------------------------------------------

class MkdirResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dfsFuse.MkdirResponse) */ {
 public:
  MkdirResponse();
  virtual ~MkdirResponse();

  MkdirResponse(const MkdirResponse& from);

  inline MkdirResponse& operator=(const MkdirResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MkdirResponse& default_instance();

  void Swap(MkdirResponse* other);

  // implements Message ----------------------------------------------

  inline MkdirResponse* New() const { return New(NULL); }

  MkdirResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MkdirResponse& from);
  void MergeFrom(const MkdirResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MkdirResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .dfsFuse.FSstatus status = 1;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  const ::dfsFuse::FSstatus& status() const;
  ::dfsFuse::FSstatus* mutable_status();
  ::dfsFuse::FSstatus* release_status();
  void set_allocated_status(::dfsFuse::FSstatus* status);

  // @@protoc_insertion_point(class_scope:dfsFuse.MkdirResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::dfsFuse::FSstatus* status_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_fileserver_2eproto();
  friend void protobuf_AssignDesc_fileserver_2eproto();
  friend void protobuf_ShutdownFile_fileserver_2eproto();

  void InitAsDefaultInstance();
  static MkdirResponse* default_instance_;
};
// -------------------------------------------------------------------

class OpenDirRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dfsFuse.OpenDirRequest) */ {
 public:
  OpenDirRequest();
  virtual ~OpenDirRequest();

  OpenDirRequest(const OpenDirRequest& from);

  inline OpenDirRequest& operator=(const OpenDirRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OpenDirRequest& default_instance();

  void Swap(OpenDirRequest* other);

  // implements Message ----------------------------------------------

  inline OpenDirRequest* New() const { return New(NULL); }

  OpenDirRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OpenDirRequest& from);
  void MergeFrom(const OpenDirRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OpenDirRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .dfsFuse.ClientInfo info = 2;
  bool has_info() const;
  void clear_info();
  static const int kInfoFieldNumber = 2;
  const ::dfsFuse::ClientInfo& info() const;
  ::dfsFuse::ClientInfo* mutable_info();
  ::dfsFuse::ClientInfo* release_info();
  void set_allocated_info(::dfsFuse::ClientInfo* info);

  // @@protoc_insertion_point(class_scope:dfsFuse.OpenDirRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::dfsFuse::ClientInfo* info_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_fileserver_2eproto();
  friend void protobuf_AssignDesc_fileserver_2eproto();
  friend void protobuf_ShutdownFile_fileserver_2eproto();

  void InitAsDefaultInstance();
  static OpenDirRequest* default_instance_;
};
// -------------------------------------------------------------------

class DirEntry : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dfsFuse.DirEntry) */ {
 public:
  DirEntry();
  virtual ~DirEntry();

  DirEntry(const DirEntry& from);

  inline DirEntry& operator=(const DirEntry& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DirEntry& default_instance();

  void Swap(DirEntry* other);

  // implements Message ----------------------------------------------

  inline DirEntry* New() const { return New(NULL); }

  DirEntry* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DirEntry& from);
  void MergeFrom(const DirEntry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DirEntry* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional uint64 ino = 2;
  void clear_ino();
  static const int kInoFieldNumber = 2;
  ::google::protobuf::uint64 ino() const;
  void set_ino(::google::protobuf::uint64 value);

  // optional uint64 mode = 3;
  void clear_mode();
  static const int kModeFieldNumber = 3;
  ::google::protobuf::uint64 mode() const;
  void set_mode(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:dfsFuse.DirEntry)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint64 ino_;
  ::google::protobuf::uint64 mode_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_fileserver_2eproto();
  friend void protobuf_AssignDesc_fileserver_2eproto();
  friend void protobuf_ShutdownFile_fileserver_2eproto();

  void InitAsDefaultInstance();
  static DirEntry* default_instance_;
};
// -------------------------------------------------------------------

class OpenDirResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dfsFuse.OpenDirResponse) */ {
 public:
  OpenDirResponse();
  virtual ~OpenDirResponse();

  OpenDirResponse(const OpenDirResponse& from);

  inline OpenDirResponse& operator=(const OpenDirResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OpenDirResponse& default_instance();

  void Swap(OpenDirResponse* other);

  // implements Message ----------------------------------------------

  inline OpenDirResponse* New() const { return New(NULL); }

  OpenDirResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OpenDirResponse& from);
  void MergeFrom(const OpenDirResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OpenDirResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .dfsFuse.DirEntry dirs = 1;
  int dirs_size() const;
  void clear_dirs();
  static const int kDirsFieldNumber = 1;
  const ::dfsFuse::DirEntry& dirs(int index) const;
  ::dfsFuse::DirEntry* mutable_dirs(int index);
  ::dfsFuse::DirEntry* add_dirs();
  ::google::protobuf::RepeatedPtrField< ::dfsFuse::DirEntry >*
      mutable_dirs();
  const ::google::protobuf::RepeatedPtrField< ::dfsFuse::DirEntry >&
      dirs() const;

  // optional .dfsFuse.FSstatus status = 2;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 2;
  const ::dfsFuse::FSstatus& status() const;
  ::dfsFuse::FSstatus* mutable_status();
  ::dfsFuse::FSstatus* release_status();
  void set_allocated_status(::dfsFuse::FSstatus* status);

  // @@protoc_insertion_point(class_scope:dfsFuse.OpenDirResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::dfsFuse::DirEntry > dirs_;
  ::dfsFuse::FSstatus* status_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_fileserver_2eproto();
  friend void protobuf_AssignDesc_fileserver_2eproto();
  friend void protobuf_ShutdownFile_fileserver_2eproto();

  void InitAsDefaultInstance();
  static OpenDirResponse* default_instance_;
};
// -------------------------------------------------------------------

class MknodRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dfsFuse.MknodRequest) */ {
 public:
  MknodRequest();
  virtual ~MknodRequest();

  MknodRequest(const MknodRequest& from);

  inline MknodRequest& operator=(const MknodRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MknodRequest& default_instance();

  void Swap(MknodRequest* other);

  // implements Message ----------------------------------------------

  inline MknodRequest* New() const { return New(NULL); }

  MknodRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MknodRequest& from);
  void MergeFrom(const MknodRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MknodRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional uint64 mode = 2;
  void clear_mode();
  static const int kModeFieldNumber = 2;
  ::google::protobuf::uint64 mode() const;
  void set_mode(::google::protobuf::uint64 value);

  // optional uint64 dev = 3;
  void clear_dev();
  static const int kDevFieldNumber = 3;
  ::google::protobuf::uint64 dev() const;
  void set_dev(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:dfsFuse.MknodRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint64 mode_;
  ::google::protobuf::uint64 dev_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_fileserver_2eproto();
  friend void protobuf_AssignDesc_fileserver_2eproto();
  friend void protobuf_ShutdownFile_fileserver_2eproto();

  void InitAsDefaultInstance();
  static MknodRequest* default_instance_;
};
// -------------------------------------------------------------------

class MknodResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dfsFuse.MknodResponse) */ {
 public:
  MknodResponse();
  virtual ~MknodResponse();

  MknodResponse(const MknodResponse& from);

  inline MknodResponse& operator=(const MknodResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MknodResponse& default_instance();

  void Swap(MknodResponse* other);

  // implements Message ----------------------------------------------

  inline MknodResponse* New() const { return New(NULL); }

  MknodResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MknodResponse& from);
  void MergeFrom(const MknodResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MknodResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .dfsFuse.FSstatus status = 1;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  const ::dfsFuse::FSstatus& status() const;
  ::dfsFuse::FSstatus* mutable_status();
  ::dfsFuse::FSstatus* release_status();
  void set_allocated_status(::dfsFuse::FSstatus* status);

  // @@protoc_insertion_point(class_scope:dfsFuse.MknodResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::dfsFuse::FSstatus* status_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_fileserver_2eproto();
  friend void protobuf_AssignDesc_fileserver_2eproto();
  friend void protobuf_ShutdownFile_fileserver_2eproto();

  void InitAsDefaultInstance();
  static MknodResponse* default_instance_;
};
// -------------------------------------------------------------------

class OpenRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dfsFuse.OpenRequest) */ {
 public:
  OpenRequest();
  virtual ~OpenRequest();

  OpenRequest(const OpenRequest& from);

  inline OpenRequest& operator=(const OpenRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OpenRequest& default_instance();

  void Swap(OpenRequest* other);

  // implements Message ----------------------------------------------

  inline OpenRequest* New() const { return New(NULL); }

  OpenRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OpenRequest& from);
  void MergeFrom(const OpenRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OpenRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional uint32 flags = 2;
  void clear_flags();
  static const int kFlagsFieldNumber = 2;
  ::google::protobuf::uint32 flags() const;
  void set_flags(::google::protobuf::uint32 value);

  // optional .dfsFuse.ClientInfo info = 3;
  bool has_info() const;
  void clear_info();
  static const int kInfoFieldNumber = 3;
  const ::dfsFuse::ClientInfo& info() const;
  ::dfsFuse::ClientInfo* mutable_info();
  ::dfsFuse::ClientInfo* release_info();
  void set_allocated_info(::dfsFuse::ClientInfo* info);

  // @@protoc_insertion_point(class_scope:dfsFuse.OpenRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::dfsFuse::ClientInfo* info_;
  ::google::protobuf::uint32 flags_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_fileserver_2eproto();
  friend void protobuf_AssignDesc_fileserver_2eproto();
  friend void protobuf_ShutdownFile_fileserver_2eproto();

  void InitAsDefaultInstance();
  static OpenRequest* default_instance_;
};
// -------------------------------------------------------------------

class OpenResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dfsFuse.OpenResponse) */ {
 public:
  OpenResponse();
  virtual ~OpenResponse();

  OpenResponse(const OpenResponse& from);

  inline OpenResponse& operator=(const OpenResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OpenResponse& default_instance();

  void Swap(OpenResponse* other);

  // implements Message ----------------------------------------------

  inline OpenResponse* New() const { return New(NULL); }

  OpenResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OpenResponse& from);
  void MergeFrom(const OpenResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OpenResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 fileHandle = 1;
  void clear_filehandle();
  static const int kFileHandleFieldNumber = 1;
  ::google::protobuf::uint32 filehandle() const;
  void set_filehandle(::google::protobuf::uint32 value);

  // optional .dfsFuse.FSstatus status = 2;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 2;
  const ::dfsFuse::FSstatus& status() const;
  ::dfsFuse::FSstatus* mutable_status();
  ::dfsFuse::FSstatus* release_status();
  void set_allocated_status(::dfsFuse::FSstatus* status);

  // @@protoc_insertion_point(class_scope:dfsFuse.OpenResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::dfsFuse::FSstatus* status_;
  ::google::protobuf::uint32 filehandle_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_fileserver_2eproto();
  friend void protobuf_AssignDesc_fileserver_2eproto();
  friend void protobuf_ShutdownFile_fileserver_2eproto();

  void InitAsDefaultInstance();
  static OpenResponse* default_instance_;
};
// -------------------------------------------------------------------

class ReadRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dfsFuse.ReadRequest) */ {
 public:
  ReadRequest();
  virtual ~ReadRequest();

  ReadRequest(const ReadRequest& from);

  inline ReadRequest& operator=(const ReadRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReadRequest& default_instance();

  void Swap(ReadRequest* other);

  // implements Message ----------------------------------------------

  inline ReadRequest* New() const { return New(NULL); }

  ReadRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReadRequest& from);
  void MergeFrom(const ReadRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReadRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 fileHandle = 1;
  void clear_filehandle();
  static const int kFileHandleFieldNumber = 1;
  ::google::protobuf::uint32 filehandle() const;
  void set_filehandle(::google::protobuf::uint32 value);

  // optional uint32 size = 2;
  void clear_size();
  static const int kSizeFieldNumber = 2;
  ::google::protobuf::uint32 size() const;
  void set_size(::google::protobuf::uint32 value);

  // optional uint32 offset = 3;
  void clear_offset();
  static const int kOffsetFieldNumber = 3;
  ::google::protobuf::uint32 offset() const;
  void set_offset(::google::protobuf::uint32 value);

  // optional .dfsFuse.ClientInfo info = 4;
  bool has_info() const;
  void clear_info();
  static const int kInfoFieldNumber = 4;
  const ::dfsFuse::ClientInfo& info() const;
  ::dfsFuse::ClientInfo* mutable_info();
  ::dfsFuse::ClientInfo* release_info();
  void set_allocated_info(::dfsFuse::ClientInfo* info);

  // @@protoc_insertion_point(class_scope:dfsFuse.ReadRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint32 filehandle_;
  ::google::protobuf::uint32 size_;
  ::dfsFuse::ClientInfo* info_;
  ::google::protobuf::uint32 offset_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_fileserver_2eproto();
  friend void protobuf_AssignDesc_fileserver_2eproto();
  friend void protobuf_ShutdownFile_fileserver_2eproto();

  void InitAsDefaultInstance();
  static ReadRequest* default_instance_;
};
// -------------------------------------------------------------------

class ReadResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dfsFuse.ReadResponse) */ {
 public:
  ReadResponse();
  virtual ~ReadResponse();

  ReadResponse(const ReadResponse& from);

  inline ReadResponse& operator=(const ReadResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReadResponse& default_instance();

  void Swap(ReadResponse* other);

  // implements Message ----------------------------------------------

  inline ReadResponse* New() const { return New(NULL); }

  ReadResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReadResponse& from);
  void MergeFrom(const ReadResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReadResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 dataRead = 1;
  void clear_dataread();
  static const int kDataReadFieldNumber = 1;
  ::google::protobuf::int32 dataread() const;
  void set_dataread(::google::protobuf::int32 value);

  // optional bytes data = 2;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // optional .dfsFuse.FSstatus status = 3;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 3;
  const ::dfsFuse::FSstatus& status() const;
  ::dfsFuse::FSstatus* mutable_status();
  ::dfsFuse::FSstatus* release_status();
  void set_allocated_status(::dfsFuse::FSstatus* status);

  // @@protoc_insertion_point(class_scope:dfsFuse.ReadResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::dfsFuse::FSstatus* status_;
  ::google::protobuf::int32 dataread_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_fileserver_2eproto();
  friend void protobuf_AssignDesc_fileserver_2eproto();
  friend void protobuf_ShutdownFile_fileserver_2eproto();

  void InitAsDefaultInstance();
  static ReadResponse* default_instance_;
};
// -------------------------------------------------------------------

class WriteRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dfsFuse.WriteRequest) */ {
 public:
  WriteRequest();
  virtual ~WriteRequest();

  WriteRequest(const WriteRequest& from);

  inline WriteRequest& operator=(const WriteRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WriteRequest& default_instance();

  void Swap(WriteRequest* other);

  // implements Message ----------------------------------------------

  inline WriteRequest* New() const { return New(NULL); }

  WriteRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WriteRequest& from);
  void MergeFrom(const WriteRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WriteRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 fileHandle = 1;
  void clear_filehandle();
  static const int kFileHandleFieldNumber = 1;
  ::google::protobuf::uint32 filehandle() const;
  void set_filehandle(::google::protobuf::uint32 value);

  // optional bytes data = 2;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // optional uint32 size = 3;
  void clear_size();
  static const int kSizeFieldNumber = 3;
  ::google::protobuf::uint32 size() const;
  void set_size(::google::protobuf::uint32 value);

  // optional uint32 offset = 4;
  void clear_offset();
  static const int kOffsetFieldNumber = 4;
  ::google::protobuf::uint32 offset() const;
  void set_offset(::google::protobuf::uint32 value);

  // optional .dfsFuse.ClientInfo info = 5;
  bool has_info() const;
  void clear_info();
  static const int kInfoFieldNumber = 5;
  const ::dfsFuse::ClientInfo& info() const;
  ::dfsFuse::ClientInfo* mutable_info();
  ::dfsFuse::ClientInfo* release_info();
  void set_allocated_info(::dfsFuse::ClientInfo* info);

  // @@protoc_insertion_point(class_scope:dfsFuse.WriteRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::uint32 filehandle_;
  ::google::protobuf::uint32 size_;
  ::dfsFuse::ClientInfo* info_;
  ::google::protobuf::uint32 offset_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_fileserver_2eproto();
  friend void protobuf_AssignDesc_fileserver_2eproto();
  friend void protobuf_ShutdownFile_fileserver_2eproto();

  void InitAsDefaultInstance();
  static WriteRequest* default_instance_;
};
// -------------------------------------------------------------------

class WriteResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dfsFuse.WriteResponse) */ {
 public:
  WriteResponse();
  virtual ~WriteResponse();

  WriteResponse(const WriteResponse& from);

  inline WriteResponse& operator=(const WriteResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WriteResponse& default_instance();

  void Swap(WriteResponse* other);

  // implements Message ----------------------------------------------

  inline WriteResponse* New() const { return New(NULL); }

  WriteResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WriteResponse& from);
  void MergeFrom(const WriteResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WriteResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 dataWritten = 1;
  void clear_datawritten();
  static const int kDataWrittenFieldNumber = 1;
  ::google::protobuf::int32 datawritten() const;
  void set_datawritten(::google::protobuf::int32 value);

  // optional .dfsFuse.FSstatus status = 2;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 2;
  const ::dfsFuse::FSstatus& status() const;
  ::dfsFuse::FSstatus* mutable_status();
  ::dfsFuse::FSstatus* release_status();
  void set_allocated_status(::dfsFuse::FSstatus* status);

  // @@protoc_insertion_point(class_scope:dfsFuse.WriteResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::dfsFuse::FSstatus* status_;
  ::google::protobuf::int32 datawritten_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_fileserver_2eproto();
  friend void protobuf_AssignDesc_fileserver_2eproto();
  friend void protobuf_ShutdownFile_fileserver_2eproto();

  void InitAsDefaultInstance();
  static WriteResponse* default_instance_;
};
// -------------------------------------------------------------------

class UnlinkRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dfsFuse.UnlinkRequest) */ {
 public:
  UnlinkRequest();
  virtual ~UnlinkRequest();

  UnlinkRequest(const UnlinkRequest& from);

  inline UnlinkRequest& operator=(const UnlinkRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UnlinkRequest& default_instance();

  void Swap(UnlinkRequest* other);

  // implements Message ----------------------------------------------

  inline UnlinkRequest* New() const { return New(NULL); }

  UnlinkRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UnlinkRequest& from);
  void MergeFrom(const UnlinkRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UnlinkRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:dfsFuse.UnlinkRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_fileserver_2eproto();
  friend void protobuf_AssignDesc_fileserver_2eproto();
  friend void protobuf_ShutdownFile_fileserver_2eproto();

  void InitAsDefaultInstance();
  static UnlinkRequest* default_instance_;
};
// -------------------------------------------------------------------

class UnlinkResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dfsFuse.UnlinkResponse) */ {
 public:
  UnlinkResponse();
  virtual ~UnlinkResponse();

  UnlinkResponse(const UnlinkResponse& from);

  inline UnlinkResponse& operator=(const UnlinkResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UnlinkResponse& default_instance();

  void Swap(UnlinkResponse* other);

  // implements Message ----------------------------------------------

  inline UnlinkResponse* New() const { return New(NULL); }

  UnlinkResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UnlinkResponse& from);
  void MergeFrom(const UnlinkResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UnlinkResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .dfsFuse.FSstatus status = 1;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  const ::dfsFuse::FSstatus& status() const;
  ::dfsFuse::FSstatus* mutable_status();
  ::dfsFuse::FSstatus* release_status();
  void set_allocated_status(::dfsFuse::FSstatus* status);

  // @@protoc_insertion_point(class_scope:dfsFuse.UnlinkResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::dfsFuse::FSstatus* status_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_fileserver_2eproto();
  friend void protobuf_AssignDesc_fileserver_2eproto();
  friend void protobuf_ShutdownFile_fileserver_2eproto();

  void InitAsDefaultInstance();
  static UnlinkResponse* default_instance_;
};
// -------------------------------------------------------------------

class RenameRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dfsFuse.RenameRequest) */ {
 public:
  RenameRequest();
  virtual ~RenameRequest();

  RenameRequest(const RenameRequest& from);

  inline RenameRequest& operator=(const RenameRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RenameRequest& default_instance();

  void Swap(RenameRequest* other);

  // implements Message ----------------------------------------------

  inline RenameRequest* New() const { return New(NULL); }

  RenameRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RenameRequest& from);
  void MergeFrom(const RenameRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RenameRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string oldname = 1;
  void clear_oldname();
  static const int kOldnameFieldNumber = 1;
  const ::std::string& oldname() const;
  void set_oldname(const ::std::string& value);
  void set_oldname(const char* value);
  void set_oldname(const char* value, size_t size);
  ::std::string* mutable_oldname();
  ::std::string* release_oldname();
  void set_allocated_oldname(::std::string* oldname);

  // optional string newname = 2;
  void clear_newname();
  static const int kNewnameFieldNumber = 2;
  const ::std::string& newname() const;
  void set_newname(const ::std::string& value);
  void set_newname(const char* value);
  void set_newname(const char* value, size_t size);
  ::std::string* mutable_newname();
  ::std::string* release_newname();
  void set_allocated_newname(::std::string* newname);

  // @@protoc_insertion_point(class_scope:dfsFuse.RenameRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr oldname_;
  ::google::protobuf::internal::ArenaStringPtr newname_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_fileserver_2eproto();
  friend void protobuf_AssignDesc_fileserver_2eproto();
  friend void protobuf_ShutdownFile_fileserver_2eproto();

  void InitAsDefaultInstance();
  static RenameRequest* default_instance_;
};
// -------------------------------------------------------------------

class RenameResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dfsFuse.RenameResponse) */ {
 public:
  RenameResponse();
  virtual ~RenameResponse();

  RenameResponse(const RenameResponse& from);

  inline RenameResponse& operator=(const RenameResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RenameResponse& default_instance();

  void Swap(RenameResponse* other);

  // implements Message ----------------------------------------------

  inline RenameResponse* New() const { return New(NULL); }

  RenameResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RenameResponse& from);
  void MergeFrom(const RenameResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RenameResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .dfsFuse.FSstatus status = 1;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  const ::dfsFuse::FSstatus& status() const;
  ::dfsFuse::FSstatus* mutable_status();
  ::dfsFuse::FSstatus* release_status();
  void set_allocated_status(::dfsFuse::FSstatus* status);

  // @@protoc_insertion_point(class_scope:dfsFuse.RenameResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::dfsFuse::FSstatus* status_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_fileserver_2eproto();
  friend void protobuf_AssignDesc_fileserver_2eproto();
  friend void protobuf_ShutdownFile_fileserver_2eproto();

  void InitAsDefaultInstance();
  static RenameResponse* default_instance_;
};
// -------------------------------------------------------------------

class RmdirRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dfsFuse.RmdirRequest) */ {
 public:
  RmdirRequest();
  virtual ~RmdirRequest();

  RmdirRequest(const RmdirRequest& from);

  inline RmdirRequest& operator=(const RmdirRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RmdirRequest& default_instance();

  void Swap(RmdirRequest* other);

  // implements Message ----------------------------------------------

  inline RmdirRequest* New() const { return New(NULL); }

  RmdirRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RmdirRequest& from);
  void MergeFrom(const RmdirRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RmdirRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:dfsFuse.RmdirRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_fileserver_2eproto();
  friend void protobuf_AssignDesc_fileserver_2eproto();
  friend void protobuf_ShutdownFile_fileserver_2eproto();

  void InitAsDefaultInstance();
  static RmdirRequest* default_instance_;
};
// -------------------------------------------------------------------

class RmdirResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dfsFuse.RmdirResponse) */ {
 public:
  RmdirResponse();
  virtual ~RmdirResponse();

  RmdirResponse(const RmdirResponse& from);

  inline RmdirResponse& operator=(const RmdirResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RmdirResponse& default_instance();

  void Swap(RmdirResponse* other);

  // implements Message ----------------------------------------------

  inline RmdirResponse* New() const { return New(NULL); }

  RmdirResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RmdirResponse& from);
  void MergeFrom(const RmdirResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RmdirResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .dfsFuse.FSstatus status = 1;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  const ::dfsFuse::FSstatus& status() const;
  ::dfsFuse::FSstatus* mutable_status();
  ::dfsFuse::FSstatus* release_status();
  void set_allocated_status(::dfsFuse::FSstatus* status);

  // @@protoc_insertion_point(class_scope:dfsFuse.RmdirResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::dfsFuse::FSstatus* status_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_fileserver_2eproto();
  friend void protobuf_AssignDesc_fileserver_2eproto();
  friend void protobuf_ShutdownFile_fileserver_2eproto();

  void InitAsDefaultInstance();
  static RmdirResponse* default_instance_;
};
// -------------------------------------------------------------------

class ReleaseRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dfsFuse.ReleaseRequest) */ {
 public:
  ReleaseRequest();
  virtual ~ReleaseRequest();

  ReleaseRequest(const ReleaseRequest& from);

  inline ReleaseRequest& operator=(const ReleaseRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReleaseRequest& default_instance();

  void Swap(ReleaseRequest* other);

  // implements Message ----------------------------------------------

  inline ReleaseRequest* New() const { return New(NULL); }

  ReleaseRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReleaseRequest& from);
  void MergeFrom(const ReleaseRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReleaseRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 fileHandle = 1;
  void clear_filehandle();
  static const int kFileHandleFieldNumber = 1;
  ::google::protobuf::uint32 filehandle() const;
  void set_filehandle(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:dfsFuse.ReleaseRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint32 filehandle_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_fileserver_2eproto();
  friend void protobuf_AssignDesc_fileserver_2eproto();
  friend void protobuf_ShutdownFile_fileserver_2eproto();

  void InitAsDefaultInstance();
  static ReleaseRequest* default_instance_;
};
// -------------------------------------------------------------------

class ReleaseResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dfsFuse.ReleaseResponse) */ {
 public:
  ReleaseResponse();
  virtual ~ReleaseResponse();

  ReleaseResponse(const ReleaseResponse& from);

  inline ReleaseResponse& operator=(const ReleaseResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReleaseResponse& default_instance();

  void Swap(ReleaseResponse* other);

  // implements Message ----------------------------------------------

  inline ReleaseResponse* New() const { return New(NULL); }

  ReleaseResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReleaseResponse& from);
  void MergeFrom(const ReleaseResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReleaseResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .dfsFuse.FSstatus status = 1;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  const ::dfsFuse::FSstatus& status() const;
  ::dfsFuse::FSstatus* mutable_status();
  ::dfsFuse::FSstatus* release_status();
  void set_allocated_status(::dfsFuse::FSstatus* status);

  // @@protoc_insertion_point(class_scope:dfsFuse.ReleaseResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::dfsFuse::FSstatus* status_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_fileserver_2eproto();
  friend void protobuf_AssignDesc_fileserver_2eproto();
  friend void protobuf_ShutdownFile_fileserver_2eproto();

  void InitAsDefaultInstance();
  static ReleaseResponse* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// FSstatus

// optional int32 retCode = 1;
inline void FSstatus::clear_retcode() {
  retcode_ = 0;
}
inline ::google::protobuf::int32 FSstatus::retcode() const {
  // @@protoc_insertion_point(field_get:dfsFuse.FSstatus.retCode)
  return retcode_;
}
inline void FSstatus::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:dfsFuse.FSstatus.retCode)
}

// -------------------------------------------------------------------

// Owner

// optional uint32 uid = 1;
inline void Owner::clear_uid() {
  uid_ = 0u;
}
inline ::google::protobuf::uint32 Owner::uid() const {
  // @@protoc_insertion_point(field_get:dfsFuse.Owner.uid)
  return uid_;
}
inline void Owner::set_uid(::google::protobuf::uint32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:dfsFuse.Owner.uid)
}

// optional uint32 gid = 2;
inline void Owner::clear_gid() {
  gid_ = 0u;
}
inline ::google::protobuf::uint32 Owner::gid() const {
  // @@protoc_insertion_point(field_get:dfsFuse.Owner.gid)
  return gid_;
}
inline void Owner::set_gid(::google::protobuf::uint32 value) {
  
  gid_ = value;
  // @@protoc_insertion_point(field_set:dfsFuse.Owner.gid)
}

// -------------------------------------------------------------------

// ClientInfo

// optional .dfsFuse.Owner Owner = 1;
inline bool ClientInfo::has_owner() const {
  return !_is_default_instance_ && owner_ != NULL;
}
inline void ClientInfo::clear_owner() {
  if (GetArenaNoVirtual() == NULL && owner_ != NULL) delete owner_;
  owner_ = NULL;
}
inline const ::dfsFuse::Owner& ClientInfo::owner() const {
  // @@protoc_insertion_point(field_get:dfsFuse.ClientInfo.Owner)
  return owner_ != NULL ? *owner_ : *default_instance_->owner_;
}
inline ::dfsFuse::Owner* ClientInfo::mutable_owner() {
  
  if (owner_ == NULL) {
    owner_ = new ::dfsFuse::Owner;
  }
  // @@protoc_insertion_point(field_mutable:dfsFuse.ClientInfo.Owner)
  return owner_;
}
inline ::dfsFuse::Owner* ClientInfo::release_owner() {
  // @@protoc_insertion_point(field_release:dfsFuse.ClientInfo.Owner)
  
  ::dfsFuse::Owner* temp = owner_;
  owner_ = NULL;
  return temp;
}
inline void ClientInfo::set_allocated_owner(::dfsFuse::Owner* owner) {
  delete owner_;
  owner_ = owner;
  if (owner) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dfsFuse.ClientInfo.Owner)
}

// optional uint32 Pid = 2;
inline void ClientInfo::clear_pid() {
  pid_ = 0u;
}
inline ::google::protobuf::uint32 ClientInfo::pid() const {
  // @@protoc_insertion_point(field_get:dfsFuse.ClientInfo.Pid)
  return pid_;
}
inline void ClientInfo::set_pid(::google::protobuf::uint32 value) {
  
  pid_ = value;
  // @@protoc_insertion_point(field_set:dfsFuse.ClientInfo.Pid)
}

// -------------------------------------------------------------------

// Attr

// optional uint64 dev = 1;
inline void Attr::clear_dev() {
  dev_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Attr::dev() const {
  // @@protoc_insertion_point(field_get:dfsFuse.Attr.dev)
  return dev_;
}
inline void Attr::set_dev(::google::protobuf::uint64 value) {
  
  dev_ = value;
  // @@protoc_insertion_point(field_set:dfsFuse.Attr.dev)
}

// optional uint64 ino = 2;
inline void Attr::clear_ino() {
  ino_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Attr::ino() const {
  // @@protoc_insertion_point(field_get:dfsFuse.Attr.ino)
  return ino_;
}
inline void Attr::set_ino(::google::protobuf::uint64 value) {
  
  ino_ = value;
  // @@protoc_insertion_point(field_set:dfsFuse.Attr.ino)
}

// optional uint64 mode = 3;
inline void Attr::clear_mode() {
  mode_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Attr::mode() const {
  // @@protoc_insertion_point(field_get:dfsFuse.Attr.mode)
  return mode_;
}
inline void Attr::set_mode(::google::protobuf::uint64 value) {
  
  mode_ = value;
  // @@protoc_insertion_point(field_set:dfsFuse.Attr.mode)
}

// optional uint64 nlink = 4;
inline void Attr::clear_nlink() {
  nlink_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Attr::nlink() const {
  // @@protoc_insertion_point(field_get:dfsFuse.Attr.nlink)
  return nlink_;
}
inline void Attr::set_nlink(::google::protobuf::uint64 value) {
  
  nlink_ = value;
  // @@protoc_insertion_point(field_set:dfsFuse.Attr.nlink)
}

// optional .dfsFuse.Owner owner = 5;
inline bool Attr::has_owner() const {
  return !_is_default_instance_ && owner_ != NULL;
}
inline void Attr::clear_owner() {
  if (GetArenaNoVirtual() == NULL && owner_ != NULL) delete owner_;
  owner_ = NULL;
}
inline const ::dfsFuse::Owner& Attr::owner() const {
  // @@protoc_insertion_point(field_get:dfsFuse.Attr.owner)
  return owner_ != NULL ? *owner_ : *default_instance_->owner_;
}
inline ::dfsFuse::Owner* Attr::mutable_owner() {
  
  if (owner_ == NULL) {
    owner_ = new ::dfsFuse::Owner;
  }
  // @@protoc_insertion_point(field_mutable:dfsFuse.Attr.owner)
  return owner_;
}
inline ::dfsFuse::Owner* Attr::release_owner() {
  // @@protoc_insertion_point(field_release:dfsFuse.Attr.owner)
  
  ::dfsFuse::Owner* temp = owner_;
  owner_ = NULL;
  return temp;
}
inline void Attr::set_allocated_owner(::dfsFuse::Owner* owner) {
  delete owner_;
  owner_ = owner;
  if (owner) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dfsFuse.Attr.owner)
}

// optional uint64 rdev = 6;
inline void Attr::clear_rdev() {
  rdev_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Attr::rdev() const {
  // @@protoc_insertion_point(field_get:dfsFuse.Attr.rdev)
  return rdev_;
}
inline void Attr::set_rdev(::google::protobuf::uint64 value) {
  
  rdev_ = value;
  // @@protoc_insertion_point(field_set:dfsFuse.Attr.rdev)
}

// optional uint64 size = 7;
inline void Attr::clear_size() {
  size_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Attr::size() const {
  // @@protoc_insertion_point(field_get:dfsFuse.Attr.size)
  return size_;
}
inline void Attr::set_size(::google::protobuf::uint64 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:dfsFuse.Attr.size)
}

// optional uint64 blksize = 8;
inline void Attr::clear_blksize() {
  blksize_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Attr::blksize() const {
  // @@protoc_insertion_point(field_get:dfsFuse.Attr.blksize)
  return blksize_;
}
inline void Attr::set_blksize(::google::protobuf::uint64 value) {
  
  blksize_ = value;
  // @@protoc_insertion_point(field_set:dfsFuse.Attr.blksize)
}

// optional uint64 blocks = 9;
inline void Attr::clear_blocks() {
  blocks_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Attr::blocks() const {
  // @@protoc_insertion_point(field_get:dfsFuse.Attr.blocks)
  return blocks_;
}
inline void Attr::set_blocks(::google::protobuf::uint64 value) {
  
  blocks_ = value;
  // @@protoc_insertion_point(field_set:dfsFuse.Attr.blocks)
}

// optional uint64 atime = 10;
inline void Attr::clear_atime() {
  atime_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Attr::atime() const {
  // @@protoc_insertion_point(field_get:dfsFuse.Attr.atime)
  return atime_;
}
inline void Attr::set_atime(::google::protobuf::uint64 value) {
  
  atime_ = value;
  // @@protoc_insertion_point(field_set:dfsFuse.Attr.atime)
}

// optional uint64 atimens = 11;
inline void Attr::clear_atimens() {
  atimens_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Attr::atimens() const {
  // @@protoc_insertion_point(field_get:dfsFuse.Attr.atimens)
  return atimens_;
}
inline void Attr::set_atimens(::google::protobuf::uint64 value) {
  
  atimens_ = value;
  // @@protoc_insertion_point(field_set:dfsFuse.Attr.atimens)
}

// optional uint64 mtime = 12;
inline void Attr::clear_mtime() {
  mtime_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Attr::mtime() const {
  // @@protoc_insertion_point(field_get:dfsFuse.Attr.mtime)
  return mtime_;
}
inline void Attr::set_mtime(::google::protobuf::uint64 value) {
  
  mtime_ = value;
  // @@protoc_insertion_point(field_set:dfsFuse.Attr.mtime)
}

// optional uint64 mtimens = 13;
inline void Attr::clear_mtimens() {
  mtimens_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Attr::mtimens() const {
  // @@protoc_insertion_point(field_get:dfsFuse.Attr.mtimens)
  return mtimens_;
}
inline void Attr::set_mtimens(::google::protobuf::uint64 value) {
  
  mtimens_ = value;
  // @@protoc_insertion_point(field_set:dfsFuse.Attr.mtimens)
}

// optional uint64 ctime = 14;
inline void Attr::clear_ctime() {
  ctime_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Attr::ctime() const {
  // @@protoc_insertion_point(field_get:dfsFuse.Attr.ctime)
  return ctime_;
}
inline void Attr::set_ctime(::google::protobuf::uint64 value) {
  
  ctime_ = value;
  // @@protoc_insertion_point(field_set:dfsFuse.Attr.ctime)
}

// optional uint64 ctimens = 15;
inline void Attr::clear_ctimens() {
  ctimens_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Attr::ctimens() const {
  // @@protoc_insertion_point(field_get:dfsFuse.Attr.ctimens)
  return ctimens_;
}
inline void Attr::set_ctimens(::google::protobuf::uint64 value) {
  
  ctimens_ = value;
  // @@protoc_insertion_point(field_set:dfsFuse.Attr.ctimens)
}

// -------------------------------------------------------------------

// GetAttrRequest

// optional string name = 1;
inline void GetAttrRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetAttrRequest::name() const {
  // @@protoc_insertion_point(field_get:dfsFuse.GetAttrRequest.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetAttrRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dfsFuse.GetAttrRequest.name)
}
inline void GetAttrRequest::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dfsFuse.GetAttrRequest.name)
}
inline void GetAttrRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dfsFuse.GetAttrRequest.name)
}
inline ::std::string* GetAttrRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:dfsFuse.GetAttrRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetAttrRequest::release_name() {
  // @@protoc_insertion_point(field_release:dfsFuse.GetAttrRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetAttrRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:dfsFuse.GetAttrRequest.name)
}

// optional .dfsFuse.ClientInfo info = 2;
inline bool GetAttrRequest::has_info() const {
  return !_is_default_instance_ && info_ != NULL;
}
inline void GetAttrRequest::clear_info() {
  if (GetArenaNoVirtual() == NULL && info_ != NULL) delete info_;
  info_ = NULL;
}
inline const ::dfsFuse::ClientInfo& GetAttrRequest::info() const {
  // @@protoc_insertion_point(field_get:dfsFuse.GetAttrRequest.info)
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::dfsFuse::ClientInfo* GetAttrRequest::mutable_info() {
  
  if (info_ == NULL) {
    info_ = new ::dfsFuse::ClientInfo;
  }
  // @@protoc_insertion_point(field_mutable:dfsFuse.GetAttrRequest.info)
  return info_;
}
inline ::dfsFuse::ClientInfo* GetAttrRequest::release_info() {
  // @@protoc_insertion_point(field_release:dfsFuse.GetAttrRequest.info)
  
  ::dfsFuse::ClientInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline void GetAttrRequest::set_allocated_info(::dfsFuse::ClientInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dfsFuse.GetAttrRequest.info)
}

// -------------------------------------------------------------------

// GetAttrResponse

// optional .dfsFuse.Attr attr = 1;
inline bool GetAttrResponse::has_attr() const {
  return !_is_default_instance_ && attr_ != NULL;
}
inline void GetAttrResponse::clear_attr() {
  if (GetArenaNoVirtual() == NULL && attr_ != NULL) delete attr_;
  attr_ = NULL;
}
inline const ::dfsFuse::Attr& GetAttrResponse::attr() const {
  // @@protoc_insertion_point(field_get:dfsFuse.GetAttrResponse.attr)
  return attr_ != NULL ? *attr_ : *default_instance_->attr_;
}
inline ::dfsFuse::Attr* GetAttrResponse::mutable_attr() {
  
  if (attr_ == NULL) {
    attr_ = new ::dfsFuse::Attr;
  }
  // @@protoc_insertion_point(field_mutable:dfsFuse.GetAttrResponse.attr)
  return attr_;
}
inline ::dfsFuse::Attr* GetAttrResponse::release_attr() {
  // @@protoc_insertion_point(field_release:dfsFuse.GetAttrResponse.attr)
  
  ::dfsFuse::Attr* temp = attr_;
  attr_ = NULL;
  return temp;
}
inline void GetAttrResponse::set_allocated_attr(::dfsFuse::Attr* attr) {
  delete attr_;
  attr_ = attr;
  if (attr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dfsFuse.GetAttrResponse.attr)
}

// optional .dfsFuse.FSstatus status = 2;
inline bool GetAttrResponse::has_status() const {
  return !_is_default_instance_ && status_ != NULL;
}
inline void GetAttrResponse::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}
inline const ::dfsFuse::FSstatus& GetAttrResponse::status() const {
  // @@protoc_insertion_point(field_get:dfsFuse.GetAttrResponse.status)
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
inline ::dfsFuse::FSstatus* GetAttrResponse::mutable_status() {
  
  if (status_ == NULL) {
    status_ = new ::dfsFuse::FSstatus;
  }
  // @@protoc_insertion_point(field_mutable:dfsFuse.GetAttrResponse.status)
  return status_;
}
inline ::dfsFuse::FSstatus* GetAttrResponse::release_status() {
  // @@protoc_insertion_point(field_release:dfsFuse.GetAttrResponse.status)
  
  ::dfsFuse::FSstatus* temp = status_;
  status_ = NULL;
  return temp;
}
inline void GetAttrResponse::set_allocated_status(::dfsFuse::FSstatus* status) {
  delete status_;
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dfsFuse.GetAttrResponse.status)
}

// -------------------------------------------------------------------

// MkdirRequest

// optional string name = 1;
inline void MkdirRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MkdirRequest::name() const {
  // @@protoc_insertion_point(field_get:dfsFuse.MkdirRequest.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MkdirRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dfsFuse.MkdirRequest.name)
}
inline void MkdirRequest::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dfsFuse.MkdirRequest.name)
}
inline void MkdirRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dfsFuse.MkdirRequest.name)
}
inline ::std::string* MkdirRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:dfsFuse.MkdirRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MkdirRequest::release_name() {
  // @@protoc_insertion_point(field_release:dfsFuse.MkdirRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MkdirRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:dfsFuse.MkdirRequest.name)
}

// optional uint64 mode = 2;
inline void MkdirRequest::clear_mode() {
  mode_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 MkdirRequest::mode() const {
  // @@protoc_insertion_point(field_get:dfsFuse.MkdirRequest.mode)
  return mode_;
}
inline void MkdirRequest::set_mode(::google::protobuf::uint64 value) {
  
  mode_ = value;
  // @@protoc_insertion_point(field_set:dfsFuse.MkdirRequest.mode)
}

// optional .dfsFuse.ClientInfo info = 3;
inline bool MkdirRequest::has_info() const {
  return !_is_default_instance_ && info_ != NULL;
}
inline void MkdirRequest::clear_info() {
  if (GetArenaNoVirtual() == NULL && info_ != NULL) delete info_;
  info_ = NULL;
}
inline const ::dfsFuse::ClientInfo& MkdirRequest::info() const {
  // @@protoc_insertion_point(field_get:dfsFuse.MkdirRequest.info)
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::dfsFuse::ClientInfo* MkdirRequest::mutable_info() {
  
  if (info_ == NULL) {
    info_ = new ::dfsFuse::ClientInfo;
  }
  // @@protoc_insertion_point(field_mutable:dfsFuse.MkdirRequest.info)
  return info_;
}
inline ::dfsFuse::ClientInfo* MkdirRequest::release_info() {
  // @@protoc_insertion_point(field_release:dfsFuse.MkdirRequest.info)
  
  ::dfsFuse::ClientInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline void MkdirRequest::set_allocated_info(::dfsFuse::ClientInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dfsFuse.MkdirRequest.info)
}

// -------------------------------------------------------------------

// MkdirResponse

// optional .dfsFuse.FSstatus status = 1;
inline bool MkdirResponse::has_status() const {
  return !_is_default_instance_ && status_ != NULL;
}
inline void MkdirResponse::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}
inline const ::dfsFuse::FSstatus& MkdirResponse::status() const {
  // @@protoc_insertion_point(field_get:dfsFuse.MkdirResponse.status)
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
inline ::dfsFuse::FSstatus* MkdirResponse::mutable_status() {
  
  if (status_ == NULL) {
    status_ = new ::dfsFuse::FSstatus;
  }
  // @@protoc_insertion_point(field_mutable:dfsFuse.MkdirResponse.status)
  return status_;
}
inline ::dfsFuse::FSstatus* MkdirResponse::release_status() {
  // @@protoc_insertion_point(field_release:dfsFuse.MkdirResponse.status)
  
  ::dfsFuse::FSstatus* temp = status_;
  status_ = NULL;
  return temp;
}
inline void MkdirResponse::set_allocated_status(::dfsFuse::FSstatus* status) {
  delete status_;
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dfsFuse.MkdirResponse.status)
}

// -------------------------------------------------------------------

// OpenDirRequest

// optional string name = 1;
inline void OpenDirRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OpenDirRequest::name() const {
  // @@protoc_insertion_point(field_get:dfsFuse.OpenDirRequest.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OpenDirRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dfsFuse.OpenDirRequest.name)
}
inline void OpenDirRequest::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dfsFuse.OpenDirRequest.name)
}
inline void OpenDirRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dfsFuse.OpenDirRequest.name)
}
inline ::std::string* OpenDirRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:dfsFuse.OpenDirRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OpenDirRequest::release_name() {
  // @@protoc_insertion_point(field_release:dfsFuse.OpenDirRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OpenDirRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:dfsFuse.OpenDirRequest.name)
}

// optional .dfsFuse.ClientInfo info = 2;
inline bool OpenDirRequest::has_info() const {
  return !_is_default_instance_ && info_ != NULL;
}
inline void OpenDirRequest::clear_info() {
  if (GetArenaNoVirtual() == NULL && info_ != NULL) delete info_;
  info_ = NULL;
}
inline const ::dfsFuse::ClientInfo& OpenDirRequest::info() const {
  // @@protoc_insertion_point(field_get:dfsFuse.OpenDirRequest.info)
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::dfsFuse::ClientInfo* OpenDirRequest::mutable_info() {
  
  if (info_ == NULL) {
    info_ = new ::dfsFuse::ClientInfo;
  }
  // @@protoc_insertion_point(field_mutable:dfsFuse.OpenDirRequest.info)
  return info_;
}
inline ::dfsFuse::ClientInfo* OpenDirRequest::release_info() {
  // @@protoc_insertion_point(field_release:dfsFuse.OpenDirRequest.info)
  
  ::dfsFuse::ClientInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline void OpenDirRequest::set_allocated_info(::dfsFuse::ClientInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dfsFuse.OpenDirRequest.info)
}

// -------------------------------------------------------------------

// DirEntry

// optional string name = 1;
inline void DirEntry::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DirEntry::name() const {
  // @@protoc_insertion_point(field_get:dfsFuse.DirEntry.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DirEntry::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dfsFuse.DirEntry.name)
}
inline void DirEntry::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dfsFuse.DirEntry.name)
}
inline void DirEntry::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dfsFuse.DirEntry.name)
}
inline ::std::string* DirEntry::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:dfsFuse.DirEntry.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DirEntry::release_name() {
  // @@protoc_insertion_point(field_release:dfsFuse.DirEntry.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DirEntry::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:dfsFuse.DirEntry.name)
}

// optional uint64 ino = 2;
inline void DirEntry::clear_ino() {
  ino_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 DirEntry::ino() const {
  // @@protoc_insertion_point(field_get:dfsFuse.DirEntry.ino)
  return ino_;
}
inline void DirEntry::set_ino(::google::protobuf::uint64 value) {
  
  ino_ = value;
  // @@protoc_insertion_point(field_set:dfsFuse.DirEntry.ino)
}

// optional uint64 mode = 3;
inline void DirEntry::clear_mode() {
  mode_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 DirEntry::mode() const {
  // @@protoc_insertion_point(field_get:dfsFuse.DirEntry.mode)
  return mode_;
}
inline void DirEntry::set_mode(::google::protobuf::uint64 value) {
  
  mode_ = value;
  // @@protoc_insertion_point(field_set:dfsFuse.DirEntry.mode)
}

// -------------------------------------------------------------------

// OpenDirResponse

// repeated .dfsFuse.DirEntry dirs = 1;
inline int OpenDirResponse::dirs_size() const {
  return dirs_.size();
}
inline void OpenDirResponse::clear_dirs() {
  dirs_.Clear();
}
inline const ::dfsFuse::DirEntry& OpenDirResponse::dirs(int index) const {
  // @@protoc_insertion_point(field_get:dfsFuse.OpenDirResponse.dirs)
  return dirs_.Get(index);
}
inline ::dfsFuse::DirEntry* OpenDirResponse::mutable_dirs(int index) {
  // @@protoc_insertion_point(field_mutable:dfsFuse.OpenDirResponse.dirs)
  return dirs_.Mutable(index);
}
inline ::dfsFuse::DirEntry* OpenDirResponse::add_dirs() {
  // @@protoc_insertion_point(field_add:dfsFuse.OpenDirResponse.dirs)
  return dirs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::dfsFuse::DirEntry >*
OpenDirResponse::mutable_dirs() {
  // @@protoc_insertion_point(field_mutable_list:dfsFuse.OpenDirResponse.dirs)
  return &dirs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::dfsFuse::DirEntry >&
OpenDirResponse::dirs() const {
  // @@protoc_insertion_point(field_list:dfsFuse.OpenDirResponse.dirs)
  return dirs_;
}

// optional .dfsFuse.FSstatus status = 2;
inline bool OpenDirResponse::has_status() const {
  return !_is_default_instance_ && status_ != NULL;
}
inline void OpenDirResponse::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}
inline const ::dfsFuse::FSstatus& OpenDirResponse::status() const {
  // @@protoc_insertion_point(field_get:dfsFuse.OpenDirResponse.status)
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
inline ::dfsFuse::FSstatus* OpenDirResponse::mutable_status() {
  
  if (status_ == NULL) {
    status_ = new ::dfsFuse::FSstatus;
  }
  // @@protoc_insertion_point(field_mutable:dfsFuse.OpenDirResponse.status)
  return status_;
}
inline ::dfsFuse::FSstatus* OpenDirResponse::release_status() {
  // @@protoc_insertion_point(field_release:dfsFuse.OpenDirResponse.status)
  
  ::dfsFuse::FSstatus* temp = status_;
  status_ = NULL;
  return temp;
}
inline void OpenDirResponse::set_allocated_status(::dfsFuse::FSstatus* status) {
  delete status_;
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dfsFuse.OpenDirResponse.status)
}

// -------------------------------------------------------------------

// MknodRequest

// optional string name = 1;
inline void MknodRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MknodRequest::name() const {
  // @@protoc_insertion_point(field_get:dfsFuse.MknodRequest.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MknodRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dfsFuse.MknodRequest.name)
}
inline void MknodRequest::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dfsFuse.MknodRequest.name)
}
inline void MknodRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dfsFuse.MknodRequest.name)
}
inline ::std::string* MknodRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:dfsFuse.MknodRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MknodRequest::release_name() {
  // @@protoc_insertion_point(field_release:dfsFuse.MknodRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MknodRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:dfsFuse.MknodRequest.name)
}

// optional uint64 mode = 2;
inline void MknodRequest::clear_mode() {
  mode_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 MknodRequest::mode() const {
  // @@protoc_insertion_point(field_get:dfsFuse.MknodRequest.mode)
  return mode_;
}
inline void MknodRequest::set_mode(::google::protobuf::uint64 value) {
  
  mode_ = value;
  // @@protoc_insertion_point(field_set:dfsFuse.MknodRequest.mode)
}

// optional uint64 dev = 3;
inline void MknodRequest::clear_dev() {
  dev_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 MknodRequest::dev() const {
  // @@protoc_insertion_point(field_get:dfsFuse.MknodRequest.dev)
  return dev_;
}
inline void MknodRequest::set_dev(::google::protobuf::uint64 value) {
  
  dev_ = value;
  // @@protoc_insertion_point(field_set:dfsFuse.MknodRequest.dev)
}

// -------------------------------------------------------------------

// MknodResponse

// optional .dfsFuse.FSstatus status = 1;
inline bool MknodResponse::has_status() const {
  return !_is_default_instance_ && status_ != NULL;
}
inline void MknodResponse::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}
inline const ::dfsFuse::FSstatus& MknodResponse::status() const {
  // @@protoc_insertion_point(field_get:dfsFuse.MknodResponse.status)
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
inline ::dfsFuse::FSstatus* MknodResponse::mutable_status() {
  
  if (status_ == NULL) {
    status_ = new ::dfsFuse::FSstatus;
  }
  // @@protoc_insertion_point(field_mutable:dfsFuse.MknodResponse.status)
  return status_;
}
inline ::dfsFuse::FSstatus* MknodResponse::release_status() {
  // @@protoc_insertion_point(field_release:dfsFuse.MknodResponse.status)
  
  ::dfsFuse::FSstatus* temp = status_;
  status_ = NULL;
  return temp;
}
inline void MknodResponse::set_allocated_status(::dfsFuse::FSstatus* status) {
  delete status_;
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dfsFuse.MknodResponse.status)
}

// -------------------------------------------------------------------

// OpenRequest

// optional string name = 1;
inline void OpenRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OpenRequest::name() const {
  // @@protoc_insertion_point(field_get:dfsFuse.OpenRequest.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OpenRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dfsFuse.OpenRequest.name)
}
inline void OpenRequest::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dfsFuse.OpenRequest.name)
}
inline void OpenRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dfsFuse.OpenRequest.name)
}
inline ::std::string* OpenRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:dfsFuse.OpenRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OpenRequest::release_name() {
  // @@protoc_insertion_point(field_release:dfsFuse.OpenRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OpenRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:dfsFuse.OpenRequest.name)
}

// optional uint32 flags = 2;
inline void OpenRequest::clear_flags() {
  flags_ = 0u;
}
inline ::google::protobuf::uint32 OpenRequest::flags() const {
  // @@protoc_insertion_point(field_get:dfsFuse.OpenRequest.flags)
  return flags_;
}
inline void OpenRequest::set_flags(::google::protobuf::uint32 value) {
  
  flags_ = value;
  // @@protoc_insertion_point(field_set:dfsFuse.OpenRequest.flags)
}

// optional .dfsFuse.ClientInfo info = 3;
inline bool OpenRequest::has_info() const {
  return !_is_default_instance_ && info_ != NULL;
}
inline void OpenRequest::clear_info() {
  if (GetArenaNoVirtual() == NULL && info_ != NULL) delete info_;
  info_ = NULL;
}
inline const ::dfsFuse::ClientInfo& OpenRequest::info() const {
  // @@protoc_insertion_point(field_get:dfsFuse.OpenRequest.info)
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::dfsFuse::ClientInfo* OpenRequest::mutable_info() {
  
  if (info_ == NULL) {
    info_ = new ::dfsFuse::ClientInfo;
  }
  // @@protoc_insertion_point(field_mutable:dfsFuse.OpenRequest.info)
  return info_;
}
inline ::dfsFuse::ClientInfo* OpenRequest::release_info() {
  // @@protoc_insertion_point(field_release:dfsFuse.OpenRequest.info)
  
  ::dfsFuse::ClientInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline void OpenRequest::set_allocated_info(::dfsFuse::ClientInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dfsFuse.OpenRequest.info)
}

// -------------------------------------------------------------------

// OpenResponse

// optional uint32 fileHandle = 1;
inline void OpenResponse::clear_filehandle() {
  filehandle_ = 0u;
}
inline ::google::protobuf::uint32 OpenResponse::filehandle() const {
  // @@protoc_insertion_point(field_get:dfsFuse.OpenResponse.fileHandle)
  return filehandle_;
}
inline void OpenResponse::set_filehandle(::google::protobuf::uint32 value) {
  
  filehandle_ = value;
  // @@protoc_insertion_point(field_set:dfsFuse.OpenResponse.fileHandle)
}

// optional .dfsFuse.FSstatus status = 2;
inline bool OpenResponse::has_status() const {
  return !_is_default_instance_ && status_ != NULL;
}
inline void OpenResponse::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}
inline const ::dfsFuse::FSstatus& OpenResponse::status() const {
  // @@protoc_insertion_point(field_get:dfsFuse.OpenResponse.status)
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
inline ::dfsFuse::FSstatus* OpenResponse::mutable_status() {
  
  if (status_ == NULL) {
    status_ = new ::dfsFuse::FSstatus;
  }
  // @@protoc_insertion_point(field_mutable:dfsFuse.OpenResponse.status)
  return status_;
}
inline ::dfsFuse::FSstatus* OpenResponse::release_status() {
  // @@protoc_insertion_point(field_release:dfsFuse.OpenResponse.status)
  
  ::dfsFuse::FSstatus* temp = status_;
  status_ = NULL;
  return temp;
}
inline void OpenResponse::set_allocated_status(::dfsFuse::FSstatus* status) {
  delete status_;
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dfsFuse.OpenResponse.status)
}

// -------------------------------------------------------------------

// ReadRequest

// optional uint32 fileHandle = 1;
inline void ReadRequest::clear_filehandle() {
  filehandle_ = 0u;
}
inline ::google::protobuf::uint32 ReadRequest::filehandle() const {
  // @@protoc_insertion_point(field_get:dfsFuse.ReadRequest.fileHandle)
  return filehandle_;
}
inline void ReadRequest::set_filehandle(::google::protobuf::uint32 value) {
  
  filehandle_ = value;
  // @@protoc_insertion_point(field_set:dfsFuse.ReadRequest.fileHandle)
}

// optional uint32 size = 2;
inline void ReadRequest::clear_size() {
  size_ = 0u;
}
inline ::google::protobuf::uint32 ReadRequest::size() const {
  // @@protoc_insertion_point(field_get:dfsFuse.ReadRequest.size)
  return size_;
}
inline void ReadRequest::set_size(::google::protobuf::uint32 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:dfsFuse.ReadRequest.size)
}

// optional uint32 offset = 3;
inline void ReadRequest::clear_offset() {
  offset_ = 0u;
}
inline ::google::protobuf::uint32 ReadRequest::offset() const {
  // @@protoc_insertion_point(field_get:dfsFuse.ReadRequest.offset)
  return offset_;
}
inline void ReadRequest::set_offset(::google::protobuf::uint32 value) {
  
  offset_ = value;
  // @@protoc_insertion_point(field_set:dfsFuse.ReadRequest.offset)
}

// optional .dfsFuse.ClientInfo info = 4;
inline bool ReadRequest::has_info() const {
  return !_is_default_instance_ && info_ != NULL;
}
inline void ReadRequest::clear_info() {
  if (GetArenaNoVirtual() == NULL && info_ != NULL) delete info_;
  info_ = NULL;
}
inline const ::dfsFuse::ClientInfo& ReadRequest::info() const {
  // @@protoc_insertion_point(field_get:dfsFuse.ReadRequest.info)
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::dfsFuse::ClientInfo* ReadRequest::mutable_info() {
  
  if (info_ == NULL) {
    info_ = new ::dfsFuse::ClientInfo;
  }
  // @@protoc_insertion_point(field_mutable:dfsFuse.ReadRequest.info)
  return info_;
}
inline ::dfsFuse::ClientInfo* ReadRequest::release_info() {
  // @@protoc_insertion_point(field_release:dfsFuse.ReadRequest.info)
  
  ::dfsFuse::ClientInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline void ReadRequest::set_allocated_info(::dfsFuse::ClientInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dfsFuse.ReadRequest.info)
}

// -------------------------------------------------------------------

// ReadResponse

// optional int32 dataRead = 1;
inline void ReadResponse::clear_dataread() {
  dataread_ = 0;
}
inline ::google::protobuf::int32 ReadResponse::dataread() const {
  // @@protoc_insertion_point(field_get:dfsFuse.ReadResponse.dataRead)
  return dataread_;
}
inline void ReadResponse::set_dataread(::google::protobuf::int32 value) {
  
  dataread_ = value;
  // @@protoc_insertion_point(field_set:dfsFuse.ReadResponse.dataRead)
}

// optional bytes data = 2;
inline void ReadResponse::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReadResponse::data() const {
  // @@protoc_insertion_point(field_get:dfsFuse.ReadResponse.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReadResponse::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dfsFuse.ReadResponse.data)
}
inline void ReadResponse::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dfsFuse.ReadResponse.data)
}
inline void ReadResponse::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dfsFuse.ReadResponse.data)
}
inline ::std::string* ReadResponse::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:dfsFuse.ReadResponse.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReadResponse::release_data() {
  // @@protoc_insertion_point(field_release:dfsFuse.ReadResponse.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReadResponse::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:dfsFuse.ReadResponse.data)
}

// optional .dfsFuse.FSstatus status = 3;
inline bool ReadResponse::has_status() const {
  return !_is_default_instance_ && status_ != NULL;
}
inline void ReadResponse::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}
inline const ::dfsFuse::FSstatus& ReadResponse::status() const {
  // @@protoc_insertion_point(field_get:dfsFuse.ReadResponse.status)
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
inline ::dfsFuse::FSstatus* ReadResponse::mutable_status() {
  
  if (status_ == NULL) {
    status_ = new ::dfsFuse::FSstatus;
  }
  // @@protoc_insertion_point(field_mutable:dfsFuse.ReadResponse.status)
  return status_;
}
inline ::dfsFuse::FSstatus* ReadResponse::release_status() {
  // @@protoc_insertion_point(field_release:dfsFuse.ReadResponse.status)
  
  ::dfsFuse::FSstatus* temp = status_;
  status_ = NULL;
  return temp;
}
inline void ReadResponse::set_allocated_status(::dfsFuse::FSstatus* status) {
  delete status_;
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dfsFuse.ReadResponse.status)
}

// -------------------------------------------------------------------

// WriteRequest

// optional uint32 fileHandle = 1;
inline void WriteRequest::clear_filehandle() {
  filehandle_ = 0u;
}
inline ::google::protobuf::uint32 WriteRequest::filehandle() const {
  // @@protoc_insertion_point(field_get:dfsFuse.WriteRequest.fileHandle)
  return filehandle_;
}
inline void WriteRequest::set_filehandle(::google::protobuf::uint32 value) {
  
  filehandle_ = value;
  // @@protoc_insertion_point(field_set:dfsFuse.WriteRequest.fileHandle)
}

// optional bytes data = 2;
inline void WriteRequest::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WriteRequest::data() const {
  // @@protoc_insertion_point(field_get:dfsFuse.WriteRequest.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WriteRequest::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dfsFuse.WriteRequest.data)
}
inline void WriteRequest::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dfsFuse.WriteRequest.data)
}
inline void WriteRequest::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dfsFuse.WriteRequest.data)
}
inline ::std::string* WriteRequest::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:dfsFuse.WriteRequest.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WriteRequest::release_data() {
  // @@protoc_insertion_point(field_release:dfsFuse.WriteRequest.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WriteRequest::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:dfsFuse.WriteRequest.data)
}

// optional uint32 size = 3;
inline void WriteRequest::clear_size() {
  size_ = 0u;
}
inline ::google::protobuf::uint32 WriteRequest::size() const {
  // @@protoc_insertion_point(field_get:dfsFuse.WriteRequest.size)
  return size_;
}
inline void WriteRequest::set_size(::google::protobuf::uint32 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:dfsFuse.WriteRequest.size)
}

// optional uint32 offset = 4;
inline void WriteRequest::clear_offset() {
  offset_ = 0u;
}
inline ::google::protobuf::uint32 WriteRequest::offset() const {
  // @@protoc_insertion_point(field_get:dfsFuse.WriteRequest.offset)
  return offset_;
}
inline void WriteRequest::set_offset(::google::protobuf::uint32 value) {
  
  offset_ = value;
  // @@protoc_insertion_point(field_set:dfsFuse.WriteRequest.offset)
}

// optional .dfsFuse.ClientInfo info = 5;
inline bool WriteRequest::has_info() const {
  return !_is_default_instance_ && info_ != NULL;
}
inline void WriteRequest::clear_info() {
  if (GetArenaNoVirtual() == NULL && info_ != NULL) delete info_;
  info_ = NULL;
}
inline const ::dfsFuse::ClientInfo& WriteRequest::info() const {
  // @@protoc_insertion_point(field_get:dfsFuse.WriteRequest.info)
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::dfsFuse::ClientInfo* WriteRequest::mutable_info() {
  
  if (info_ == NULL) {
    info_ = new ::dfsFuse::ClientInfo;
  }
  // @@protoc_insertion_point(field_mutable:dfsFuse.WriteRequest.info)
  return info_;
}
inline ::dfsFuse::ClientInfo* WriteRequest::release_info() {
  // @@protoc_insertion_point(field_release:dfsFuse.WriteRequest.info)
  
  ::dfsFuse::ClientInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline void WriteRequest::set_allocated_info(::dfsFuse::ClientInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dfsFuse.WriteRequest.info)
}

// -------------------------------------------------------------------

// WriteResponse

// optional int32 dataWritten = 1;
inline void WriteResponse::clear_datawritten() {
  datawritten_ = 0;
}
inline ::google::protobuf::int32 WriteResponse::datawritten() const {
  // @@protoc_insertion_point(field_get:dfsFuse.WriteResponse.dataWritten)
  return datawritten_;
}
inline void WriteResponse::set_datawritten(::google::protobuf::int32 value) {
  
  datawritten_ = value;
  // @@protoc_insertion_point(field_set:dfsFuse.WriteResponse.dataWritten)
}

// optional .dfsFuse.FSstatus status = 2;
inline bool WriteResponse::has_status() const {
  return !_is_default_instance_ && status_ != NULL;
}
inline void WriteResponse::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}
inline const ::dfsFuse::FSstatus& WriteResponse::status() const {
  // @@protoc_insertion_point(field_get:dfsFuse.WriteResponse.status)
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
inline ::dfsFuse::FSstatus* WriteResponse::mutable_status() {
  
  if (status_ == NULL) {
    status_ = new ::dfsFuse::FSstatus;
  }
  // @@protoc_insertion_point(field_mutable:dfsFuse.WriteResponse.status)
  return status_;
}
inline ::dfsFuse::FSstatus* WriteResponse::release_status() {
  // @@protoc_insertion_point(field_release:dfsFuse.WriteResponse.status)
  
  ::dfsFuse::FSstatus* temp = status_;
  status_ = NULL;
  return temp;
}
inline void WriteResponse::set_allocated_status(::dfsFuse::FSstatus* status) {
  delete status_;
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dfsFuse.WriteResponse.status)
}

// -------------------------------------------------------------------

// UnlinkRequest

// optional string name = 1;
inline void UnlinkRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UnlinkRequest::name() const {
  // @@protoc_insertion_point(field_get:dfsFuse.UnlinkRequest.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UnlinkRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dfsFuse.UnlinkRequest.name)
}
inline void UnlinkRequest::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dfsFuse.UnlinkRequest.name)
}
inline void UnlinkRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dfsFuse.UnlinkRequest.name)
}
inline ::std::string* UnlinkRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:dfsFuse.UnlinkRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UnlinkRequest::release_name() {
  // @@protoc_insertion_point(field_release:dfsFuse.UnlinkRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UnlinkRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:dfsFuse.UnlinkRequest.name)
}

// -------------------------------------------------------------------

// UnlinkResponse

// optional .dfsFuse.FSstatus status = 1;
inline bool UnlinkResponse::has_status() const {
  return !_is_default_instance_ && status_ != NULL;
}
inline void UnlinkResponse::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}
inline const ::dfsFuse::FSstatus& UnlinkResponse::status() const {
  // @@protoc_insertion_point(field_get:dfsFuse.UnlinkResponse.status)
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
inline ::dfsFuse::FSstatus* UnlinkResponse::mutable_status() {
  
  if (status_ == NULL) {
    status_ = new ::dfsFuse::FSstatus;
  }
  // @@protoc_insertion_point(field_mutable:dfsFuse.UnlinkResponse.status)
  return status_;
}
inline ::dfsFuse::FSstatus* UnlinkResponse::release_status() {
  // @@protoc_insertion_point(field_release:dfsFuse.UnlinkResponse.status)
  
  ::dfsFuse::FSstatus* temp = status_;
  status_ = NULL;
  return temp;
}
inline void UnlinkResponse::set_allocated_status(::dfsFuse::FSstatus* status) {
  delete status_;
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dfsFuse.UnlinkResponse.status)
}

// -------------------------------------------------------------------

// RenameRequest

// optional string oldname = 1;
inline void RenameRequest::clear_oldname() {
  oldname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RenameRequest::oldname() const {
  // @@protoc_insertion_point(field_get:dfsFuse.RenameRequest.oldname)
  return oldname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RenameRequest::set_oldname(const ::std::string& value) {
  
  oldname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dfsFuse.RenameRequest.oldname)
}
inline void RenameRequest::set_oldname(const char* value) {
  
  oldname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dfsFuse.RenameRequest.oldname)
}
inline void RenameRequest::set_oldname(const char* value, size_t size) {
  
  oldname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dfsFuse.RenameRequest.oldname)
}
inline ::std::string* RenameRequest::mutable_oldname() {
  
  // @@protoc_insertion_point(field_mutable:dfsFuse.RenameRequest.oldname)
  return oldname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RenameRequest::release_oldname() {
  // @@protoc_insertion_point(field_release:dfsFuse.RenameRequest.oldname)
  
  return oldname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RenameRequest::set_allocated_oldname(::std::string* oldname) {
  if (oldname != NULL) {
    
  } else {
    
  }
  oldname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), oldname);
  // @@protoc_insertion_point(field_set_allocated:dfsFuse.RenameRequest.oldname)
}

// optional string newname = 2;
inline void RenameRequest::clear_newname() {
  newname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RenameRequest::newname() const {
  // @@protoc_insertion_point(field_get:dfsFuse.RenameRequest.newname)
  return newname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RenameRequest::set_newname(const ::std::string& value) {
  
  newname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dfsFuse.RenameRequest.newname)
}
inline void RenameRequest::set_newname(const char* value) {
  
  newname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dfsFuse.RenameRequest.newname)
}
inline void RenameRequest::set_newname(const char* value, size_t size) {
  
  newname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dfsFuse.RenameRequest.newname)
}
inline ::std::string* RenameRequest::mutable_newname() {
  
  // @@protoc_insertion_point(field_mutable:dfsFuse.RenameRequest.newname)
  return newname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RenameRequest::release_newname() {
  // @@protoc_insertion_point(field_release:dfsFuse.RenameRequest.newname)
  
  return newname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RenameRequest::set_allocated_newname(::std::string* newname) {
  if (newname != NULL) {
    
  } else {
    
  }
  newname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), newname);
  // @@protoc_insertion_point(field_set_allocated:dfsFuse.RenameRequest.newname)
}

// -------------------------------------------------------------------

// RenameResponse

// optional .dfsFuse.FSstatus status = 1;
inline bool RenameResponse::has_status() const {
  return !_is_default_instance_ && status_ != NULL;
}
inline void RenameResponse::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}
inline const ::dfsFuse::FSstatus& RenameResponse::status() const {
  // @@protoc_insertion_point(field_get:dfsFuse.RenameResponse.status)
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
inline ::dfsFuse::FSstatus* RenameResponse::mutable_status() {
  
  if (status_ == NULL) {
    status_ = new ::dfsFuse::FSstatus;
  }
  // @@protoc_insertion_point(field_mutable:dfsFuse.RenameResponse.status)
  return status_;
}
inline ::dfsFuse::FSstatus* RenameResponse::release_status() {
  // @@protoc_insertion_point(field_release:dfsFuse.RenameResponse.status)
  
  ::dfsFuse::FSstatus* temp = status_;
  status_ = NULL;
  return temp;
}
inline void RenameResponse::set_allocated_status(::dfsFuse::FSstatus* status) {
  delete status_;
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dfsFuse.RenameResponse.status)
}

// -------------------------------------------------------------------

// RmdirRequest

// optional string name = 1;
inline void RmdirRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RmdirRequest::name() const {
  // @@protoc_insertion_point(field_get:dfsFuse.RmdirRequest.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RmdirRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dfsFuse.RmdirRequest.name)
}
inline void RmdirRequest::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dfsFuse.RmdirRequest.name)
}
inline void RmdirRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dfsFuse.RmdirRequest.name)
}
inline ::std::string* RmdirRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:dfsFuse.RmdirRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RmdirRequest::release_name() {
  // @@protoc_insertion_point(field_release:dfsFuse.RmdirRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RmdirRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:dfsFuse.RmdirRequest.name)
}

// -------------------------------------------------------------------

// RmdirResponse

// optional .dfsFuse.FSstatus status = 1;
inline bool RmdirResponse::has_status() const {
  return !_is_default_instance_ && status_ != NULL;
}
inline void RmdirResponse::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}
inline const ::dfsFuse::FSstatus& RmdirResponse::status() const {
  // @@protoc_insertion_point(field_get:dfsFuse.RmdirResponse.status)
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
inline ::dfsFuse::FSstatus* RmdirResponse::mutable_status() {
  
  if (status_ == NULL) {
    status_ = new ::dfsFuse::FSstatus;
  }
  // @@protoc_insertion_point(field_mutable:dfsFuse.RmdirResponse.status)
  return status_;
}
inline ::dfsFuse::FSstatus* RmdirResponse::release_status() {
  // @@protoc_insertion_point(field_release:dfsFuse.RmdirResponse.status)
  
  ::dfsFuse::FSstatus* temp = status_;
  status_ = NULL;
  return temp;
}
inline void RmdirResponse::set_allocated_status(::dfsFuse::FSstatus* status) {
  delete status_;
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dfsFuse.RmdirResponse.status)
}

// -------------------------------------------------------------------

// ReleaseRequest

// optional uint32 fileHandle = 1;
inline void ReleaseRequest::clear_filehandle() {
  filehandle_ = 0u;
}
inline ::google::protobuf::uint32 ReleaseRequest::filehandle() const {
  // @@protoc_insertion_point(field_get:dfsFuse.ReleaseRequest.fileHandle)
  return filehandle_;
}
inline void ReleaseRequest::set_filehandle(::google::protobuf::uint32 value) {
  
  filehandle_ = value;
  // @@protoc_insertion_point(field_set:dfsFuse.ReleaseRequest.fileHandle)
}

// -------------------------------------------------------------------

// ReleaseResponse

// optional .dfsFuse.FSstatus status = 1;
inline bool ReleaseResponse::has_status() const {
  return !_is_default_instance_ && status_ != NULL;
}
inline void ReleaseResponse::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}
inline const ::dfsFuse::FSstatus& ReleaseResponse::status() const {
  // @@protoc_insertion_point(field_get:dfsFuse.ReleaseResponse.status)
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
inline ::dfsFuse::FSstatus* ReleaseResponse::mutable_status() {
  
  if (status_ == NULL) {
    status_ = new ::dfsFuse::FSstatus;
  }
  // @@protoc_insertion_point(field_mutable:dfsFuse.ReleaseResponse.status)
  return status_;
}
inline ::dfsFuse::FSstatus* ReleaseResponse::release_status() {
  // @@protoc_insertion_point(field_release:dfsFuse.ReleaseResponse.status)
  
  ::dfsFuse::FSstatus* temp = status_;
  status_ = NULL;
  return temp;
}
inline void ReleaseResponse::set_allocated_status(::dfsFuse::FSstatus* status) {
  delete status_;
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dfsFuse.ReleaseResponse.status)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace dfsFuse

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_fileserver_2eproto__INCLUDED
