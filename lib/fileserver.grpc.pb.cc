// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: fileserver.proto

#include "fileserver.pb.h"
#include "fileserver.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace dfsFuse {

static const char* FileSystem_method_names[] = {
  "/dfsFuse.FileSystem/GetAttr",
  "/dfsFuse.FileSystem/Mkdir",
  "/dfsFuse.FileSystem/Opendir",
  "/dfsFuse.FileSystem/Mknod",
  "/dfsFuse.FileSystem/Open",
  "/dfsFuse.FileSystem/Read",
  "/dfsFuse.FileSystem/Write",
  "/dfsFuse.FileSystem/Chmod",
  "/dfsFuse.FileSystem/Chown",
  "/dfsFuse.FileSystem/Access",
  "/dfsFuse.FileSystem/Truncate",
};

std::unique_ptr< FileSystem::Stub> FileSystem::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< FileSystem::Stub> stub(new FileSystem::Stub(channel));
  return stub;
}

FileSystem::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetAttr_(FileSystem_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Mkdir_(FileSystem_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Opendir_(FileSystem_method_names[2], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Mknod_(FileSystem_method_names[3], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Open_(FileSystem_method_names[4], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Read_(FileSystem_method_names[5], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Write_(FileSystem_method_names[6], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Chmod_(FileSystem_method_names[7], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Chown_(FileSystem_method_names[8], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Access_(FileSystem_method_names[9], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Truncate_(FileSystem_method_names[10], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status FileSystem::Stub::GetAttr(::grpc::ClientContext* context, const ::dfsFuse::GetAttrRequest& request, ::dfsFuse::GetAttrResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_GetAttr_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::dfsFuse::GetAttrResponse>* FileSystem::Stub::AsyncGetAttrRaw(::grpc::ClientContext* context, const ::dfsFuse::GetAttrRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::dfsFuse::GetAttrResponse>(channel_.get(), cq, rpcmethod_GetAttr_, context, request);
}

::grpc::Status FileSystem::Stub::Mkdir(::grpc::ClientContext* context, const ::dfsFuse::MkdirRequest& request, ::dfsFuse::MkdirResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Mkdir_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::dfsFuse::MkdirResponse>* FileSystem::Stub::AsyncMkdirRaw(::grpc::ClientContext* context, const ::dfsFuse::MkdirRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::dfsFuse::MkdirResponse>(channel_.get(), cq, rpcmethod_Mkdir_, context, request);
}

::grpc::Status FileSystem::Stub::Opendir(::grpc::ClientContext* context, const ::dfsFuse::OpenDirRequest& request, ::dfsFuse::OpenDirResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Opendir_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::dfsFuse::OpenDirResponse>* FileSystem::Stub::AsyncOpendirRaw(::grpc::ClientContext* context, const ::dfsFuse::OpenDirRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::dfsFuse::OpenDirResponse>(channel_.get(), cq, rpcmethod_Opendir_, context, request);
}

::grpc::Status FileSystem::Stub::Mknod(::grpc::ClientContext* context, const ::dfsFuse::MknodRequest& request, ::dfsFuse::MknodResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Mknod_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::dfsFuse::MknodResponse>* FileSystem::Stub::AsyncMknodRaw(::grpc::ClientContext* context, const ::dfsFuse::MknodRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::dfsFuse::MknodResponse>(channel_.get(), cq, rpcmethod_Mknod_, context, request);
}

::grpc::Status FileSystem::Stub::Open(::grpc::ClientContext* context, const ::dfsFuse::OpenRequest& request, ::dfsFuse::OpenResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Open_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::dfsFuse::OpenResponse>* FileSystem::Stub::AsyncOpenRaw(::grpc::ClientContext* context, const ::dfsFuse::OpenRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::dfsFuse::OpenResponse>(channel_.get(), cq, rpcmethod_Open_, context, request);
}

::grpc::Status FileSystem::Stub::Read(::grpc::ClientContext* context, const ::dfsFuse::ReadRequest& request, ::dfsFuse::ReadResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Read_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::dfsFuse::ReadResponse>* FileSystem::Stub::AsyncReadRaw(::grpc::ClientContext* context, const ::dfsFuse::ReadRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::dfsFuse::ReadResponse>(channel_.get(), cq, rpcmethod_Read_, context, request);
}

::grpc::Status FileSystem::Stub::Write(::grpc::ClientContext* context, const ::dfsFuse::WriteRequest& request, ::dfsFuse::WriteResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Write_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::dfsFuse::WriteResponse>* FileSystem::Stub::AsyncWriteRaw(::grpc::ClientContext* context, const ::dfsFuse::WriteRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::dfsFuse::WriteResponse>(channel_.get(), cq, rpcmethod_Write_, context, request);
}

::grpc::Status FileSystem::Stub::Chmod(::grpc::ClientContext* context, const ::dfsFuse::ChmodRequest& request, ::dfsFuse::ChmodResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Chmod_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::dfsFuse::ChmodResponse>* FileSystem::Stub::AsyncChmodRaw(::grpc::ClientContext* context, const ::dfsFuse::ChmodRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::dfsFuse::ChmodResponse>(channel_.get(), cq, rpcmethod_Chmod_, context, request);
}

::grpc::Status FileSystem::Stub::Chown(::grpc::ClientContext* context, const ::dfsFuse::ChownRequest& request, ::dfsFuse::ChownResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Chown_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::dfsFuse::ChownResponse>* FileSystem::Stub::AsyncChownRaw(::grpc::ClientContext* context, const ::dfsFuse::ChownRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::dfsFuse::ChownResponse>(channel_.get(), cq, rpcmethod_Chown_, context, request);
}

::grpc::Status FileSystem::Stub::Access(::grpc::ClientContext* context, const ::dfsFuse::AccessRequest& request, ::dfsFuse::AccessResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Access_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::dfsFuse::AccessResponse>* FileSystem::Stub::AsyncAccessRaw(::grpc::ClientContext* context, const ::dfsFuse::AccessRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::dfsFuse::AccessResponse>(channel_.get(), cq, rpcmethod_Access_, context, request);
}

::grpc::Status FileSystem::Stub::Truncate(::grpc::ClientContext* context, const ::dfsFuse::TruncateRequest& request, ::dfsFuse::TruncateResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Truncate_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::dfsFuse::TruncateResponse>* FileSystem::Stub::AsyncTruncateRaw(::grpc::ClientContext* context, const ::dfsFuse::TruncateRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::dfsFuse::TruncateResponse>(channel_.get(), cq, rpcmethod_Truncate_, context, request);
}

FileSystem::Service::Service() {
  (void)FileSystem_method_names;
  AddMethod(new ::grpc::RpcServiceMethod(
      FileSystem_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< FileSystem::Service, ::dfsFuse::GetAttrRequest, ::dfsFuse::GetAttrResponse>(
          std::mem_fn(&FileSystem::Service::GetAttr), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      FileSystem_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< FileSystem::Service, ::dfsFuse::MkdirRequest, ::dfsFuse::MkdirResponse>(
          std::mem_fn(&FileSystem::Service::Mkdir), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      FileSystem_method_names[2],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< FileSystem::Service, ::dfsFuse::OpenDirRequest, ::dfsFuse::OpenDirResponse>(
          std::mem_fn(&FileSystem::Service::Opendir), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      FileSystem_method_names[3],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< FileSystem::Service, ::dfsFuse::MknodRequest, ::dfsFuse::MknodResponse>(
          std::mem_fn(&FileSystem::Service::Mknod), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      FileSystem_method_names[4],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< FileSystem::Service, ::dfsFuse::OpenRequest, ::dfsFuse::OpenResponse>(
          std::mem_fn(&FileSystem::Service::Open), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      FileSystem_method_names[5],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< FileSystem::Service, ::dfsFuse::ReadRequest, ::dfsFuse::ReadResponse>(
          std::mem_fn(&FileSystem::Service::Read), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      FileSystem_method_names[6],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< FileSystem::Service, ::dfsFuse::WriteRequest, ::dfsFuse::WriteResponse>(
          std::mem_fn(&FileSystem::Service::Write), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      FileSystem_method_names[7],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< FileSystem::Service, ::dfsFuse::ChmodRequest, ::dfsFuse::ChmodResponse>(
          std::mem_fn(&FileSystem::Service::Chmod), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      FileSystem_method_names[8],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< FileSystem::Service, ::dfsFuse::ChownRequest, ::dfsFuse::ChownResponse>(
          std::mem_fn(&FileSystem::Service::Chown), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      FileSystem_method_names[9],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< FileSystem::Service, ::dfsFuse::AccessRequest, ::dfsFuse::AccessResponse>(
          std::mem_fn(&FileSystem::Service::Access), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      FileSystem_method_names[10],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< FileSystem::Service, ::dfsFuse::TruncateRequest, ::dfsFuse::TruncateResponse>(
          std::mem_fn(&FileSystem::Service::Truncate), this)));
}

FileSystem::Service::~Service() {
}

::grpc::Status FileSystem::Service::GetAttr(::grpc::ServerContext* context, const ::dfsFuse::GetAttrRequest* request, ::dfsFuse::GetAttrResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FileSystem::Service::Mkdir(::grpc::ServerContext* context, const ::dfsFuse::MkdirRequest* request, ::dfsFuse::MkdirResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FileSystem::Service::Opendir(::grpc::ServerContext* context, const ::dfsFuse::OpenDirRequest* request, ::dfsFuse::OpenDirResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FileSystem::Service::Mknod(::grpc::ServerContext* context, const ::dfsFuse::MknodRequest* request, ::dfsFuse::MknodResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FileSystem::Service::Open(::grpc::ServerContext* context, const ::dfsFuse::OpenRequest* request, ::dfsFuse::OpenResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FileSystem::Service::Read(::grpc::ServerContext* context, const ::dfsFuse::ReadRequest* request, ::dfsFuse::ReadResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FileSystem::Service::Write(::grpc::ServerContext* context, const ::dfsFuse::WriteRequest* request, ::dfsFuse::WriteResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FileSystem::Service::Chmod(::grpc::ServerContext* context, const ::dfsFuse::ChmodRequest* request, ::dfsFuse::ChmodResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FileSystem::Service::Chown(::grpc::ServerContext* context, const ::dfsFuse::ChownRequest* request, ::dfsFuse::ChownResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FileSystem::Service::Access(::grpc::ServerContext* context, const ::dfsFuse::AccessRequest* request, ::dfsFuse::AccessResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FileSystem::Service::Truncate(::grpc::ServerContext* context, const ::dfsFuse::TruncateRequest* request, ::dfsFuse::TruncateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace dfsFuse

