// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fileserver.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "fileserver.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace dfsFuse {

namespace {

const ::google::protobuf::Descriptor* FSstatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FSstatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* Owner_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Owner_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Attr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Attr_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetAttrRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetAttrRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetAttrResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetAttrResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* MkdirRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MkdirRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MkdirResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MkdirResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpenDirRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpenDirRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DirEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DirEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpenDirResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpenDirResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* MknodRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MknodRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MknodResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MknodResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpenRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpenRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpenResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpenResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReadRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReadRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReadResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReadResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* WriteRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WriteRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* WriteResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WriteResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnlinkRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnlinkRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnlinkResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnlinkResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* RenameRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RenameRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RenameResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RenameResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* RmdirRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RmdirRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RmdirResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RmdirResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReleaseRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReleaseRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReleaseResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReleaseResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_fileserver_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_fileserver_2eproto() {
  protobuf_AddDesc_fileserver_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "fileserver.proto");
  GOOGLE_CHECK(file != NULL);
  FSstatus_descriptor_ = file->message_type(0);
  static const int FSstatus_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FSstatus, retcode_),
  };
  FSstatus_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FSstatus_descriptor_,
      FSstatus::default_instance_,
      FSstatus_offsets_,
      -1,
      -1,
      -1,
      sizeof(FSstatus),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FSstatus, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FSstatus, _is_default_instance_));
  Owner_descriptor_ = file->message_type(1);
  static const int Owner_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Owner, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Owner, gid_),
  };
  Owner_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Owner_descriptor_,
      Owner::default_instance_,
      Owner_offsets_,
      -1,
      -1,
      -1,
      sizeof(Owner),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Owner, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Owner, _is_default_instance_));
  ClientInfo_descriptor_ = file->message_type(2);
  static const int ClientInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientInfo, owner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientInfo, pid_),
  };
  ClientInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ClientInfo_descriptor_,
      ClientInfo::default_instance_,
      ClientInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(ClientInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientInfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientInfo, _is_default_instance_));
  Attr_descriptor_ = file->message_type(3);
  static const int Attr_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attr, dev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attr, ino_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attr, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attr, nlink_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attr, owner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attr, rdev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attr, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attr, blksize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attr, blocks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attr, atime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attr, atimens_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attr, mtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attr, mtimens_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attr, ctime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attr, ctimens_),
  };
  Attr_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Attr_descriptor_,
      Attr::default_instance_,
      Attr_offsets_,
      -1,
      -1,
      -1,
      sizeof(Attr),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attr, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attr, _is_default_instance_));
  GetAttrRequest_descriptor_ = file->message_type(4);
  static const int GetAttrRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAttrRequest, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAttrRequest, info_),
  };
  GetAttrRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetAttrRequest_descriptor_,
      GetAttrRequest::default_instance_,
      GetAttrRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetAttrRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAttrRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAttrRequest, _is_default_instance_));
  GetAttrResponse_descriptor_ = file->message_type(5);
  static const int GetAttrResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAttrResponse, attr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAttrResponse, status_),
  };
  GetAttrResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetAttrResponse_descriptor_,
      GetAttrResponse::default_instance_,
      GetAttrResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetAttrResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAttrResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAttrResponse, _is_default_instance_));
  MkdirRequest_descriptor_ = file->message_type(6);
  static const int MkdirRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MkdirRequest, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MkdirRequest, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MkdirRequest, info_),
  };
  MkdirRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MkdirRequest_descriptor_,
      MkdirRequest::default_instance_,
      MkdirRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(MkdirRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MkdirRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MkdirRequest, _is_default_instance_));
  MkdirResponse_descriptor_ = file->message_type(7);
  static const int MkdirResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MkdirResponse, status_),
  };
  MkdirResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MkdirResponse_descriptor_,
      MkdirResponse::default_instance_,
      MkdirResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(MkdirResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MkdirResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MkdirResponse, _is_default_instance_));
  OpenDirRequest_descriptor_ = file->message_type(8);
  static const int OpenDirRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenDirRequest, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenDirRequest, info_),
  };
  OpenDirRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      OpenDirRequest_descriptor_,
      OpenDirRequest::default_instance_,
      OpenDirRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(OpenDirRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenDirRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenDirRequest, _is_default_instance_));
  DirEntry_descriptor_ = file->message_type(9);
  static const int DirEntry_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirEntry, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirEntry, ino_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirEntry, mode_),
  };
  DirEntry_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DirEntry_descriptor_,
      DirEntry::default_instance_,
      DirEntry_offsets_,
      -1,
      -1,
      -1,
      sizeof(DirEntry),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirEntry, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirEntry, _is_default_instance_));
  OpenDirResponse_descriptor_ = file->message_type(10);
  static const int OpenDirResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenDirResponse, dirs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenDirResponse, status_),
  };
  OpenDirResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      OpenDirResponse_descriptor_,
      OpenDirResponse::default_instance_,
      OpenDirResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(OpenDirResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenDirResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenDirResponse, _is_default_instance_));
  MknodRequest_descriptor_ = file->message_type(11);
  static const int MknodRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MknodRequest, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MknodRequest, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MknodRequest, dev_),
  };
  MknodRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MknodRequest_descriptor_,
      MknodRequest::default_instance_,
      MknodRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(MknodRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MknodRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MknodRequest, _is_default_instance_));
  MknodResponse_descriptor_ = file->message_type(12);
  static const int MknodResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MknodResponse, status_),
  };
  MknodResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MknodResponse_descriptor_,
      MknodResponse::default_instance_,
      MknodResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(MknodResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MknodResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MknodResponse, _is_default_instance_));
  OpenRequest_descriptor_ = file->message_type(13);
  static const int OpenRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenRequest, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenRequest, flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenRequest, info_),
  };
  OpenRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      OpenRequest_descriptor_,
      OpenRequest::default_instance_,
      OpenRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(OpenRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenRequest, _is_default_instance_));
  OpenResponse_descriptor_ = file->message_type(14);
  static const int OpenResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenResponse, filehandle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenResponse, status_),
  };
  OpenResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      OpenResponse_descriptor_,
      OpenResponse::default_instance_,
      OpenResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(OpenResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenResponse, _is_default_instance_));
  ReadRequest_descriptor_ = file->message_type(15);
  static const int ReadRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadRequest, filehandle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadRequest, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadRequest, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadRequest, info_),
  };
  ReadRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReadRequest_descriptor_,
      ReadRequest::default_instance_,
      ReadRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReadRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadRequest, _is_default_instance_));
  ReadResponse_descriptor_ = file->message_type(16);
  static const int ReadResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadResponse, dataread_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadResponse, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadResponse, status_),
  };
  ReadResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReadResponse_descriptor_,
      ReadResponse::default_instance_,
      ReadResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReadResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadResponse, _is_default_instance_));
  WriteRequest_descriptor_ = file->message_type(17);
  static const int WriteRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteRequest, filehandle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteRequest, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteRequest, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteRequest, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteRequest, info_),
  };
  WriteRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      WriteRequest_descriptor_,
      WriteRequest::default_instance_,
      WriteRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(WriteRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteRequest, _is_default_instance_));
  WriteResponse_descriptor_ = file->message_type(18);
  static const int WriteResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteResponse, datawritten_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteResponse, status_),
  };
  WriteResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      WriteResponse_descriptor_,
      WriteResponse::default_instance_,
      WriteResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(WriteResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteResponse, _is_default_instance_));
  UnlinkRequest_descriptor_ = file->message_type(19);
  static const int UnlinkRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlinkRequest, name_),
  };
  UnlinkRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UnlinkRequest_descriptor_,
      UnlinkRequest::default_instance_,
      UnlinkRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(UnlinkRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlinkRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlinkRequest, _is_default_instance_));
  UnlinkResponse_descriptor_ = file->message_type(20);
  static const int UnlinkResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlinkResponse, status_),
  };
  UnlinkResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UnlinkResponse_descriptor_,
      UnlinkResponse::default_instance_,
      UnlinkResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(UnlinkResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlinkResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlinkResponse, _is_default_instance_));
  RenameRequest_descriptor_ = file->message_type(21);
  static const int RenameRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenameRequest, oldname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenameRequest, newname_),
  };
  RenameRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RenameRequest_descriptor_,
      RenameRequest::default_instance_,
      RenameRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(RenameRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenameRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenameRequest, _is_default_instance_));
  RenameResponse_descriptor_ = file->message_type(22);
  static const int RenameResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenameResponse, status_),
  };
  RenameResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RenameResponse_descriptor_,
      RenameResponse::default_instance_,
      RenameResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(RenameResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenameResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenameResponse, _is_default_instance_));
  RmdirRequest_descriptor_ = file->message_type(23);
  static const int RmdirRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RmdirRequest, name_),
  };
  RmdirRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RmdirRequest_descriptor_,
      RmdirRequest::default_instance_,
      RmdirRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(RmdirRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RmdirRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RmdirRequest, _is_default_instance_));
  RmdirResponse_descriptor_ = file->message_type(24);
  static const int RmdirResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RmdirResponse, status_),
  };
  RmdirResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RmdirResponse_descriptor_,
      RmdirResponse::default_instance_,
      RmdirResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(RmdirResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RmdirResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RmdirResponse, _is_default_instance_));
  ReleaseRequest_descriptor_ = file->message_type(25);
  static const int ReleaseRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReleaseRequest, filehandle_),
  };
  ReleaseRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReleaseRequest_descriptor_,
      ReleaseRequest::default_instance_,
      ReleaseRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReleaseRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReleaseRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReleaseRequest, _is_default_instance_));
  ReleaseResponse_descriptor_ = file->message_type(26);
  static const int ReleaseResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReleaseResponse, status_),
  };
  ReleaseResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReleaseResponse_descriptor_,
      ReleaseResponse::default_instance_,
      ReleaseResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReleaseResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReleaseResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReleaseResponse, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_fileserver_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FSstatus_descriptor_, &FSstatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Owner_descriptor_, &Owner::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ClientInfo_descriptor_, &ClientInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Attr_descriptor_, &Attr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetAttrRequest_descriptor_, &GetAttrRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetAttrResponse_descriptor_, &GetAttrResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MkdirRequest_descriptor_, &MkdirRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MkdirResponse_descriptor_, &MkdirResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      OpenDirRequest_descriptor_, &OpenDirRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DirEntry_descriptor_, &DirEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      OpenDirResponse_descriptor_, &OpenDirResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MknodRequest_descriptor_, &MknodRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MknodResponse_descriptor_, &MknodResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      OpenRequest_descriptor_, &OpenRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      OpenResponse_descriptor_, &OpenResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReadRequest_descriptor_, &ReadRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReadResponse_descriptor_, &ReadResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      WriteRequest_descriptor_, &WriteRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      WriteResponse_descriptor_, &WriteResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UnlinkRequest_descriptor_, &UnlinkRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UnlinkResponse_descriptor_, &UnlinkResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RenameRequest_descriptor_, &RenameRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RenameResponse_descriptor_, &RenameResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RmdirRequest_descriptor_, &RmdirRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RmdirResponse_descriptor_, &RmdirResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReleaseRequest_descriptor_, &ReleaseRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReleaseResponse_descriptor_, &ReleaseResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_fileserver_2eproto() {
  delete FSstatus::default_instance_;
  delete FSstatus_reflection_;
  delete Owner::default_instance_;
  delete Owner_reflection_;
  delete ClientInfo::default_instance_;
  delete ClientInfo_reflection_;
  delete Attr::default_instance_;
  delete Attr_reflection_;
  delete GetAttrRequest::default_instance_;
  delete GetAttrRequest_reflection_;
  delete GetAttrResponse::default_instance_;
  delete GetAttrResponse_reflection_;
  delete MkdirRequest::default_instance_;
  delete MkdirRequest_reflection_;
  delete MkdirResponse::default_instance_;
  delete MkdirResponse_reflection_;
  delete OpenDirRequest::default_instance_;
  delete OpenDirRequest_reflection_;
  delete DirEntry::default_instance_;
  delete DirEntry_reflection_;
  delete OpenDirResponse::default_instance_;
  delete OpenDirResponse_reflection_;
  delete MknodRequest::default_instance_;
  delete MknodRequest_reflection_;
  delete MknodResponse::default_instance_;
  delete MknodResponse_reflection_;
  delete OpenRequest::default_instance_;
  delete OpenRequest_reflection_;
  delete OpenResponse::default_instance_;
  delete OpenResponse_reflection_;
  delete ReadRequest::default_instance_;
  delete ReadRequest_reflection_;
  delete ReadResponse::default_instance_;
  delete ReadResponse_reflection_;
  delete WriteRequest::default_instance_;
  delete WriteRequest_reflection_;
  delete WriteResponse::default_instance_;
  delete WriteResponse_reflection_;
  delete UnlinkRequest::default_instance_;
  delete UnlinkRequest_reflection_;
  delete UnlinkResponse::default_instance_;
  delete UnlinkResponse_reflection_;
  delete RenameRequest::default_instance_;
  delete RenameRequest_reflection_;
  delete RenameResponse::default_instance_;
  delete RenameResponse_reflection_;
  delete RmdirRequest::default_instance_;
  delete RmdirRequest_reflection_;
  delete RmdirResponse::default_instance_;
  delete RmdirResponse_reflection_;
  delete ReleaseRequest::default_instance_;
  delete ReleaseRequest_reflection_;
  delete ReleaseResponse::default_instance_;
  delete ReleaseResponse_reflection_;
}

void protobuf_AddDesc_fileserver_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_fileserver_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020fileserver.proto\022\007dfsFuse\"\033\n\010FSstatus\022"
    "\017\n\007retCode\030\001 \001(\005\"!\n\005Owner\022\013\n\003uid\030\001 \001(\r\022\013"
    "\n\003gid\030\002 \001(\r\"8\n\nClientInfo\022\035\n\005Owner\030\001 \001(\013"
    "2\016.dfsFuse.Owner\022\013\n\003Pid\030\002 \001(\r\"\371\001\n\004Attr\022\013"
    "\n\003dev\030\001 \001(\004\022\013\n\003ino\030\002 \001(\004\022\014\n\004mode\030\003 \001(\004\022\r"
    "\n\005nlink\030\004 \001(\004\022\035\n\005owner\030\005 \001(\0132\016.dfsFuse.O"
    "wner\022\014\n\004rdev\030\006 \001(\004\022\014\n\004size\030\007 \001(\004\022\017\n\007blks"
    "ize\030\010 \001(\004\022\016\n\006blocks\030\t \001(\004\022\r\n\005atime\030\n \001(\004"
    "\022\017\n\007atimens\030\013 \001(\004\022\r\n\005mtime\030\014 \001(\004\022\017\n\007mtim"
    "ens\030\r \001(\004\022\r\n\005ctime\030\016 \001(\004\022\017\n\007ctimens\030\017 \001("
    "\004\"A\n\016GetAttrRequest\022\014\n\004name\030\001 \001(\t\022!\n\004inf"
    "o\030\002 \001(\0132\023.dfsFuse.ClientInfo\"Q\n\017GetAttrR"
    "esponse\022\033\n\004attr\030\001 \001(\0132\r.dfsFuse.Attr\022!\n\006"
    "status\030\002 \001(\0132\021.dfsFuse.FSstatus\"M\n\014Mkdir"
    "Request\022\014\n\004name\030\001 \001(\t\022\014\n\004mode\030\002 \001(\004\022!\n\004i"
    "nfo\030\003 \001(\0132\023.dfsFuse.ClientInfo\"2\n\rMkdirR"
    "esponse\022!\n\006status\030\001 \001(\0132\021.dfsFuse.FSstat"
    "us\"A\n\016OpenDirRequest\022\014\n\004name\030\001 \001(\t\022!\n\004in"
    "fo\030\002 \001(\0132\023.dfsFuse.ClientInfo\"3\n\010DirEntr"
    "y\022\014\n\004name\030\001 \001(\t\022\013\n\003ino\030\002 \001(\004\022\014\n\004mode\030\003 \001"
    "(\004\"U\n\017OpenDirResponse\022\037\n\004dirs\030\001 \003(\0132\021.df"
    "sFuse.DirEntry\022!\n\006status\030\002 \001(\0132\021.dfsFuse"
    ".FSstatus\"7\n\014MknodRequest\022\014\n\004name\030\001 \001(\t\022"
    "\014\n\004mode\030\002 \001(\004\022\013\n\003dev\030\003 \001(\004\"2\n\rMknodRespo"
    "nse\022!\n\006status\030\001 \001(\0132\021.dfsFuse.FSstatus\"M"
    "\n\013OpenRequest\022\014\n\004name\030\001 \001(\t\022\r\n\005flags\030\002 \001"
    "(\r\022!\n\004info\030\003 \001(\0132\023.dfsFuse.ClientInfo\"E\n"
    "\014OpenResponse\022\022\n\nfileHandle\030\001 \001(\r\022!\n\006sta"
    "tus\030\002 \001(\0132\021.dfsFuse.FSstatus\"b\n\013ReadRequ"
    "est\022\022\n\nfileHandle\030\001 \001(\r\022\014\n\004size\030\002 \001(\r\022\016\n"
    "\006offset\030\003 \001(\r\022!\n\004info\030\004 \001(\0132\023.dfsFuse.Cl"
    "ientInfo\"Q\n\014ReadResponse\022\020\n\010dataRead\030\001 \001"
    "(\005\022\014\n\004data\030\002 \001(\014\022!\n\006status\030\003 \001(\0132\021.dfsFu"
    "se.FSstatus\"q\n\014WriteRequest\022\022\n\nfileHandl"
    "e\030\001 \001(\r\022\014\n\004data\030\002 \001(\014\022\014\n\004size\030\003 \001(\r\022\016\n\006o"
    "ffset\030\004 \001(\r\022!\n\004info\030\005 \001(\0132\023.dfsFuse.Clie"
    "ntInfo\"G\n\rWriteResponse\022\023\n\013dataWritten\030\001"
    " \001(\005\022!\n\006status\030\002 \001(\0132\021.dfsFuse.FSstatus\""
    "\035\n\rUnlinkRequest\022\014\n\004name\030\001 \001(\t\"3\n\016Unlink"
    "Response\022!\n\006status\030\001 \001(\0132\021.dfsFuse.FSsta"
    "tus\"1\n\rRenameRequest\022\017\n\007oldname\030\001 \001(\t\022\017\n"
    "\007newname\030\002 \001(\t\"3\n\016RenameResponse\022!\n\006stat"
    "us\030\001 \001(\0132\021.dfsFuse.FSstatus\"\034\n\014RmdirRequ"
    "est\022\014\n\004name\030\001 \001(\t\"2\n\rRmdirResponse\022!\n\006st"
    "atus\030\001 \001(\0132\021.dfsFuse.FSstatus\"$\n\016Release"
    "Request\022\022\n\nfileHandle\030\001 \001(\r\"4\n\017ReleaseRe"
    "sponse\022!\n\006status\030\001 \001(\0132\021.dfsFuse.FSstatu"
    "s2\234\005\n\nFileSystem\022>\n\007GetAttr\022\027.dfsFuse.Ge"
    "tAttrRequest\032\030.dfsFuse.GetAttrResponse\"\000"
    "\0228\n\005Mkdir\022\025.dfsFuse.MkdirRequest\032\026.dfsFu"
    "se.MkdirResponse\"\000\022>\n\007Opendir\022\027.dfsFuse."
    "OpenDirRequest\032\030.dfsFuse.OpenDirResponse"
    "\"\000\0228\n\005Mknod\022\025.dfsFuse.MknodRequest\032\026.dfs"
    "Fuse.MknodResponse\"\000\0225\n\004Open\022\024.dfsFuse.O"
    "penRequest\032\025.dfsFuse.OpenResponse\"\000\0225\n\004R"
    "ead\022\024.dfsFuse.ReadRequest\032\025.dfsFuse.Read"
    "Response\"\000\0228\n\005Write\022\025.dfsFuse.WriteReque"
    "st\032\026.dfsFuse.WriteResponse\"\000\022;\n\006Unlink\022\026"
    ".dfsFuse.UnlinkRequest\032\027.dfsFuse.UnlinkR"
    "esponse\"\000\0228\n\005Rmdir\022\025.dfsFuse.RmdirReques"
    "t\032\026.dfsFuse.RmdirResponse\"\000\022;\n\006Rename\022\026."
    "dfsFuse.RenameRequest\032\027.dfsFuse.RenameRe"
    "sponse\"\000\022>\n\007Release\022\027.dfsFuse.ReleaseReq"
    "uest\032\030.dfsFuse.ReleaseResponse\"\000b\006proto3", 2560);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "fileserver.proto", &protobuf_RegisterTypes);
  FSstatus::default_instance_ = new FSstatus();
  Owner::default_instance_ = new Owner();
  ClientInfo::default_instance_ = new ClientInfo();
  Attr::default_instance_ = new Attr();
  GetAttrRequest::default_instance_ = new GetAttrRequest();
  GetAttrResponse::default_instance_ = new GetAttrResponse();
  MkdirRequest::default_instance_ = new MkdirRequest();
  MkdirResponse::default_instance_ = new MkdirResponse();
  OpenDirRequest::default_instance_ = new OpenDirRequest();
  DirEntry::default_instance_ = new DirEntry();
  OpenDirResponse::default_instance_ = new OpenDirResponse();
  MknodRequest::default_instance_ = new MknodRequest();
  MknodResponse::default_instance_ = new MknodResponse();
  OpenRequest::default_instance_ = new OpenRequest();
  OpenResponse::default_instance_ = new OpenResponse();
  ReadRequest::default_instance_ = new ReadRequest();
  ReadResponse::default_instance_ = new ReadResponse();
  WriteRequest::default_instance_ = new WriteRequest();
  WriteResponse::default_instance_ = new WriteResponse();
  UnlinkRequest::default_instance_ = new UnlinkRequest();
  UnlinkResponse::default_instance_ = new UnlinkResponse();
  RenameRequest::default_instance_ = new RenameRequest();
  RenameResponse::default_instance_ = new RenameResponse();
  RmdirRequest::default_instance_ = new RmdirRequest();
  RmdirResponse::default_instance_ = new RmdirResponse();
  ReleaseRequest::default_instance_ = new ReleaseRequest();
  ReleaseResponse::default_instance_ = new ReleaseResponse();
  FSstatus::default_instance_->InitAsDefaultInstance();
  Owner::default_instance_->InitAsDefaultInstance();
  ClientInfo::default_instance_->InitAsDefaultInstance();
  Attr::default_instance_->InitAsDefaultInstance();
  GetAttrRequest::default_instance_->InitAsDefaultInstance();
  GetAttrResponse::default_instance_->InitAsDefaultInstance();
  MkdirRequest::default_instance_->InitAsDefaultInstance();
  MkdirResponse::default_instance_->InitAsDefaultInstance();
  OpenDirRequest::default_instance_->InitAsDefaultInstance();
  DirEntry::default_instance_->InitAsDefaultInstance();
  OpenDirResponse::default_instance_->InitAsDefaultInstance();
  MknodRequest::default_instance_->InitAsDefaultInstance();
  MknodResponse::default_instance_->InitAsDefaultInstance();
  OpenRequest::default_instance_->InitAsDefaultInstance();
  OpenResponse::default_instance_->InitAsDefaultInstance();
  ReadRequest::default_instance_->InitAsDefaultInstance();
  ReadResponse::default_instance_->InitAsDefaultInstance();
  WriteRequest::default_instance_->InitAsDefaultInstance();
  WriteResponse::default_instance_->InitAsDefaultInstance();
  UnlinkRequest::default_instance_->InitAsDefaultInstance();
  UnlinkResponse::default_instance_->InitAsDefaultInstance();
  RenameRequest::default_instance_->InitAsDefaultInstance();
  RenameResponse::default_instance_->InitAsDefaultInstance();
  RmdirRequest::default_instance_->InitAsDefaultInstance();
  RmdirResponse::default_instance_->InitAsDefaultInstance();
  ReleaseRequest::default_instance_->InitAsDefaultInstance();
  ReleaseResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_fileserver_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_fileserver_2eproto {
  StaticDescriptorInitializer_fileserver_2eproto() {
    protobuf_AddDesc_fileserver_2eproto();
  }
} static_descriptor_initializer_fileserver_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FSstatus::kRetCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FSstatus::FSstatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dfsFuse.FSstatus)
}

void FSstatus::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

FSstatus::FSstatus(const FSstatus& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dfsFuse.FSstatus)
}

void FSstatus::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  retcode_ = 0;
}

FSstatus::~FSstatus() {
  // @@protoc_insertion_point(destructor:dfsFuse.FSstatus)
  SharedDtor();
}

void FSstatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FSstatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FSstatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FSstatus_descriptor_;
}

const FSstatus& FSstatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fileserver_2eproto();
  return *default_instance_;
}

FSstatus* FSstatus::default_instance_ = NULL;

FSstatus* FSstatus::New(::google::protobuf::Arena* arena) const {
  FSstatus* n = new FSstatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FSstatus::Clear() {
// @@protoc_insertion_point(message_clear_start:dfsFuse.FSstatus)
  retcode_ = 0;
}

bool FSstatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dfsFuse.FSstatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 retCode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dfsFuse.FSstatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dfsFuse.FSstatus)
  return false;
#undef DO_
}

void FSstatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dfsFuse.FSstatus)
  // optional int32 retCode = 1;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // @@protoc_insertion_point(serialize_end:dfsFuse.FSstatus)
}

::google::protobuf::uint8* FSstatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dfsFuse.FSstatus)
  // optional int32 retCode = 1;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dfsFuse.FSstatus)
  return target;
}

int FSstatus::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dfsFuse.FSstatus)
  int total_size = 0;

  // optional int32 retCode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FSstatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dfsFuse.FSstatus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const FSstatus* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FSstatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dfsFuse.FSstatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dfsFuse.FSstatus)
    MergeFrom(*source);
  }
}

void FSstatus::MergeFrom(const FSstatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dfsFuse.FSstatus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
}

void FSstatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dfsFuse.FSstatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FSstatus::CopyFrom(const FSstatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dfsFuse.FSstatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FSstatus::IsInitialized() const {

  return true;
}

void FSstatus::Swap(FSstatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FSstatus::InternalSwap(FSstatus* other) {
  std::swap(retcode_, other->retcode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FSstatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FSstatus_descriptor_;
  metadata.reflection = FSstatus_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FSstatus

// optional int32 retCode = 1;
void FSstatus::clear_retcode() {
  retcode_ = 0;
}
 ::google::protobuf::int32 FSstatus::retcode() const {
  // @@protoc_insertion_point(field_get:dfsFuse.FSstatus.retCode)
  return retcode_;
}
 void FSstatus::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:dfsFuse.FSstatus.retCode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Owner::kUidFieldNumber;
const int Owner::kGidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Owner::Owner()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dfsFuse.Owner)
}

void Owner::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Owner::Owner(const Owner& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dfsFuse.Owner)
}

void Owner::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  uid_ = 0u;
  gid_ = 0u;
}

Owner::~Owner() {
  // @@protoc_insertion_point(destructor:dfsFuse.Owner)
  SharedDtor();
}

void Owner::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Owner::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Owner::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Owner_descriptor_;
}

const Owner& Owner::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fileserver_2eproto();
  return *default_instance_;
}

Owner* Owner::default_instance_ = NULL;

Owner* Owner::New(::google::protobuf::Arena* arena) const {
  Owner* n = new Owner;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Owner::Clear() {
// @@protoc_insertion_point(message_clear_start:dfsFuse.Owner)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Owner, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Owner*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(uid_, gid_);

#undef ZR_HELPER_
#undef ZR_

}

bool Owner::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dfsFuse.Owner)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gid;
        break;
      }

      // optional uint32 gid = 2;
      case 2: {
        if (tag == 16) {
         parse_gid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dfsFuse.Owner)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dfsFuse.Owner)
  return false;
#undef DO_
}

void Owner::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dfsFuse.Owner)
  // optional uint32 uid = 1;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional uint32 gid = 2;
  if (this->gid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gid(), output);
  }

  // @@protoc_insertion_point(serialize_end:dfsFuse.Owner)
}

::google::protobuf::uint8* Owner::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dfsFuse.Owner)
  // optional uint32 uid = 1;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // optional uint32 gid = 2;
  if (this->gid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dfsFuse.Owner)
  return target;
}

int Owner::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dfsFuse.Owner)
  int total_size = 0;

  // optional uint32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());
  }

  // optional uint32 gid = 2;
  if (this->gid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Owner::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dfsFuse.Owner)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Owner* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Owner>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dfsFuse.Owner)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dfsFuse.Owner)
    MergeFrom(*source);
  }
}

void Owner::MergeFrom(const Owner& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dfsFuse.Owner)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.uid() != 0) {
    set_uid(from.uid());
  }
  if (from.gid() != 0) {
    set_gid(from.gid());
  }
}

void Owner::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dfsFuse.Owner)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Owner::CopyFrom(const Owner& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dfsFuse.Owner)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Owner::IsInitialized() const {

  return true;
}

void Owner::Swap(Owner* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Owner::InternalSwap(Owner* other) {
  std::swap(uid_, other->uid_);
  std::swap(gid_, other->gid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Owner::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Owner_descriptor_;
  metadata.reflection = Owner_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Owner

// optional uint32 uid = 1;
void Owner::clear_uid() {
  uid_ = 0u;
}
 ::google::protobuf::uint32 Owner::uid() const {
  // @@protoc_insertion_point(field_get:dfsFuse.Owner.uid)
  return uid_;
}
 void Owner::set_uid(::google::protobuf::uint32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:dfsFuse.Owner.uid)
}

// optional uint32 gid = 2;
void Owner::clear_gid() {
  gid_ = 0u;
}
 ::google::protobuf::uint32 Owner::gid() const {
  // @@protoc_insertion_point(field_get:dfsFuse.Owner.gid)
  return gid_;
}
 void Owner::set_gid(::google::protobuf::uint32 value) {
  
  gid_ = value;
  // @@protoc_insertion_point(field_set:dfsFuse.Owner.gid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientInfo::kOwnerFieldNumber;
const int ClientInfo::kPidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientInfo::ClientInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dfsFuse.ClientInfo)
}

void ClientInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  owner_ = const_cast< ::dfsFuse::Owner*>(&::dfsFuse::Owner::default_instance());
}

ClientInfo::ClientInfo(const ClientInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dfsFuse.ClientInfo)
}

void ClientInfo::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  owner_ = NULL;
  pid_ = 0u;
}

ClientInfo::~ClientInfo() {
  // @@protoc_insertion_point(destructor:dfsFuse.ClientInfo)
  SharedDtor();
}

void ClientInfo::SharedDtor() {
  if (this != default_instance_) {
    delete owner_;
  }
}

void ClientInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientInfo_descriptor_;
}

const ClientInfo& ClientInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fileserver_2eproto();
  return *default_instance_;
}

ClientInfo* ClientInfo::default_instance_ = NULL;

ClientInfo* ClientInfo::New(::google::protobuf::Arena* arena) const {
  ClientInfo* n = new ClientInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClientInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:dfsFuse.ClientInfo)
  if (GetArenaNoVirtual() == NULL && owner_ != NULL) delete owner_;
  owner_ = NULL;
  pid_ = 0u;
}

bool ClientInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dfsFuse.ClientInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dfsFuse.Owner Owner = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_owner()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Pid;
        break;
      }

      // optional uint32 Pid = 2;
      case 2: {
        if (tag == 16) {
         parse_Pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dfsFuse.ClientInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dfsFuse.ClientInfo)
  return false;
#undef DO_
}

void ClientInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dfsFuse.ClientInfo)
  // optional .dfsFuse.Owner Owner = 1;
  if (this->has_owner()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->owner_, output);
  }

  // optional uint32 Pid = 2;
  if (this->pid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pid(), output);
  }

  // @@protoc_insertion_point(serialize_end:dfsFuse.ClientInfo)
}

::google::protobuf::uint8* ClientInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dfsFuse.ClientInfo)
  // optional .dfsFuse.Owner Owner = 1;
  if (this->has_owner()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->owner_, false, target);
  }

  // optional uint32 Pid = 2;
  if (this->pid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dfsFuse.ClientInfo)
  return target;
}

int ClientInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dfsFuse.ClientInfo)
  int total_size = 0;

  // optional .dfsFuse.Owner Owner = 1;
  if (this->has_owner()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->owner_);
  }

  // optional uint32 Pid = 2;
  if (this->pid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dfsFuse.ClientInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ClientInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ClientInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dfsFuse.ClientInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dfsFuse.ClientInfo)
    MergeFrom(*source);
  }
}

void ClientInfo::MergeFrom(const ClientInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dfsFuse.ClientInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_owner()) {
    mutable_owner()->::dfsFuse::Owner::MergeFrom(from.owner());
  }
  if (from.pid() != 0) {
    set_pid(from.pid());
  }
}

void ClientInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dfsFuse.ClientInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientInfo::CopyFrom(const ClientInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dfsFuse.ClientInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientInfo::IsInitialized() const {

  return true;
}

void ClientInfo::Swap(ClientInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientInfo::InternalSwap(ClientInfo* other) {
  std::swap(owner_, other->owner_);
  std::swap(pid_, other->pid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClientInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientInfo_descriptor_;
  metadata.reflection = ClientInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClientInfo

// optional .dfsFuse.Owner Owner = 1;
bool ClientInfo::has_owner() const {
  return !_is_default_instance_ && owner_ != NULL;
}
void ClientInfo::clear_owner() {
  if (GetArenaNoVirtual() == NULL && owner_ != NULL) delete owner_;
  owner_ = NULL;
}
const ::dfsFuse::Owner& ClientInfo::owner() const {
  // @@protoc_insertion_point(field_get:dfsFuse.ClientInfo.Owner)
  return owner_ != NULL ? *owner_ : *default_instance_->owner_;
}
::dfsFuse::Owner* ClientInfo::mutable_owner() {
  
  if (owner_ == NULL) {
    owner_ = new ::dfsFuse::Owner;
  }
  // @@protoc_insertion_point(field_mutable:dfsFuse.ClientInfo.Owner)
  return owner_;
}
::dfsFuse::Owner* ClientInfo::release_owner() {
  // @@protoc_insertion_point(field_release:dfsFuse.ClientInfo.Owner)
  
  ::dfsFuse::Owner* temp = owner_;
  owner_ = NULL;
  return temp;
}
void ClientInfo::set_allocated_owner(::dfsFuse::Owner* owner) {
  delete owner_;
  owner_ = owner;
  if (owner) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dfsFuse.ClientInfo.Owner)
}

// optional uint32 Pid = 2;
void ClientInfo::clear_pid() {
  pid_ = 0u;
}
 ::google::protobuf::uint32 ClientInfo::pid() const {
  // @@protoc_insertion_point(field_get:dfsFuse.ClientInfo.Pid)
  return pid_;
}
 void ClientInfo::set_pid(::google::protobuf::uint32 value) {
  
  pid_ = value;
  // @@protoc_insertion_point(field_set:dfsFuse.ClientInfo.Pid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Attr::kDevFieldNumber;
const int Attr::kInoFieldNumber;
const int Attr::kModeFieldNumber;
const int Attr::kNlinkFieldNumber;
const int Attr::kOwnerFieldNumber;
const int Attr::kRdevFieldNumber;
const int Attr::kSizeFieldNumber;
const int Attr::kBlksizeFieldNumber;
const int Attr::kBlocksFieldNumber;
const int Attr::kAtimeFieldNumber;
const int Attr::kAtimensFieldNumber;
const int Attr::kMtimeFieldNumber;
const int Attr::kMtimensFieldNumber;
const int Attr::kCtimeFieldNumber;
const int Attr::kCtimensFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Attr::Attr()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dfsFuse.Attr)
}

void Attr::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  owner_ = const_cast< ::dfsFuse::Owner*>(&::dfsFuse::Owner::default_instance());
}

Attr::Attr(const Attr& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dfsFuse.Attr)
}

void Attr::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  dev_ = GOOGLE_ULONGLONG(0);
  ino_ = GOOGLE_ULONGLONG(0);
  mode_ = GOOGLE_ULONGLONG(0);
  nlink_ = GOOGLE_ULONGLONG(0);
  owner_ = NULL;
  rdev_ = GOOGLE_ULONGLONG(0);
  size_ = GOOGLE_ULONGLONG(0);
  blksize_ = GOOGLE_ULONGLONG(0);
  blocks_ = GOOGLE_ULONGLONG(0);
  atime_ = GOOGLE_ULONGLONG(0);
  atimens_ = GOOGLE_ULONGLONG(0);
  mtime_ = GOOGLE_ULONGLONG(0);
  mtimens_ = GOOGLE_ULONGLONG(0);
  ctime_ = GOOGLE_ULONGLONG(0);
  ctimens_ = GOOGLE_ULONGLONG(0);
}

Attr::~Attr() {
  // @@protoc_insertion_point(destructor:dfsFuse.Attr)
  SharedDtor();
}

void Attr::SharedDtor() {
  if (this != default_instance_) {
    delete owner_;
  }
}

void Attr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Attr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Attr_descriptor_;
}

const Attr& Attr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fileserver_2eproto();
  return *default_instance_;
}

Attr* Attr::default_instance_ = NULL;

Attr* Attr::New(::google::protobuf::Arena* arena) const {
  Attr* n = new Attr;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Attr::Clear() {
// @@protoc_insertion_point(message_clear_start:dfsFuse.Attr)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Attr, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Attr*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(dev_, nlink_);
  ZR_(rdev_, blksize_);
  if (GetArenaNoVirtual() == NULL && owner_ != NULL) delete owner_;
  owner_ = NULL;
  ZR_(blocks_, ctimens_);

#undef ZR_HELPER_
#undef ZR_

}

bool Attr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dfsFuse.Attr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 dev = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dev_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ino;
        break;
      }

      // optional uint64 ino = 2;
      case 2: {
        if (tag == 16) {
         parse_ino:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ino_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mode;
        break;
      }

      // optional uint64 mode = 3;
      case 3: {
        if (tag == 24) {
         parse_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mode_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_nlink;
        break;
      }

      // optional uint64 nlink = 4;
      case 4: {
        if (tag == 32) {
         parse_nlink:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nlink_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_owner;
        break;
      }

      // optional .dfsFuse.Owner owner = 5;
      case 5: {
        if (tag == 42) {
         parse_owner:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_owner()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_rdev;
        break;
      }

      // optional uint64 rdev = 6;
      case 6: {
        if (tag == 48) {
         parse_rdev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rdev_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_size;
        break;
      }

      // optional uint64 size = 7;
      case 7: {
        if (tag == 56) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_blksize;
        break;
      }

      // optional uint64 blksize = 8;
      case 8: {
        if (tag == 64) {
         parse_blksize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &blksize_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_blocks;
        break;
      }

      // optional uint64 blocks = 9;
      case 9: {
        if (tag == 72) {
         parse_blocks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &blocks_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_atime;
        break;
      }

      // optional uint64 atime = 10;
      case 10: {
        if (tag == 80) {
         parse_atime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &atime_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_atimens;
        break;
      }

      // optional uint64 atimens = 11;
      case 11: {
        if (tag == 88) {
         parse_atimens:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &atimens_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_mtime;
        break;
      }

      // optional uint64 mtime = 12;
      case 12: {
        if (tag == 96) {
         parse_mtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mtime_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_mtimens;
        break;
      }

      // optional uint64 mtimens = 13;
      case 13: {
        if (tag == 104) {
         parse_mtimens:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mtimens_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_ctime;
        break;
      }

      // optional uint64 ctime = 14;
      case 14: {
        if (tag == 112) {
         parse_ctime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ctime_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_ctimens;
        break;
      }

      // optional uint64 ctimens = 15;
      case 15: {
        if (tag == 120) {
         parse_ctimens:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ctimens_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dfsFuse.Attr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dfsFuse.Attr)
  return false;
#undef DO_
}

void Attr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dfsFuse.Attr)
  // optional uint64 dev = 1;
  if (this->dev() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->dev(), output);
  }

  // optional uint64 ino = 2;
  if (this->ino() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->ino(), output);
  }

  // optional uint64 mode = 3;
  if (this->mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->mode(), output);
  }

  // optional uint64 nlink = 4;
  if (this->nlink() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->nlink(), output);
  }

  // optional .dfsFuse.Owner owner = 5;
  if (this->has_owner()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->owner_, output);
  }

  // optional uint64 rdev = 6;
  if (this->rdev() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->rdev(), output);
  }

  // optional uint64 size = 7;
  if (this->size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->size(), output);
  }

  // optional uint64 blksize = 8;
  if (this->blksize() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->blksize(), output);
  }

  // optional uint64 blocks = 9;
  if (this->blocks() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->blocks(), output);
  }

  // optional uint64 atime = 10;
  if (this->atime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->atime(), output);
  }

  // optional uint64 atimens = 11;
  if (this->atimens() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->atimens(), output);
  }

  // optional uint64 mtime = 12;
  if (this->mtime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->mtime(), output);
  }

  // optional uint64 mtimens = 13;
  if (this->mtimens() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->mtimens(), output);
  }

  // optional uint64 ctime = 14;
  if (this->ctime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->ctime(), output);
  }

  // optional uint64 ctimens = 15;
  if (this->ctimens() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(15, this->ctimens(), output);
  }

  // @@protoc_insertion_point(serialize_end:dfsFuse.Attr)
}

::google::protobuf::uint8* Attr::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dfsFuse.Attr)
  // optional uint64 dev = 1;
  if (this->dev() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->dev(), target);
  }

  // optional uint64 ino = 2;
  if (this->ino() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->ino(), target);
  }

  // optional uint64 mode = 3;
  if (this->mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->mode(), target);
  }

  // optional uint64 nlink = 4;
  if (this->nlink() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->nlink(), target);
  }

  // optional .dfsFuse.Owner owner = 5;
  if (this->has_owner()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->owner_, false, target);
  }

  // optional uint64 rdev = 6;
  if (this->rdev() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->rdev(), target);
  }

  // optional uint64 size = 7;
  if (this->size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->size(), target);
  }

  // optional uint64 blksize = 8;
  if (this->blksize() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->blksize(), target);
  }

  // optional uint64 blocks = 9;
  if (this->blocks() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->blocks(), target);
  }

  // optional uint64 atime = 10;
  if (this->atime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->atime(), target);
  }

  // optional uint64 atimens = 11;
  if (this->atimens() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->atimens(), target);
  }

  // optional uint64 mtime = 12;
  if (this->mtime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->mtime(), target);
  }

  // optional uint64 mtimens = 13;
  if (this->mtimens() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->mtimens(), target);
  }

  // optional uint64 ctime = 14;
  if (this->ctime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->ctime(), target);
  }

  // optional uint64 ctimens = 15;
  if (this->ctimens() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(15, this->ctimens(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dfsFuse.Attr)
  return target;
}

int Attr::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dfsFuse.Attr)
  int total_size = 0;

  // optional uint64 dev = 1;
  if (this->dev() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->dev());
  }

  // optional uint64 ino = 2;
  if (this->ino() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ino());
  }

  // optional uint64 mode = 3;
  if (this->mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->mode());
  }

  // optional uint64 nlink = 4;
  if (this->nlink() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->nlink());
  }

  // optional .dfsFuse.Owner owner = 5;
  if (this->has_owner()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->owner_);
  }

  // optional uint64 rdev = 6;
  if (this->rdev() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->rdev());
  }

  // optional uint64 size = 7;
  if (this->size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->size());
  }

  // optional uint64 blksize = 8;
  if (this->blksize() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->blksize());
  }

  // optional uint64 blocks = 9;
  if (this->blocks() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->blocks());
  }

  // optional uint64 atime = 10;
  if (this->atime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->atime());
  }

  // optional uint64 atimens = 11;
  if (this->atimens() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->atimens());
  }

  // optional uint64 mtime = 12;
  if (this->mtime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->mtime());
  }

  // optional uint64 mtimens = 13;
  if (this->mtimens() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->mtimens());
  }

  // optional uint64 ctime = 14;
  if (this->ctime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ctime());
  }

  // optional uint64 ctimens = 15;
  if (this->ctimens() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ctimens());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Attr::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dfsFuse.Attr)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Attr* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Attr>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dfsFuse.Attr)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dfsFuse.Attr)
    MergeFrom(*source);
  }
}

void Attr::MergeFrom(const Attr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dfsFuse.Attr)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.dev() != 0) {
    set_dev(from.dev());
  }
  if (from.ino() != 0) {
    set_ino(from.ino());
  }
  if (from.mode() != 0) {
    set_mode(from.mode());
  }
  if (from.nlink() != 0) {
    set_nlink(from.nlink());
  }
  if (from.has_owner()) {
    mutable_owner()->::dfsFuse::Owner::MergeFrom(from.owner());
  }
  if (from.rdev() != 0) {
    set_rdev(from.rdev());
  }
  if (from.size() != 0) {
    set_size(from.size());
  }
  if (from.blksize() != 0) {
    set_blksize(from.blksize());
  }
  if (from.blocks() != 0) {
    set_blocks(from.blocks());
  }
  if (from.atime() != 0) {
    set_atime(from.atime());
  }
  if (from.atimens() != 0) {
    set_atimens(from.atimens());
  }
  if (from.mtime() != 0) {
    set_mtime(from.mtime());
  }
  if (from.mtimens() != 0) {
    set_mtimens(from.mtimens());
  }
  if (from.ctime() != 0) {
    set_ctime(from.ctime());
  }
  if (from.ctimens() != 0) {
    set_ctimens(from.ctimens());
  }
}

void Attr::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dfsFuse.Attr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Attr::CopyFrom(const Attr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dfsFuse.Attr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Attr::IsInitialized() const {

  return true;
}

void Attr::Swap(Attr* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Attr::InternalSwap(Attr* other) {
  std::swap(dev_, other->dev_);
  std::swap(ino_, other->ino_);
  std::swap(mode_, other->mode_);
  std::swap(nlink_, other->nlink_);
  std::swap(owner_, other->owner_);
  std::swap(rdev_, other->rdev_);
  std::swap(size_, other->size_);
  std::swap(blksize_, other->blksize_);
  std::swap(blocks_, other->blocks_);
  std::swap(atime_, other->atime_);
  std::swap(atimens_, other->atimens_);
  std::swap(mtime_, other->mtime_);
  std::swap(mtimens_, other->mtimens_);
  std::swap(ctime_, other->ctime_);
  std::swap(ctimens_, other->ctimens_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Attr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Attr_descriptor_;
  metadata.reflection = Attr_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Attr

// optional uint64 dev = 1;
void Attr::clear_dev() {
  dev_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 Attr::dev() const {
  // @@protoc_insertion_point(field_get:dfsFuse.Attr.dev)
  return dev_;
}
 void Attr::set_dev(::google::protobuf::uint64 value) {
  
  dev_ = value;
  // @@protoc_insertion_point(field_set:dfsFuse.Attr.dev)
}

// optional uint64 ino = 2;
void Attr::clear_ino() {
  ino_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 Attr::ino() const {
  // @@protoc_insertion_point(field_get:dfsFuse.Attr.ino)
  return ino_;
}
 void Attr::set_ino(::google::protobuf::uint64 value) {
  
  ino_ = value;
  // @@protoc_insertion_point(field_set:dfsFuse.Attr.ino)
}

// optional uint64 mode = 3;
void Attr::clear_mode() {
  mode_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 Attr::mode() const {
  // @@protoc_insertion_point(field_get:dfsFuse.Attr.mode)
  return mode_;
}
 void Attr::set_mode(::google::protobuf::uint64 value) {
  
  mode_ = value;
  // @@protoc_insertion_point(field_set:dfsFuse.Attr.mode)
}

// optional uint64 nlink = 4;
void Attr::clear_nlink() {
  nlink_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 Attr::nlink() const {
  // @@protoc_insertion_point(field_get:dfsFuse.Attr.nlink)
  return nlink_;
}
 void Attr::set_nlink(::google::protobuf::uint64 value) {
  
  nlink_ = value;
  // @@protoc_insertion_point(field_set:dfsFuse.Attr.nlink)
}

// optional .dfsFuse.Owner owner = 5;
bool Attr::has_owner() const {
  return !_is_default_instance_ && owner_ != NULL;
}
void Attr::clear_owner() {
  if (GetArenaNoVirtual() == NULL && owner_ != NULL) delete owner_;
  owner_ = NULL;
}
const ::dfsFuse::Owner& Attr::owner() const {
  // @@protoc_insertion_point(field_get:dfsFuse.Attr.owner)
  return owner_ != NULL ? *owner_ : *default_instance_->owner_;
}
::dfsFuse::Owner* Attr::mutable_owner() {
  
  if (owner_ == NULL) {
    owner_ = new ::dfsFuse::Owner;
  }
  // @@protoc_insertion_point(field_mutable:dfsFuse.Attr.owner)
  return owner_;
}
::dfsFuse::Owner* Attr::release_owner() {
  // @@protoc_insertion_point(field_release:dfsFuse.Attr.owner)
  
  ::dfsFuse::Owner* temp = owner_;
  owner_ = NULL;
  return temp;
}
void Attr::set_allocated_owner(::dfsFuse::Owner* owner) {
  delete owner_;
  owner_ = owner;
  if (owner) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dfsFuse.Attr.owner)
}

// optional uint64 rdev = 6;
void Attr::clear_rdev() {
  rdev_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 Attr::rdev() const {
  // @@protoc_insertion_point(field_get:dfsFuse.Attr.rdev)
  return rdev_;
}
 void Attr::set_rdev(::google::protobuf::uint64 value) {
  
  rdev_ = value;
  // @@protoc_insertion_point(field_set:dfsFuse.Attr.rdev)
}

// optional uint64 size = 7;
void Attr::clear_size() {
  size_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 Attr::size() const {
  // @@protoc_insertion_point(field_get:dfsFuse.Attr.size)
  return size_;
}
 void Attr::set_size(::google::protobuf::uint64 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:dfsFuse.Attr.size)
}

// optional uint64 blksize = 8;
void Attr::clear_blksize() {
  blksize_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 Attr::blksize() const {
  // @@protoc_insertion_point(field_get:dfsFuse.Attr.blksize)
  return blksize_;
}
 void Attr::set_blksize(::google::protobuf::uint64 value) {
  
  blksize_ = value;
  // @@protoc_insertion_point(field_set:dfsFuse.Attr.blksize)
}

// optional uint64 blocks = 9;
void Attr::clear_blocks() {
  blocks_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 Attr::blocks() const {
  // @@protoc_insertion_point(field_get:dfsFuse.Attr.blocks)
  return blocks_;
}
 void Attr::set_blocks(::google::protobuf::uint64 value) {
  
  blocks_ = value;
  // @@protoc_insertion_point(field_set:dfsFuse.Attr.blocks)
}

// optional uint64 atime = 10;
void Attr::clear_atime() {
  atime_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 Attr::atime() const {
  // @@protoc_insertion_point(field_get:dfsFuse.Attr.atime)
  return atime_;
}
 void Attr::set_atime(::google::protobuf::uint64 value) {
  
  atime_ = value;
  // @@protoc_insertion_point(field_set:dfsFuse.Attr.atime)
}

// optional uint64 atimens = 11;
void Attr::clear_atimens() {
  atimens_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 Attr::atimens() const {
  // @@protoc_insertion_point(field_get:dfsFuse.Attr.atimens)
  return atimens_;
}
 void Attr::set_atimens(::google::protobuf::uint64 value) {
  
  atimens_ = value;
  // @@protoc_insertion_point(field_set:dfsFuse.Attr.atimens)
}

// optional uint64 mtime = 12;
void Attr::clear_mtime() {
  mtime_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 Attr::mtime() const {
  // @@protoc_insertion_point(field_get:dfsFuse.Attr.mtime)
  return mtime_;
}
 void Attr::set_mtime(::google::protobuf::uint64 value) {
  
  mtime_ = value;
  // @@protoc_insertion_point(field_set:dfsFuse.Attr.mtime)
}

// optional uint64 mtimens = 13;
void Attr::clear_mtimens() {
  mtimens_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 Attr::mtimens() const {
  // @@protoc_insertion_point(field_get:dfsFuse.Attr.mtimens)
  return mtimens_;
}
 void Attr::set_mtimens(::google::protobuf::uint64 value) {
  
  mtimens_ = value;
  // @@protoc_insertion_point(field_set:dfsFuse.Attr.mtimens)
}

// optional uint64 ctime = 14;
void Attr::clear_ctime() {
  ctime_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 Attr::ctime() const {
  // @@protoc_insertion_point(field_get:dfsFuse.Attr.ctime)
  return ctime_;
}
 void Attr::set_ctime(::google::protobuf::uint64 value) {
  
  ctime_ = value;
  // @@protoc_insertion_point(field_set:dfsFuse.Attr.ctime)
}

// optional uint64 ctimens = 15;
void Attr::clear_ctimens() {
  ctimens_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 Attr::ctimens() const {
  // @@protoc_insertion_point(field_get:dfsFuse.Attr.ctimens)
  return ctimens_;
}
 void Attr::set_ctimens(::google::protobuf::uint64 value) {
  
  ctimens_ = value;
  // @@protoc_insertion_point(field_set:dfsFuse.Attr.ctimens)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetAttrRequest::kNameFieldNumber;
const int GetAttrRequest::kInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetAttrRequest::GetAttrRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dfsFuse.GetAttrRequest)
}

void GetAttrRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  info_ = const_cast< ::dfsFuse::ClientInfo*>(&::dfsFuse::ClientInfo::default_instance());
}

GetAttrRequest::GetAttrRequest(const GetAttrRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dfsFuse.GetAttrRequest)
}

void GetAttrRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  info_ = NULL;
}

GetAttrRequest::~GetAttrRequest() {
  // @@protoc_insertion_point(destructor:dfsFuse.GetAttrRequest)
  SharedDtor();
}

void GetAttrRequest::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete info_;
  }
}

void GetAttrRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAttrRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAttrRequest_descriptor_;
}

const GetAttrRequest& GetAttrRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fileserver_2eproto();
  return *default_instance_;
}

GetAttrRequest* GetAttrRequest::default_instance_ = NULL;

GetAttrRequest* GetAttrRequest::New(::google::protobuf::Arena* arena) const {
  GetAttrRequest* n = new GetAttrRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetAttrRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dfsFuse.GetAttrRequest)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && info_ != NULL) delete info_;
  info_ = NULL;
}

bool GetAttrRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dfsFuse.GetAttrRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dfsFuse.GetAttrRequest.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // optional .dfsFuse.ClientInfo info = 2;
      case 2: {
        if (tag == 18) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dfsFuse.GetAttrRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dfsFuse.GetAttrRequest)
  return false;
#undef DO_
}

void GetAttrRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dfsFuse.GetAttrRequest)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dfsFuse.GetAttrRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional .dfsFuse.ClientInfo info = 2;
  if (this->has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->info_, output);
  }

  // @@protoc_insertion_point(serialize_end:dfsFuse.GetAttrRequest)
}

::google::protobuf::uint8* GetAttrRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dfsFuse.GetAttrRequest)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dfsFuse.GetAttrRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .dfsFuse.ClientInfo info = 2;
  if (this->has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->info_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dfsFuse.GetAttrRequest)
  return target;
}

int GetAttrRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dfsFuse.GetAttrRequest)
  int total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional .dfsFuse.ClientInfo info = 2;
  if (this->has_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->info_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAttrRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dfsFuse.GetAttrRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GetAttrRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetAttrRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dfsFuse.GetAttrRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dfsFuse.GetAttrRequest)
    MergeFrom(*source);
  }
}

void GetAttrRequest::MergeFrom(const GetAttrRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dfsFuse.GetAttrRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_info()) {
    mutable_info()->::dfsFuse::ClientInfo::MergeFrom(from.info());
  }
}

void GetAttrRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dfsFuse.GetAttrRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAttrRequest::CopyFrom(const GetAttrRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dfsFuse.GetAttrRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAttrRequest::IsInitialized() const {

  return true;
}

void GetAttrRequest::Swap(GetAttrRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetAttrRequest::InternalSwap(GetAttrRequest* other) {
  name_.Swap(&other->name_);
  std::swap(info_, other->info_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetAttrRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetAttrRequest_descriptor_;
  metadata.reflection = GetAttrRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetAttrRequest

// optional string name = 1;
void GetAttrRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GetAttrRequest::name() const {
  // @@protoc_insertion_point(field_get:dfsFuse.GetAttrRequest.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetAttrRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dfsFuse.GetAttrRequest.name)
}
 void GetAttrRequest::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dfsFuse.GetAttrRequest.name)
}
 void GetAttrRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dfsFuse.GetAttrRequest.name)
}
 ::std::string* GetAttrRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:dfsFuse.GetAttrRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GetAttrRequest::release_name() {
  // @@protoc_insertion_point(field_release:dfsFuse.GetAttrRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetAttrRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:dfsFuse.GetAttrRequest.name)
}

// optional .dfsFuse.ClientInfo info = 2;
bool GetAttrRequest::has_info() const {
  return !_is_default_instance_ && info_ != NULL;
}
void GetAttrRequest::clear_info() {
  if (GetArenaNoVirtual() == NULL && info_ != NULL) delete info_;
  info_ = NULL;
}
const ::dfsFuse::ClientInfo& GetAttrRequest::info() const {
  // @@protoc_insertion_point(field_get:dfsFuse.GetAttrRequest.info)
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
::dfsFuse::ClientInfo* GetAttrRequest::mutable_info() {
  
  if (info_ == NULL) {
    info_ = new ::dfsFuse::ClientInfo;
  }
  // @@protoc_insertion_point(field_mutable:dfsFuse.GetAttrRequest.info)
  return info_;
}
::dfsFuse::ClientInfo* GetAttrRequest::release_info() {
  // @@protoc_insertion_point(field_release:dfsFuse.GetAttrRequest.info)
  
  ::dfsFuse::ClientInfo* temp = info_;
  info_ = NULL;
  return temp;
}
void GetAttrRequest::set_allocated_info(::dfsFuse::ClientInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dfsFuse.GetAttrRequest.info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetAttrResponse::kAttrFieldNumber;
const int GetAttrResponse::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetAttrResponse::GetAttrResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dfsFuse.GetAttrResponse)
}

void GetAttrResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  attr_ = const_cast< ::dfsFuse::Attr*>(&::dfsFuse::Attr::default_instance());
  status_ = const_cast< ::dfsFuse::FSstatus*>(&::dfsFuse::FSstatus::default_instance());
}

GetAttrResponse::GetAttrResponse(const GetAttrResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dfsFuse.GetAttrResponse)
}

void GetAttrResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  attr_ = NULL;
  status_ = NULL;
}

GetAttrResponse::~GetAttrResponse() {
  // @@protoc_insertion_point(destructor:dfsFuse.GetAttrResponse)
  SharedDtor();
}

void GetAttrResponse::SharedDtor() {
  if (this != default_instance_) {
    delete attr_;
    delete status_;
  }
}

void GetAttrResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAttrResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAttrResponse_descriptor_;
}

const GetAttrResponse& GetAttrResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fileserver_2eproto();
  return *default_instance_;
}

GetAttrResponse* GetAttrResponse::default_instance_ = NULL;

GetAttrResponse* GetAttrResponse::New(::google::protobuf::Arena* arena) const {
  GetAttrResponse* n = new GetAttrResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetAttrResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dfsFuse.GetAttrResponse)
  if (GetArenaNoVirtual() == NULL && attr_ != NULL) delete attr_;
  attr_ = NULL;
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}

bool GetAttrResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dfsFuse.GetAttrResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dfsFuse.Attr attr = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_status;
        break;
      }

      // optional .dfsFuse.FSstatus status = 2;
      case 2: {
        if (tag == 18) {
         parse_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dfsFuse.GetAttrResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dfsFuse.GetAttrResponse)
  return false;
#undef DO_
}

void GetAttrResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dfsFuse.GetAttrResponse)
  // optional .dfsFuse.Attr attr = 1;
  if (this->has_attr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->attr_, output);
  }

  // optional .dfsFuse.FSstatus status = 2;
  if (this->has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->status_, output);
  }

  // @@protoc_insertion_point(serialize_end:dfsFuse.GetAttrResponse)
}

::google::protobuf::uint8* GetAttrResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dfsFuse.GetAttrResponse)
  // optional .dfsFuse.Attr attr = 1;
  if (this->has_attr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->attr_, false, target);
  }

  // optional .dfsFuse.FSstatus status = 2;
  if (this->has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->status_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dfsFuse.GetAttrResponse)
  return target;
}

int GetAttrResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dfsFuse.GetAttrResponse)
  int total_size = 0;

  // optional .dfsFuse.Attr attr = 1;
  if (this->has_attr()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->attr_);
  }

  // optional .dfsFuse.FSstatus status = 2;
  if (this->has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->status_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAttrResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dfsFuse.GetAttrResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GetAttrResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetAttrResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dfsFuse.GetAttrResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dfsFuse.GetAttrResponse)
    MergeFrom(*source);
  }
}

void GetAttrResponse::MergeFrom(const GetAttrResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dfsFuse.GetAttrResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_attr()) {
    mutable_attr()->::dfsFuse::Attr::MergeFrom(from.attr());
  }
  if (from.has_status()) {
    mutable_status()->::dfsFuse::FSstatus::MergeFrom(from.status());
  }
}

void GetAttrResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dfsFuse.GetAttrResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAttrResponse::CopyFrom(const GetAttrResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dfsFuse.GetAttrResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAttrResponse::IsInitialized() const {

  return true;
}

void GetAttrResponse::Swap(GetAttrResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetAttrResponse::InternalSwap(GetAttrResponse* other) {
  std::swap(attr_, other->attr_);
  std::swap(status_, other->status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetAttrResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetAttrResponse_descriptor_;
  metadata.reflection = GetAttrResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetAttrResponse

// optional .dfsFuse.Attr attr = 1;
bool GetAttrResponse::has_attr() const {
  return !_is_default_instance_ && attr_ != NULL;
}
void GetAttrResponse::clear_attr() {
  if (GetArenaNoVirtual() == NULL && attr_ != NULL) delete attr_;
  attr_ = NULL;
}
const ::dfsFuse::Attr& GetAttrResponse::attr() const {
  // @@protoc_insertion_point(field_get:dfsFuse.GetAttrResponse.attr)
  return attr_ != NULL ? *attr_ : *default_instance_->attr_;
}
::dfsFuse::Attr* GetAttrResponse::mutable_attr() {
  
  if (attr_ == NULL) {
    attr_ = new ::dfsFuse::Attr;
  }
  // @@protoc_insertion_point(field_mutable:dfsFuse.GetAttrResponse.attr)
  return attr_;
}
::dfsFuse::Attr* GetAttrResponse::release_attr() {
  // @@protoc_insertion_point(field_release:dfsFuse.GetAttrResponse.attr)
  
  ::dfsFuse::Attr* temp = attr_;
  attr_ = NULL;
  return temp;
}
void GetAttrResponse::set_allocated_attr(::dfsFuse::Attr* attr) {
  delete attr_;
  attr_ = attr;
  if (attr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dfsFuse.GetAttrResponse.attr)
}

// optional .dfsFuse.FSstatus status = 2;
bool GetAttrResponse::has_status() const {
  return !_is_default_instance_ && status_ != NULL;
}
void GetAttrResponse::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}
const ::dfsFuse::FSstatus& GetAttrResponse::status() const {
  // @@protoc_insertion_point(field_get:dfsFuse.GetAttrResponse.status)
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
::dfsFuse::FSstatus* GetAttrResponse::mutable_status() {
  
  if (status_ == NULL) {
    status_ = new ::dfsFuse::FSstatus;
  }
  // @@protoc_insertion_point(field_mutable:dfsFuse.GetAttrResponse.status)
  return status_;
}
::dfsFuse::FSstatus* GetAttrResponse::release_status() {
  // @@protoc_insertion_point(field_release:dfsFuse.GetAttrResponse.status)
  
  ::dfsFuse::FSstatus* temp = status_;
  status_ = NULL;
  return temp;
}
void GetAttrResponse::set_allocated_status(::dfsFuse::FSstatus* status) {
  delete status_;
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dfsFuse.GetAttrResponse.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MkdirRequest::kNameFieldNumber;
const int MkdirRequest::kModeFieldNumber;
const int MkdirRequest::kInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MkdirRequest::MkdirRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dfsFuse.MkdirRequest)
}

void MkdirRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  info_ = const_cast< ::dfsFuse::ClientInfo*>(&::dfsFuse::ClientInfo::default_instance());
}

MkdirRequest::MkdirRequest(const MkdirRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dfsFuse.MkdirRequest)
}

void MkdirRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mode_ = GOOGLE_ULONGLONG(0);
  info_ = NULL;
}

MkdirRequest::~MkdirRequest() {
  // @@protoc_insertion_point(destructor:dfsFuse.MkdirRequest)
  SharedDtor();
}

void MkdirRequest::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete info_;
  }
}

void MkdirRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MkdirRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MkdirRequest_descriptor_;
}

const MkdirRequest& MkdirRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fileserver_2eproto();
  return *default_instance_;
}

MkdirRequest* MkdirRequest::default_instance_ = NULL;

MkdirRequest* MkdirRequest::New(::google::protobuf::Arena* arena) const {
  MkdirRequest* n = new MkdirRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MkdirRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dfsFuse.MkdirRequest)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mode_ = GOOGLE_ULONGLONG(0);
  if (GetArenaNoVirtual() == NULL && info_ != NULL) delete info_;
  info_ = NULL;
}

bool MkdirRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dfsFuse.MkdirRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dfsFuse.MkdirRequest.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mode;
        break;
      }

      // optional uint64 mode = 2;
      case 2: {
        if (tag == 16) {
         parse_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mode_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_info;
        break;
      }

      // optional .dfsFuse.ClientInfo info = 3;
      case 3: {
        if (tag == 26) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dfsFuse.MkdirRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dfsFuse.MkdirRequest)
  return false;
#undef DO_
}

void MkdirRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dfsFuse.MkdirRequest)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dfsFuse.MkdirRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional uint64 mode = 2;
  if (this->mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->mode(), output);
  }

  // optional .dfsFuse.ClientInfo info = 3;
  if (this->has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->info_, output);
  }

  // @@protoc_insertion_point(serialize_end:dfsFuse.MkdirRequest)
}

::google::protobuf::uint8* MkdirRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dfsFuse.MkdirRequest)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dfsFuse.MkdirRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional uint64 mode = 2;
  if (this->mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->mode(), target);
  }

  // optional .dfsFuse.ClientInfo info = 3;
  if (this->has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->info_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dfsFuse.MkdirRequest)
  return target;
}

int MkdirRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dfsFuse.MkdirRequest)
  int total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional uint64 mode = 2;
  if (this->mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->mode());
  }

  // optional .dfsFuse.ClientInfo info = 3;
  if (this->has_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->info_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MkdirRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dfsFuse.MkdirRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MkdirRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MkdirRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dfsFuse.MkdirRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dfsFuse.MkdirRequest)
    MergeFrom(*source);
  }
}

void MkdirRequest::MergeFrom(const MkdirRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dfsFuse.MkdirRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.mode() != 0) {
    set_mode(from.mode());
  }
  if (from.has_info()) {
    mutable_info()->::dfsFuse::ClientInfo::MergeFrom(from.info());
  }
}

void MkdirRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dfsFuse.MkdirRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MkdirRequest::CopyFrom(const MkdirRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dfsFuse.MkdirRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MkdirRequest::IsInitialized() const {

  return true;
}

void MkdirRequest::Swap(MkdirRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MkdirRequest::InternalSwap(MkdirRequest* other) {
  name_.Swap(&other->name_);
  std::swap(mode_, other->mode_);
  std::swap(info_, other->info_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MkdirRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MkdirRequest_descriptor_;
  metadata.reflection = MkdirRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MkdirRequest

// optional string name = 1;
void MkdirRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MkdirRequest::name() const {
  // @@protoc_insertion_point(field_get:dfsFuse.MkdirRequest.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MkdirRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dfsFuse.MkdirRequest.name)
}
 void MkdirRequest::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dfsFuse.MkdirRequest.name)
}
 void MkdirRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dfsFuse.MkdirRequest.name)
}
 ::std::string* MkdirRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:dfsFuse.MkdirRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MkdirRequest::release_name() {
  // @@protoc_insertion_point(field_release:dfsFuse.MkdirRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MkdirRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:dfsFuse.MkdirRequest.name)
}

// optional uint64 mode = 2;
void MkdirRequest::clear_mode() {
  mode_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 MkdirRequest::mode() const {
  // @@protoc_insertion_point(field_get:dfsFuse.MkdirRequest.mode)
  return mode_;
}
 void MkdirRequest::set_mode(::google::protobuf::uint64 value) {
  
  mode_ = value;
  // @@protoc_insertion_point(field_set:dfsFuse.MkdirRequest.mode)
}

// optional .dfsFuse.ClientInfo info = 3;
bool MkdirRequest::has_info() const {
  return !_is_default_instance_ && info_ != NULL;
}
void MkdirRequest::clear_info() {
  if (GetArenaNoVirtual() == NULL && info_ != NULL) delete info_;
  info_ = NULL;
}
const ::dfsFuse::ClientInfo& MkdirRequest::info() const {
  // @@protoc_insertion_point(field_get:dfsFuse.MkdirRequest.info)
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
::dfsFuse::ClientInfo* MkdirRequest::mutable_info() {
  
  if (info_ == NULL) {
    info_ = new ::dfsFuse::ClientInfo;
  }
  // @@protoc_insertion_point(field_mutable:dfsFuse.MkdirRequest.info)
  return info_;
}
::dfsFuse::ClientInfo* MkdirRequest::release_info() {
  // @@protoc_insertion_point(field_release:dfsFuse.MkdirRequest.info)
  
  ::dfsFuse::ClientInfo* temp = info_;
  info_ = NULL;
  return temp;
}
void MkdirRequest::set_allocated_info(::dfsFuse::ClientInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dfsFuse.MkdirRequest.info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MkdirResponse::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MkdirResponse::MkdirResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dfsFuse.MkdirResponse)
}

void MkdirResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  status_ = const_cast< ::dfsFuse::FSstatus*>(&::dfsFuse::FSstatus::default_instance());
}

MkdirResponse::MkdirResponse(const MkdirResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dfsFuse.MkdirResponse)
}

void MkdirResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  status_ = NULL;
}

MkdirResponse::~MkdirResponse() {
  // @@protoc_insertion_point(destructor:dfsFuse.MkdirResponse)
  SharedDtor();
}

void MkdirResponse::SharedDtor() {
  if (this != default_instance_) {
    delete status_;
  }
}

void MkdirResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MkdirResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MkdirResponse_descriptor_;
}

const MkdirResponse& MkdirResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fileserver_2eproto();
  return *default_instance_;
}

MkdirResponse* MkdirResponse::default_instance_ = NULL;

MkdirResponse* MkdirResponse::New(::google::protobuf::Arena* arena) const {
  MkdirResponse* n = new MkdirResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MkdirResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dfsFuse.MkdirResponse)
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}

bool MkdirResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dfsFuse.MkdirResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dfsFuse.FSstatus status = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dfsFuse.MkdirResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dfsFuse.MkdirResponse)
  return false;
#undef DO_
}

void MkdirResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dfsFuse.MkdirResponse)
  // optional .dfsFuse.FSstatus status = 1;
  if (this->has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->status_, output);
  }

  // @@protoc_insertion_point(serialize_end:dfsFuse.MkdirResponse)
}

::google::protobuf::uint8* MkdirResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dfsFuse.MkdirResponse)
  // optional .dfsFuse.FSstatus status = 1;
  if (this->has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->status_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dfsFuse.MkdirResponse)
  return target;
}

int MkdirResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dfsFuse.MkdirResponse)
  int total_size = 0;

  // optional .dfsFuse.FSstatus status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->status_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MkdirResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dfsFuse.MkdirResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MkdirResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MkdirResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dfsFuse.MkdirResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dfsFuse.MkdirResponse)
    MergeFrom(*source);
  }
}

void MkdirResponse::MergeFrom(const MkdirResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dfsFuse.MkdirResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_status()) {
    mutable_status()->::dfsFuse::FSstatus::MergeFrom(from.status());
  }
}

void MkdirResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dfsFuse.MkdirResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MkdirResponse::CopyFrom(const MkdirResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dfsFuse.MkdirResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MkdirResponse::IsInitialized() const {

  return true;
}

void MkdirResponse::Swap(MkdirResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MkdirResponse::InternalSwap(MkdirResponse* other) {
  std::swap(status_, other->status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MkdirResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MkdirResponse_descriptor_;
  metadata.reflection = MkdirResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MkdirResponse

// optional .dfsFuse.FSstatus status = 1;
bool MkdirResponse::has_status() const {
  return !_is_default_instance_ && status_ != NULL;
}
void MkdirResponse::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}
const ::dfsFuse::FSstatus& MkdirResponse::status() const {
  // @@protoc_insertion_point(field_get:dfsFuse.MkdirResponse.status)
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
::dfsFuse::FSstatus* MkdirResponse::mutable_status() {
  
  if (status_ == NULL) {
    status_ = new ::dfsFuse::FSstatus;
  }
  // @@protoc_insertion_point(field_mutable:dfsFuse.MkdirResponse.status)
  return status_;
}
::dfsFuse::FSstatus* MkdirResponse::release_status() {
  // @@protoc_insertion_point(field_release:dfsFuse.MkdirResponse.status)
  
  ::dfsFuse::FSstatus* temp = status_;
  status_ = NULL;
  return temp;
}
void MkdirResponse::set_allocated_status(::dfsFuse::FSstatus* status) {
  delete status_;
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dfsFuse.MkdirResponse.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OpenDirRequest::kNameFieldNumber;
const int OpenDirRequest::kInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OpenDirRequest::OpenDirRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dfsFuse.OpenDirRequest)
}

void OpenDirRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  info_ = const_cast< ::dfsFuse::ClientInfo*>(&::dfsFuse::ClientInfo::default_instance());
}

OpenDirRequest::OpenDirRequest(const OpenDirRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dfsFuse.OpenDirRequest)
}

void OpenDirRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  info_ = NULL;
}

OpenDirRequest::~OpenDirRequest() {
  // @@protoc_insertion_point(destructor:dfsFuse.OpenDirRequest)
  SharedDtor();
}

void OpenDirRequest::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete info_;
  }
}

void OpenDirRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpenDirRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpenDirRequest_descriptor_;
}

const OpenDirRequest& OpenDirRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fileserver_2eproto();
  return *default_instance_;
}

OpenDirRequest* OpenDirRequest::default_instance_ = NULL;

OpenDirRequest* OpenDirRequest::New(::google::protobuf::Arena* arena) const {
  OpenDirRequest* n = new OpenDirRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OpenDirRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dfsFuse.OpenDirRequest)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && info_ != NULL) delete info_;
  info_ = NULL;
}

bool OpenDirRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dfsFuse.OpenDirRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dfsFuse.OpenDirRequest.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // optional .dfsFuse.ClientInfo info = 2;
      case 2: {
        if (tag == 18) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dfsFuse.OpenDirRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dfsFuse.OpenDirRequest)
  return false;
#undef DO_
}

void OpenDirRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dfsFuse.OpenDirRequest)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dfsFuse.OpenDirRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional .dfsFuse.ClientInfo info = 2;
  if (this->has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->info_, output);
  }

  // @@protoc_insertion_point(serialize_end:dfsFuse.OpenDirRequest)
}

::google::protobuf::uint8* OpenDirRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dfsFuse.OpenDirRequest)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dfsFuse.OpenDirRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .dfsFuse.ClientInfo info = 2;
  if (this->has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->info_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dfsFuse.OpenDirRequest)
  return target;
}

int OpenDirRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dfsFuse.OpenDirRequest)
  int total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional .dfsFuse.ClientInfo info = 2;
  if (this->has_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->info_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenDirRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dfsFuse.OpenDirRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const OpenDirRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const OpenDirRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dfsFuse.OpenDirRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dfsFuse.OpenDirRequest)
    MergeFrom(*source);
  }
}

void OpenDirRequest::MergeFrom(const OpenDirRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dfsFuse.OpenDirRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_info()) {
    mutable_info()->::dfsFuse::ClientInfo::MergeFrom(from.info());
  }
}

void OpenDirRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dfsFuse.OpenDirRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenDirRequest::CopyFrom(const OpenDirRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dfsFuse.OpenDirRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenDirRequest::IsInitialized() const {

  return true;
}

void OpenDirRequest::Swap(OpenDirRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OpenDirRequest::InternalSwap(OpenDirRequest* other) {
  name_.Swap(&other->name_);
  std::swap(info_, other->info_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OpenDirRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpenDirRequest_descriptor_;
  metadata.reflection = OpenDirRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OpenDirRequest

// optional string name = 1;
void OpenDirRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& OpenDirRequest::name() const {
  // @@protoc_insertion_point(field_get:dfsFuse.OpenDirRequest.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void OpenDirRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dfsFuse.OpenDirRequest.name)
}
 void OpenDirRequest::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dfsFuse.OpenDirRequest.name)
}
 void OpenDirRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dfsFuse.OpenDirRequest.name)
}
 ::std::string* OpenDirRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:dfsFuse.OpenDirRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* OpenDirRequest::release_name() {
  // @@protoc_insertion_point(field_release:dfsFuse.OpenDirRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void OpenDirRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:dfsFuse.OpenDirRequest.name)
}

// optional .dfsFuse.ClientInfo info = 2;
bool OpenDirRequest::has_info() const {
  return !_is_default_instance_ && info_ != NULL;
}
void OpenDirRequest::clear_info() {
  if (GetArenaNoVirtual() == NULL && info_ != NULL) delete info_;
  info_ = NULL;
}
const ::dfsFuse::ClientInfo& OpenDirRequest::info() const {
  // @@protoc_insertion_point(field_get:dfsFuse.OpenDirRequest.info)
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
::dfsFuse::ClientInfo* OpenDirRequest::mutable_info() {
  
  if (info_ == NULL) {
    info_ = new ::dfsFuse::ClientInfo;
  }
  // @@protoc_insertion_point(field_mutable:dfsFuse.OpenDirRequest.info)
  return info_;
}
::dfsFuse::ClientInfo* OpenDirRequest::release_info() {
  // @@protoc_insertion_point(field_release:dfsFuse.OpenDirRequest.info)
  
  ::dfsFuse::ClientInfo* temp = info_;
  info_ = NULL;
  return temp;
}
void OpenDirRequest::set_allocated_info(::dfsFuse::ClientInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dfsFuse.OpenDirRequest.info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DirEntry::kNameFieldNumber;
const int DirEntry::kInoFieldNumber;
const int DirEntry::kModeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DirEntry::DirEntry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dfsFuse.DirEntry)
}

void DirEntry::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

DirEntry::DirEntry(const DirEntry& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dfsFuse.DirEntry)
}

void DirEntry::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ino_ = GOOGLE_ULONGLONG(0);
  mode_ = GOOGLE_ULONGLONG(0);
}

DirEntry::~DirEntry() {
  // @@protoc_insertion_point(destructor:dfsFuse.DirEntry)
  SharedDtor();
}

void DirEntry::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void DirEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DirEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DirEntry_descriptor_;
}

const DirEntry& DirEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fileserver_2eproto();
  return *default_instance_;
}

DirEntry* DirEntry::default_instance_ = NULL;

DirEntry* DirEntry::New(::google::protobuf::Arena* arena) const {
  DirEntry* n = new DirEntry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DirEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:dfsFuse.DirEntry)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(DirEntry, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DirEntry*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(ino_, mode_);
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool DirEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dfsFuse.DirEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dfsFuse.DirEntry.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ino;
        break;
      }

      // optional uint64 ino = 2;
      case 2: {
        if (tag == 16) {
         parse_ino:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ino_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mode;
        break;
      }

      // optional uint64 mode = 3;
      case 3: {
        if (tag == 24) {
         parse_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mode_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dfsFuse.DirEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dfsFuse.DirEntry)
  return false;
#undef DO_
}

void DirEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dfsFuse.DirEntry)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dfsFuse.DirEntry.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional uint64 ino = 2;
  if (this->ino() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->ino(), output);
  }

  // optional uint64 mode = 3;
  if (this->mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->mode(), output);
  }

  // @@protoc_insertion_point(serialize_end:dfsFuse.DirEntry)
}

::google::protobuf::uint8* DirEntry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dfsFuse.DirEntry)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dfsFuse.DirEntry.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional uint64 ino = 2;
  if (this->ino() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->ino(), target);
  }

  // optional uint64 mode = 3;
  if (this->mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->mode(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dfsFuse.DirEntry)
  return target;
}

int DirEntry::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dfsFuse.DirEntry)
  int total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional uint64 ino = 2;
  if (this->ino() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ino());
  }

  // optional uint64 mode = 3;
  if (this->mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->mode());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DirEntry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dfsFuse.DirEntry)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DirEntry* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DirEntry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dfsFuse.DirEntry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dfsFuse.DirEntry)
    MergeFrom(*source);
  }
}

void DirEntry::MergeFrom(const DirEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dfsFuse.DirEntry)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.ino() != 0) {
    set_ino(from.ino());
  }
  if (from.mode() != 0) {
    set_mode(from.mode());
  }
}

void DirEntry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dfsFuse.DirEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DirEntry::CopyFrom(const DirEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dfsFuse.DirEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DirEntry::IsInitialized() const {

  return true;
}

void DirEntry::Swap(DirEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DirEntry::InternalSwap(DirEntry* other) {
  name_.Swap(&other->name_);
  std::swap(ino_, other->ino_);
  std::swap(mode_, other->mode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DirEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DirEntry_descriptor_;
  metadata.reflection = DirEntry_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DirEntry

// optional string name = 1;
void DirEntry::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& DirEntry::name() const {
  // @@protoc_insertion_point(field_get:dfsFuse.DirEntry.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DirEntry::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dfsFuse.DirEntry.name)
}
 void DirEntry::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dfsFuse.DirEntry.name)
}
 void DirEntry::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dfsFuse.DirEntry.name)
}
 ::std::string* DirEntry::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:dfsFuse.DirEntry.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DirEntry::release_name() {
  // @@protoc_insertion_point(field_release:dfsFuse.DirEntry.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DirEntry::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:dfsFuse.DirEntry.name)
}

// optional uint64 ino = 2;
void DirEntry::clear_ino() {
  ino_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 DirEntry::ino() const {
  // @@protoc_insertion_point(field_get:dfsFuse.DirEntry.ino)
  return ino_;
}
 void DirEntry::set_ino(::google::protobuf::uint64 value) {
  
  ino_ = value;
  // @@protoc_insertion_point(field_set:dfsFuse.DirEntry.ino)
}

// optional uint64 mode = 3;
void DirEntry::clear_mode() {
  mode_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 DirEntry::mode() const {
  // @@protoc_insertion_point(field_get:dfsFuse.DirEntry.mode)
  return mode_;
}
 void DirEntry::set_mode(::google::protobuf::uint64 value) {
  
  mode_ = value;
  // @@protoc_insertion_point(field_set:dfsFuse.DirEntry.mode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OpenDirResponse::kDirsFieldNumber;
const int OpenDirResponse::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OpenDirResponse::OpenDirResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dfsFuse.OpenDirResponse)
}

void OpenDirResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  status_ = const_cast< ::dfsFuse::FSstatus*>(&::dfsFuse::FSstatus::default_instance());
}

OpenDirResponse::OpenDirResponse(const OpenDirResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dfsFuse.OpenDirResponse)
}

void OpenDirResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  status_ = NULL;
}

OpenDirResponse::~OpenDirResponse() {
  // @@protoc_insertion_point(destructor:dfsFuse.OpenDirResponse)
  SharedDtor();
}

void OpenDirResponse::SharedDtor() {
  if (this != default_instance_) {
    delete status_;
  }
}

void OpenDirResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpenDirResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpenDirResponse_descriptor_;
}

const OpenDirResponse& OpenDirResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fileserver_2eproto();
  return *default_instance_;
}

OpenDirResponse* OpenDirResponse::default_instance_ = NULL;

OpenDirResponse* OpenDirResponse::New(::google::protobuf::Arena* arena) const {
  OpenDirResponse* n = new OpenDirResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OpenDirResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dfsFuse.OpenDirResponse)
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
  dirs_.Clear();
}

bool OpenDirResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dfsFuse.OpenDirResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .dfsFuse.DirEntry dirs = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_dirs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_dirs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_dirs;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(18)) goto parse_status;
        break;
      }

      // optional .dfsFuse.FSstatus status = 2;
      case 2: {
        if (tag == 18) {
         parse_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dfsFuse.OpenDirResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dfsFuse.OpenDirResponse)
  return false;
#undef DO_
}

void OpenDirResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dfsFuse.OpenDirResponse)
  // repeated .dfsFuse.DirEntry dirs = 1;
  for (unsigned int i = 0, n = this->dirs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->dirs(i), output);
  }

  // optional .dfsFuse.FSstatus status = 2;
  if (this->has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->status_, output);
  }

  // @@protoc_insertion_point(serialize_end:dfsFuse.OpenDirResponse)
}

::google::protobuf::uint8* OpenDirResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dfsFuse.OpenDirResponse)
  // repeated .dfsFuse.DirEntry dirs = 1;
  for (unsigned int i = 0, n = this->dirs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->dirs(i), false, target);
  }

  // optional .dfsFuse.FSstatus status = 2;
  if (this->has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->status_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dfsFuse.OpenDirResponse)
  return target;
}

int OpenDirResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dfsFuse.OpenDirResponse)
  int total_size = 0;

  // optional .dfsFuse.FSstatus status = 2;
  if (this->has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->status_);
  }

  // repeated .dfsFuse.DirEntry dirs = 1;
  total_size += 1 * this->dirs_size();
  for (int i = 0; i < this->dirs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dirs(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenDirResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dfsFuse.OpenDirResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const OpenDirResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const OpenDirResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dfsFuse.OpenDirResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dfsFuse.OpenDirResponse)
    MergeFrom(*source);
  }
}

void OpenDirResponse::MergeFrom(const OpenDirResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dfsFuse.OpenDirResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  dirs_.MergeFrom(from.dirs_);
  if (from.has_status()) {
    mutable_status()->::dfsFuse::FSstatus::MergeFrom(from.status());
  }
}

void OpenDirResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dfsFuse.OpenDirResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenDirResponse::CopyFrom(const OpenDirResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dfsFuse.OpenDirResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenDirResponse::IsInitialized() const {

  return true;
}

void OpenDirResponse::Swap(OpenDirResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OpenDirResponse::InternalSwap(OpenDirResponse* other) {
  dirs_.UnsafeArenaSwap(&other->dirs_);
  std::swap(status_, other->status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OpenDirResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpenDirResponse_descriptor_;
  metadata.reflection = OpenDirResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OpenDirResponse

// repeated .dfsFuse.DirEntry dirs = 1;
int OpenDirResponse::dirs_size() const {
  return dirs_.size();
}
void OpenDirResponse::clear_dirs() {
  dirs_.Clear();
}
const ::dfsFuse::DirEntry& OpenDirResponse::dirs(int index) const {
  // @@protoc_insertion_point(field_get:dfsFuse.OpenDirResponse.dirs)
  return dirs_.Get(index);
}
::dfsFuse::DirEntry* OpenDirResponse::mutable_dirs(int index) {
  // @@protoc_insertion_point(field_mutable:dfsFuse.OpenDirResponse.dirs)
  return dirs_.Mutable(index);
}
::dfsFuse::DirEntry* OpenDirResponse::add_dirs() {
  // @@protoc_insertion_point(field_add:dfsFuse.OpenDirResponse.dirs)
  return dirs_.Add();
}
::google::protobuf::RepeatedPtrField< ::dfsFuse::DirEntry >*
OpenDirResponse::mutable_dirs() {
  // @@protoc_insertion_point(field_mutable_list:dfsFuse.OpenDirResponse.dirs)
  return &dirs_;
}
const ::google::protobuf::RepeatedPtrField< ::dfsFuse::DirEntry >&
OpenDirResponse::dirs() const {
  // @@protoc_insertion_point(field_list:dfsFuse.OpenDirResponse.dirs)
  return dirs_;
}

// optional .dfsFuse.FSstatus status = 2;
bool OpenDirResponse::has_status() const {
  return !_is_default_instance_ && status_ != NULL;
}
void OpenDirResponse::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}
const ::dfsFuse::FSstatus& OpenDirResponse::status() const {
  // @@protoc_insertion_point(field_get:dfsFuse.OpenDirResponse.status)
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
::dfsFuse::FSstatus* OpenDirResponse::mutable_status() {
  
  if (status_ == NULL) {
    status_ = new ::dfsFuse::FSstatus;
  }
  // @@protoc_insertion_point(field_mutable:dfsFuse.OpenDirResponse.status)
  return status_;
}
::dfsFuse::FSstatus* OpenDirResponse::release_status() {
  // @@protoc_insertion_point(field_release:dfsFuse.OpenDirResponse.status)
  
  ::dfsFuse::FSstatus* temp = status_;
  status_ = NULL;
  return temp;
}
void OpenDirResponse::set_allocated_status(::dfsFuse::FSstatus* status) {
  delete status_;
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dfsFuse.OpenDirResponse.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MknodRequest::kNameFieldNumber;
const int MknodRequest::kModeFieldNumber;
const int MknodRequest::kDevFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MknodRequest::MknodRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dfsFuse.MknodRequest)
}

void MknodRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MknodRequest::MknodRequest(const MknodRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dfsFuse.MknodRequest)
}

void MknodRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mode_ = GOOGLE_ULONGLONG(0);
  dev_ = GOOGLE_ULONGLONG(0);
}

MknodRequest::~MknodRequest() {
  // @@protoc_insertion_point(destructor:dfsFuse.MknodRequest)
  SharedDtor();
}

void MknodRequest::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void MknodRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MknodRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MknodRequest_descriptor_;
}

const MknodRequest& MknodRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fileserver_2eproto();
  return *default_instance_;
}

MknodRequest* MknodRequest::default_instance_ = NULL;

MknodRequest* MknodRequest::New(::google::protobuf::Arena* arena) const {
  MknodRequest* n = new MknodRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MknodRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dfsFuse.MknodRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MknodRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MknodRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mode_, dev_);
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool MknodRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dfsFuse.MknodRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dfsFuse.MknodRequest.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mode;
        break;
      }

      // optional uint64 mode = 2;
      case 2: {
        if (tag == 16) {
         parse_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mode_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_dev;
        break;
      }

      // optional uint64 dev = 3;
      case 3: {
        if (tag == 24) {
         parse_dev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dev_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dfsFuse.MknodRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dfsFuse.MknodRequest)
  return false;
#undef DO_
}

void MknodRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dfsFuse.MknodRequest)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dfsFuse.MknodRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional uint64 mode = 2;
  if (this->mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->mode(), output);
  }

  // optional uint64 dev = 3;
  if (this->dev() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->dev(), output);
  }

  // @@protoc_insertion_point(serialize_end:dfsFuse.MknodRequest)
}

::google::protobuf::uint8* MknodRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dfsFuse.MknodRequest)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dfsFuse.MknodRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional uint64 mode = 2;
  if (this->mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->mode(), target);
  }

  // optional uint64 dev = 3;
  if (this->dev() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->dev(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dfsFuse.MknodRequest)
  return target;
}

int MknodRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dfsFuse.MknodRequest)
  int total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional uint64 mode = 2;
  if (this->mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->mode());
  }

  // optional uint64 dev = 3;
  if (this->dev() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->dev());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MknodRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dfsFuse.MknodRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MknodRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MknodRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dfsFuse.MknodRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dfsFuse.MknodRequest)
    MergeFrom(*source);
  }
}

void MknodRequest::MergeFrom(const MknodRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dfsFuse.MknodRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.mode() != 0) {
    set_mode(from.mode());
  }
  if (from.dev() != 0) {
    set_dev(from.dev());
  }
}

void MknodRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dfsFuse.MknodRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MknodRequest::CopyFrom(const MknodRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dfsFuse.MknodRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MknodRequest::IsInitialized() const {

  return true;
}

void MknodRequest::Swap(MknodRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MknodRequest::InternalSwap(MknodRequest* other) {
  name_.Swap(&other->name_);
  std::swap(mode_, other->mode_);
  std::swap(dev_, other->dev_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MknodRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MknodRequest_descriptor_;
  metadata.reflection = MknodRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MknodRequest

// optional string name = 1;
void MknodRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MknodRequest::name() const {
  // @@protoc_insertion_point(field_get:dfsFuse.MknodRequest.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MknodRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dfsFuse.MknodRequest.name)
}
 void MknodRequest::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dfsFuse.MknodRequest.name)
}
 void MknodRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dfsFuse.MknodRequest.name)
}
 ::std::string* MknodRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:dfsFuse.MknodRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MknodRequest::release_name() {
  // @@protoc_insertion_point(field_release:dfsFuse.MknodRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MknodRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:dfsFuse.MknodRequest.name)
}

// optional uint64 mode = 2;
void MknodRequest::clear_mode() {
  mode_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 MknodRequest::mode() const {
  // @@protoc_insertion_point(field_get:dfsFuse.MknodRequest.mode)
  return mode_;
}
 void MknodRequest::set_mode(::google::protobuf::uint64 value) {
  
  mode_ = value;
  // @@protoc_insertion_point(field_set:dfsFuse.MknodRequest.mode)
}

// optional uint64 dev = 3;
void MknodRequest::clear_dev() {
  dev_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 MknodRequest::dev() const {
  // @@protoc_insertion_point(field_get:dfsFuse.MknodRequest.dev)
  return dev_;
}
 void MknodRequest::set_dev(::google::protobuf::uint64 value) {
  
  dev_ = value;
  // @@protoc_insertion_point(field_set:dfsFuse.MknodRequest.dev)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MknodResponse::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MknodResponse::MknodResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dfsFuse.MknodResponse)
}

void MknodResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  status_ = const_cast< ::dfsFuse::FSstatus*>(&::dfsFuse::FSstatus::default_instance());
}

MknodResponse::MknodResponse(const MknodResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dfsFuse.MknodResponse)
}

void MknodResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  status_ = NULL;
}

MknodResponse::~MknodResponse() {
  // @@protoc_insertion_point(destructor:dfsFuse.MknodResponse)
  SharedDtor();
}

void MknodResponse::SharedDtor() {
  if (this != default_instance_) {
    delete status_;
  }
}

void MknodResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MknodResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MknodResponse_descriptor_;
}

const MknodResponse& MknodResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fileserver_2eproto();
  return *default_instance_;
}

MknodResponse* MknodResponse::default_instance_ = NULL;

MknodResponse* MknodResponse::New(::google::protobuf::Arena* arena) const {
  MknodResponse* n = new MknodResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MknodResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dfsFuse.MknodResponse)
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}

bool MknodResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dfsFuse.MknodResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dfsFuse.FSstatus status = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dfsFuse.MknodResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dfsFuse.MknodResponse)
  return false;
#undef DO_
}

void MknodResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dfsFuse.MknodResponse)
  // optional .dfsFuse.FSstatus status = 1;
  if (this->has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->status_, output);
  }

  // @@protoc_insertion_point(serialize_end:dfsFuse.MknodResponse)
}

::google::protobuf::uint8* MknodResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dfsFuse.MknodResponse)
  // optional .dfsFuse.FSstatus status = 1;
  if (this->has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->status_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dfsFuse.MknodResponse)
  return target;
}

int MknodResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dfsFuse.MknodResponse)
  int total_size = 0;

  // optional .dfsFuse.FSstatus status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->status_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MknodResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dfsFuse.MknodResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MknodResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MknodResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dfsFuse.MknodResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dfsFuse.MknodResponse)
    MergeFrom(*source);
  }
}

void MknodResponse::MergeFrom(const MknodResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dfsFuse.MknodResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_status()) {
    mutable_status()->::dfsFuse::FSstatus::MergeFrom(from.status());
  }
}

void MknodResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dfsFuse.MknodResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MknodResponse::CopyFrom(const MknodResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dfsFuse.MknodResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MknodResponse::IsInitialized() const {

  return true;
}

void MknodResponse::Swap(MknodResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MknodResponse::InternalSwap(MknodResponse* other) {
  std::swap(status_, other->status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MknodResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MknodResponse_descriptor_;
  metadata.reflection = MknodResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MknodResponse

// optional .dfsFuse.FSstatus status = 1;
bool MknodResponse::has_status() const {
  return !_is_default_instance_ && status_ != NULL;
}
void MknodResponse::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}
const ::dfsFuse::FSstatus& MknodResponse::status() const {
  // @@protoc_insertion_point(field_get:dfsFuse.MknodResponse.status)
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
::dfsFuse::FSstatus* MknodResponse::mutable_status() {
  
  if (status_ == NULL) {
    status_ = new ::dfsFuse::FSstatus;
  }
  // @@protoc_insertion_point(field_mutable:dfsFuse.MknodResponse.status)
  return status_;
}
::dfsFuse::FSstatus* MknodResponse::release_status() {
  // @@protoc_insertion_point(field_release:dfsFuse.MknodResponse.status)
  
  ::dfsFuse::FSstatus* temp = status_;
  status_ = NULL;
  return temp;
}
void MknodResponse::set_allocated_status(::dfsFuse::FSstatus* status) {
  delete status_;
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dfsFuse.MknodResponse.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OpenRequest::kNameFieldNumber;
const int OpenRequest::kFlagsFieldNumber;
const int OpenRequest::kInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OpenRequest::OpenRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dfsFuse.OpenRequest)
}

void OpenRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  info_ = const_cast< ::dfsFuse::ClientInfo*>(&::dfsFuse::ClientInfo::default_instance());
}

OpenRequest::OpenRequest(const OpenRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dfsFuse.OpenRequest)
}

void OpenRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  flags_ = 0u;
  info_ = NULL;
}

OpenRequest::~OpenRequest() {
  // @@protoc_insertion_point(destructor:dfsFuse.OpenRequest)
  SharedDtor();
}

void OpenRequest::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete info_;
  }
}

void OpenRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpenRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpenRequest_descriptor_;
}

const OpenRequest& OpenRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fileserver_2eproto();
  return *default_instance_;
}

OpenRequest* OpenRequest::default_instance_ = NULL;

OpenRequest* OpenRequest::New(::google::protobuf::Arena* arena) const {
  OpenRequest* n = new OpenRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OpenRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dfsFuse.OpenRequest)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  flags_ = 0u;
  if (GetArenaNoVirtual() == NULL && info_ != NULL) delete info_;
  info_ = NULL;
}

bool OpenRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dfsFuse.OpenRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dfsFuse.OpenRequest.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_flags;
        break;
      }

      // optional uint32 flags = 2;
      case 2: {
        if (tag == 16) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_info;
        break;
      }

      // optional .dfsFuse.ClientInfo info = 3;
      case 3: {
        if (tag == 26) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dfsFuse.OpenRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dfsFuse.OpenRequest)
  return false;
#undef DO_
}

void OpenRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dfsFuse.OpenRequest)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dfsFuse.OpenRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional uint32 flags = 2;
  if (this->flags() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->flags(), output);
  }

  // optional .dfsFuse.ClientInfo info = 3;
  if (this->has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->info_, output);
  }

  // @@protoc_insertion_point(serialize_end:dfsFuse.OpenRequest)
}

::google::protobuf::uint8* OpenRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dfsFuse.OpenRequest)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dfsFuse.OpenRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional uint32 flags = 2;
  if (this->flags() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->flags(), target);
  }

  // optional .dfsFuse.ClientInfo info = 3;
  if (this->has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->info_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dfsFuse.OpenRequest)
  return target;
}

int OpenRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dfsFuse.OpenRequest)
  int total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional uint32 flags = 2;
  if (this->flags() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->flags());
  }

  // optional .dfsFuse.ClientInfo info = 3;
  if (this->has_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->info_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dfsFuse.OpenRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const OpenRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const OpenRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dfsFuse.OpenRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dfsFuse.OpenRequest)
    MergeFrom(*source);
  }
}

void OpenRequest::MergeFrom(const OpenRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dfsFuse.OpenRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.flags() != 0) {
    set_flags(from.flags());
  }
  if (from.has_info()) {
    mutable_info()->::dfsFuse::ClientInfo::MergeFrom(from.info());
  }
}

void OpenRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dfsFuse.OpenRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenRequest::CopyFrom(const OpenRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dfsFuse.OpenRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenRequest::IsInitialized() const {

  return true;
}

void OpenRequest::Swap(OpenRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OpenRequest::InternalSwap(OpenRequest* other) {
  name_.Swap(&other->name_);
  std::swap(flags_, other->flags_);
  std::swap(info_, other->info_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OpenRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpenRequest_descriptor_;
  metadata.reflection = OpenRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OpenRequest

// optional string name = 1;
void OpenRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& OpenRequest::name() const {
  // @@protoc_insertion_point(field_get:dfsFuse.OpenRequest.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void OpenRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dfsFuse.OpenRequest.name)
}
 void OpenRequest::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dfsFuse.OpenRequest.name)
}
 void OpenRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dfsFuse.OpenRequest.name)
}
 ::std::string* OpenRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:dfsFuse.OpenRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* OpenRequest::release_name() {
  // @@protoc_insertion_point(field_release:dfsFuse.OpenRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void OpenRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:dfsFuse.OpenRequest.name)
}

// optional uint32 flags = 2;
void OpenRequest::clear_flags() {
  flags_ = 0u;
}
 ::google::protobuf::uint32 OpenRequest::flags() const {
  // @@protoc_insertion_point(field_get:dfsFuse.OpenRequest.flags)
  return flags_;
}
 void OpenRequest::set_flags(::google::protobuf::uint32 value) {
  
  flags_ = value;
  // @@protoc_insertion_point(field_set:dfsFuse.OpenRequest.flags)
}

// optional .dfsFuse.ClientInfo info = 3;
bool OpenRequest::has_info() const {
  return !_is_default_instance_ && info_ != NULL;
}
void OpenRequest::clear_info() {
  if (GetArenaNoVirtual() == NULL && info_ != NULL) delete info_;
  info_ = NULL;
}
const ::dfsFuse::ClientInfo& OpenRequest::info() const {
  // @@protoc_insertion_point(field_get:dfsFuse.OpenRequest.info)
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
::dfsFuse::ClientInfo* OpenRequest::mutable_info() {
  
  if (info_ == NULL) {
    info_ = new ::dfsFuse::ClientInfo;
  }
  // @@protoc_insertion_point(field_mutable:dfsFuse.OpenRequest.info)
  return info_;
}
::dfsFuse::ClientInfo* OpenRequest::release_info() {
  // @@protoc_insertion_point(field_release:dfsFuse.OpenRequest.info)
  
  ::dfsFuse::ClientInfo* temp = info_;
  info_ = NULL;
  return temp;
}
void OpenRequest::set_allocated_info(::dfsFuse::ClientInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dfsFuse.OpenRequest.info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OpenResponse::kFileHandleFieldNumber;
const int OpenResponse::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OpenResponse::OpenResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dfsFuse.OpenResponse)
}

void OpenResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  status_ = const_cast< ::dfsFuse::FSstatus*>(&::dfsFuse::FSstatus::default_instance());
}

OpenResponse::OpenResponse(const OpenResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dfsFuse.OpenResponse)
}

void OpenResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  filehandle_ = 0u;
  status_ = NULL;
}

OpenResponse::~OpenResponse() {
  // @@protoc_insertion_point(destructor:dfsFuse.OpenResponse)
  SharedDtor();
}

void OpenResponse::SharedDtor() {
  if (this != default_instance_) {
    delete status_;
  }
}

void OpenResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpenResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpenResponse_descriptor_;
}

const OpenResponse& OpenResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fileserver_2eproto();
  return *default_instance_;
}

OpenResponse* OpenResponse::default_instance_ = NULL;

OpenResponse* OpenResponse::New(::google::protobuf::Arena* arena) const {
  OpenResponse* n = new OpenResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OpenResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dfsFuse.OpenResponse)
  filehandle_ = 0u;
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}

bool OpenResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dfsFuse.OpenResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fileHandle = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &filehandle_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_status;
        break;
      }

      // optional .dfsFuse.FSstatus status = 2;
      case 2: {
        if (tag == 18) {
         parse_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dfsFuse.OpenResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dfsFuse.OpenResponse)
  return false;
#undef DO_
}

void OpenResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dfsFuse.OpenResponse)
  // optional uint32 fileHandle = 1;
  if (this->filehandle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->filehandle(), output);
  }

  // optional .dfsFuse.FSstatus status = 2;
  if (this->has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->status_, output);
  }

  // @@protoc_insertion_point(serialize_end:dfsFuse.OpenResponse)
}

::google::protobuf::uint8* OpenResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dfsFuse.OpenResponse)
  // optional uint32 fileHandle = 1;
  if (this->filehandle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->filehandle(), target);
  }

  // optional .dfsFuse.FSstatus status = 2;
  if (this->has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->status_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dfsFuse.OpenResponse)
  return target;
}

int OpenResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dfsFuse.OpenResponse)
  int total_size = 0;

  // optional uint32 fileHandle = 1;
  if (this->filehandle() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->filehandle());
  }

  // optional .dfsFuse.FSstatus status = 2;
  if (this->has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->status_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dfsFuse.OpenResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const OpenResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const OpenResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dfsFuse.OpenResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dfsFuse.OpenResponse)
    MergeFrom(*source);
  }
}

void OpenResponse::MergeFrom(const OpenResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dfsFuse.OpenResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.filehandle() != 0) {
    set_filehandle(from.filehandle());
  }
  if (from.has_status()) {
    mutable_status()->::dfsFuse::FSstatus::MergeFrom(from.status());
  }
}

void OpenResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dfsFuse.OpenResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenResponse::CopyFrom(const OpenResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dfsFuse.OpenResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenResponse::IsInitialized() const {

  return true;
}

void OpenResponse::Swap(OpenResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OpenResponse::InternalSwap(OpenResponse* other) {
  std::swap(filehandle_, other->filehandle_);
  std::swap(status_, other->status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OpenResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpenResponse_descriptor_;
  metadata.reflection = OpenResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OpenResponse

// optional uint32 fileHandle = 1;
void OpenResponse::clear_filehandle() {
  filehandle_ = 0u;
}
 ::google::protobuf::uint32 OpenResponse::filehandle() const {
  // @@protoc_insertion_point(field_get:dfsFuse.OpenResponse.fileHandle)
  return filehandle_;
}
 void OpenResponse::set_filehandle(::google::protobuf::uint32 value) {
  
  filehandle_ = value;
  // @@protoc_insertion_point(field_set:dfsFuse.OpenResponse.fileHandle)
}

// optional .dfsFuse.FSstatus status = 2;
bool OpenResponse::has_status() const {
  return !_is_default_instance_ && status_ != NULL;
}
void OpenResponse::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}
const ::dfsFuse::FSstatus& OpenResponse::status() const {
  // @@protoc_insertion_point(field_get:dfsFuse.OpenResponse.status)
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
::dfsFuse::FSstatus* OpenResponse::mutable_status() {
  
  if (status_ == NULL) {
    status_ = new ::dfsFuse::FSstatus;
  }
  // @@protoc_insertion_point(field_mutable:dfsFuse.OpenResponse.status)
  return status_;
}
::dfsFuse::FSstatus* OpenResponse::release_status() {
  // @@protoc_insertion_point(field_release:dfsFuse.OpenResponse.status)
  
  ::dfsFuse::FSstatus* temp = status_;
  status_ = NULL;
  return temp;
}
void OpenResponse::set_allocated_status(::dfsFuse::FSstatus* status) {
  delete status_;
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dfsFuse.OpenResponse.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReadRequest::kFileHandleFieldNumber;
const int ReadRequest::kSizeFieldNumber;
const int ReadRequest::kOffsetFieldNumber;
const int ReadRequest::kInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReadRequest::ReadRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dfsFuse.ReadRequest)
}

void ReadRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  info_ = const_cast< ::dfsFuse::ClientInfo*>(&::dfsFuse::ClientInfo::default_instance());
}

ReadRequest::ReadRequest(const ReadRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dfsFuse.ReadRequest)
}

void ReadRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  filehandle_ = 0u;
  size_ = 0u;
  offset_ = 0u;
  info_ = NULL;
}

ReadRequest::~ReadRequest() {
  // @@protoc_insertion_point(destructor:dfsFuse.ReadRequest)
  SharedDtor();
}

void ReadRequest::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void ReadRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReadRequest_descriptor_;
}

const ReadRequest& ReadRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fileserver_2eproto();
  return *default_instance_;
}

ReadRequest* ReadRequest::default_instance_ = NULL;

ReadRequest* ReadRequest::New(::google::protobuf::Arena* arena) const {
  ReadRequest* n = new ReadRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReadRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dfsFuse.ReadRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ReadRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ReadRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(filehandle_, size_);
  offset_ = 0u;
  if (GetArenaNoVirtual() == NULL && info_ != NULL) delete info_;
  info_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool ReadRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dfsFuse.ReadRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fileHandle = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &filehandle_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_size;
        break;
      }

      // optional uint32 size = 2;
      case 2: {
        if (tag == 16) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &size_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_offset;
        break;
      }

      // optional uint32 offset = 3;
      case 3: {
        if (tag == 24) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offset_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_info;
        break;
      }

      // optional .dfsFuse.ClientInfo info = 4;
      case 4: {
        if (tag == 34) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dfsFuse.ReadRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dfsFuse.ReadRequest)
  return false;
#undef DO_
}

void ReadRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dfsFuse.ReadRequest)
  // optional uint32 fileHandle = 1;
  if (this->filehandle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->filehandle(), output);
  }

  // optional uint32 size = 2;
  if (this->size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->size(), output);
  }

  // optional uint32 offset = 3;
  if (this->offset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->offset(), output);
  }

  // optional .dfsFuse.ClientInfo info = 4;
  if (this->has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->info_, output);
  }

  // @@protoc_insertion_point(serialize_end:dfsFuse.ReadRequest)
}

::google::protobuf::uint8* ReadRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dfsFuse.ReadRequest)
  // optional uint32 fileHandle = 1;
  if (this->filehandle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->filehandle(), target);
  }

  // optional uint32 size = 2;
  if (this->size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->size(), target);
  }

  // optional uint32 offset = 3;
  if (this->offset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->offset(), target);
  }

  // optional .dfsFuse.ClientInfo info = 4;
  if (this->has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->info_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dfsFuse.ReadRequest)
  return target;
}

int ReadRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dfsFuse.ReadRequest)
  int total_size = 0;

  // optional uint32 fileHandle = 1;
  if (this->filehandle() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->filehandle());
  }

  // optional uint32 size = 2;
  if (this->size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->size());
  }

  // optional uint32 offset = 3;
  if (this->offset() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->offset());
  }

  // optional .dfsFuse.ClientInfo info = 4;
  if (this->has_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->info_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dfsFuse.ReadRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ReadRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ReadRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dfsFuse.ReadRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dfsFuse.ReadRequest)
    MergeFrom(*source);
  }
}

void ReadRequest::MergeFrom(const ReadRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dfsFuse.ReadRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.filehandle() != 0) {
    set_filehandle(from.filehandle());
  }
  if (from.size() != 0) {
    set_size(from.size());
  }
  if (from.offset() != 0) {
    set_offset(from.offset());
  }
  if (from.has_info()) {
    mutable_info()->::dfsFuse::ClientInfo::MergeFrom(from.info());
  }
}

void ReadRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dfsFuse.ReadRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadRequest::CopyFrom(const ReadRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dfsFuse.ReadRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadRequest::IsInitialized() const {

  return true;
}

void ReadRequest::Swap(ReadRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReadRequest::InternalSwap(ReadRequest* other) {
  std::swap(filehandle_, other->filehandle_);
  std::swap(size_, other->size_);
  std::swap(offset_, other->offset_);
  std::swap(info_, other->info_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReadRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReadRequest_descriptor_;
  metadata.reflection = ReadRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReadRequest

// optional uint32 fileHandle = 1;
void ReadRequest::clear_filehandle() {
  filehandle_ = 0u;
}
 ::google::protobuf::uint32 ReadRequest::filehandle() const {
  // @@protoc_insertion_point(field_get:dfsFuse.ReadRequest.fileHandle)
  return filehandle_;
}
 void ReadRequest::set_filehandle(::google::protobuf::uint32 value) {
  
  filehandle_ = value;
  // @@protoc_insertion_point(field_set:dfsFuse.ReadRequest.fileHandle)
}

// optional uint32 size = 2;
void ReadRequest::clear_size() {
  size_ = 0u;
}
 ::google::protobuf::uint32 ReadRequest::size() const {
  // @@protoc_insertion_point(field_get:dfsFuse.ReadRequest.size)
  return size_;
}
 void ReadRequest::set_size(::google::protobuf::uint32 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:dfsFuse.ReadRequest.size)
}

// optional uint32 offset = 3;
void ReadRequest::clear_offset() {
  offset_ = 0u;
}
 ::google::protobuf::uint32 ReadRequest::offset() const {
  // @@protoc_insertion_point(field_get:dfsFuse.ReadRequest.offset)
  return offset_;
}
 void ReadRequest::set_offset(::google::protobuf::uint32 value) {
  
  offset_ = value;
  // @@protoc_insertion_point(field_set:dfsFuse.ReadRequest.offset)
}

// optional .dfsFuse.ClientInfo info = 4;
bool ReadRequest::has_info() const {
  return !_is_default_instance_ && info_ != NULL;
}
void ReadRequest::clear_info() {
  if (GetArenaNoVirtual() == NULL && info_ != NULL) delete info_;
  info_ = NULL;
}
const ::dfsFuse::ClientInfo& ReadRequest::info() const {
  // @@protoc_insertion_point(field_get:dfsFuse.ReadRequest.info)
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
::dfsFuse::ClientInfo* ReadRequest::mutable_info() {
  
  if (info_ == NULL) {
    info_ = new ::dfsFuse::ClientInfo;
  }
  // @@protoc_insertion_point(field_mutable:dfsFuse.ReadRequest.info)
  return info_;
}
::dfsFuse::ClientInfo* ReadRequest::release_info() {
  // @@protoc_insertion_point(field_release:dfsFuse.ReadRequest.info)
  
  ::dfsFuse::ClientInfo* temp = info_;
  info_ = NULL;
  return temp;
}
void ReadRequest::set_allocated_info(::dfsFuse::ClientInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dfsFuse.ReadRequest.info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReadResponse::kDataReadFieldNumber;
const int ReadResponse::kDataFieldNumber;
const int ReadResponse::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReadResponse::ReadResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dfsFuse.ReadResponse)
}

void ReadResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  status_ = const_cast< ::dfsFuse::FSstatus*>(&::dfsFuse::FSstatus::default_instance());
}

ReadResponse::ReadResponse(const ReadResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dfsFuse.ReadResponse)
}

void ReadResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  dataread_ = 0;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = NULL;
}

ReadResponse::~ReadResponse() {
  // @@protoc_insertion_point(destructor:dfsFuse.ReadResponse)
  SharedDtor();
}

void ReadResponse::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete status_;
  }
}

void ReadResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReadResponse_descriptor_;
}

const ReadResponse& ReadResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fileserver_2eproto();
  return *default_instance_;
}

ReadResponse* ReadResponse::default_instance_ = NULL;

ReadResponse* ReadResponse::New(::google::protobuf::Arena* arena) const {
  ReadResponse* n = new ReadResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReadResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dfsFuse.ReadResponse)
  dataread_ = 0;
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}

bool ReadResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dfsFuse.ReadResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 dataRead = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dataread_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional bytes data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_status;
        break;
      }

      // optional .dfsFuse.FSstatus status = 3;
      case 3: {
        if (tag == 26) {
         parse_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dfsFuse.ReadResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dfsFuse.ReadResponse)
  return false;
#undef DO_
}

void ReadResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dfsFuse.ReadResponse)
  // optional int32 dataRead = 1;
  if (this->dataread() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dataread(), output);
  }

  // optional bytes data = 2;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  // optional .dfsFuse.FSstatus status = 3;
  if (this->has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->status_, output);
  }

  // @@protoc_insertion_point(serialize_end:dfsFuse.ReadResponse)
}

::google::protobuf::uint8* ReadResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dfsFuse.ReadResponse)
  // optional int32 dataRead = 1;
  if (this->dataread() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dataread(), target);
  }

  // optional bytes data = 2;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  // optional .dfsFuse.FSstatus status = 3;
  if (this->has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->status_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dfsFuse.ReadResponse)
  return target;
}

int ReadResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dfsFuse.ReadResponse)
  int total_size = 0;

  // optional int32 dataRead = 1;
  if (this->dataread() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dataread());
  }

  // optional bytes data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // optional .dfsFuse.FSstatus status = 3;
  if (this->has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->status_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dfsFuse.ReadResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ReadResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ReadResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dfsFuse.ReadResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dfsFuse.ReadResponse)
    MergeFrom(*source);
  }
}

void ReadResponse::MergeFrom(const ReadResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dfsFuse.ReadResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.dataread() != 0) {
    set_dataread(from.dataread());
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.has_status()) {
    mutable_status()->::dfsFuse::FSstatus::MergeFrom(from.status());
  }
}

void ReadResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dfsFuse.ReadResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadResponse::CopyFrom(const ReadResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dfsFuse.ReadResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadResponse::IsInitialized() const {

  return true;
}

void ReadResponse::Swap(ReadResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReadResponse::InternalSwap(ReadResponse* other) {
  std::swap(dataread_, other->dataread_);
  data_.Swap(&other->data_);
  std::swap(status_, other->status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReadResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReadResponse_descriptor_;
  metadata.reflection = ReadResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReadResponse

// optional int32 dataRead = 1;
void ReadResponse::clear_dataread() {
  dataread_ = 0;
}
 ::google::protobuf::int32 ReadResponse::dataread() const {
  // @@protoc_insertion_point(field_get:dfsFuse.ReadResponse.dataRead)
  return dataread_;
}
 void ReadResponse::set_dataread(::google::protobuf::int32 value) {
  
  dataread_ = value;
  // @@protoc_insertion_point(field_set:dfsFuse.ReadResponse.dataRead)
}

// optional bytes data = 2;
void ReadResponse::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ReadResponse::data() const {
  // @@protoc_insertion_point(field_get:dfsFuse.ReadResponse.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReadResponse::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dfsFuse.ReadResponse.data)
}
 void ReadResponse::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dfsFuse.ReadResponse.data)
}
 void ReadResponse::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dfsFuse.ReadResponse.data)
}
 ::std::string* ReadResponse::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:dfsFuse.ReadResponse.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ReadResponse::release_data() {
  // @@protoc_insertion_point(field_release:dfsFuse.ReadResponse.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReadResponse::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:dfsFuse.ReadResponse.data)
}

// optional .dfsFuse.FSstatus status = 3;
bool ReadResponse::has_status() const {
  return !_is_default_instance_ && status_ != NULL;
}
void ReadResponse::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}
const ::dfsFuse::FSstatus& ReadResponse::status() const {
  // @@protoc_insertion_point(field_get:dfsFuse.ReadResponse.status)
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
::dfsFuse::FSstatus* ReadResponse::mutable_status() {
  
  if (status_ == NULL) {
    status_ = new ::dfsFuse::FSstatus;
  }
  // @@protoc_insertion_point(field_mutable:dfsFuse.ReadResponse.status)
  return status_;
}
::dfsFuse::FSstatus* ReadResponse::release_status() {
  // @@protoc_insertion_point(field_release:dfsFuse.ReadResponse.status)
  
  ::dfsFuse::FSstatus* temp = status_;
  status_ = NULL;
  return temp;
}
void ReadResponse::set_allocated_status(::dfsFuse::FSstatus* status) {
  delete status_;
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dfsFuse.ReadResponse.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WriteRequest::kFileHandleFieldNumber;
const int WriteRequest::kDataFieldNumber;
const int WriteRequest::kSizeFieldNumber;
const int WriteRequest::kOffsetFieldNumber;
const int WriteRequest::kInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WriteRequest::WriteRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dfsFuse.WriteRequest)
}

void WriteRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  info_ = const_cast< ::dfsFuse::ClientInfo*>(&::dfsFuse::ClientInfo::default_instance());
}

WriteRequest::WriteRequest(const WriteRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dfsFuse.WriteRequest)
}

void WriteRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  filehandle_ = 0u;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  size_ = 0u;
  offset_ = 0u;
  info_ = NULL;
}

WriteRequest::~WriteRequest() {
  // @@protoc_insertion_point(destructor:dfsFuse.WriteRequest)
  SharedDtor();
}

void WriteRequest::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete info_;
  }
}

void WriteRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WriteRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WriteRequest_descriptor_;
}

const WriteRequest& WriteRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fileserver_2eproto();
  return *default_instance_;
}

WriteRequest* WriteRequest::default_instance_ = NULL;

WriteRequest* WriteRequest::New(::google::protobuf::Arena* arena) const {
  WriteRequest* n = new WriteRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WriteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dfsFuse.WriteRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(WriteRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<WriteRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(filehandle_, size_);
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  offset_ = 0u;
  if (GetArenaNoVirtual() == NULL && info_ != NULL) delete info_;
  info_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool WriteRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dfsFuse.WriteRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fileHandle = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &filehandle_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional bytes data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_size;
        break;
      }

      // optional uint32 size = 3;
      case 3: {
        if (tag == 24) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &size_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_offset;
        break;
      }

      // optional uint32 offset = 4;
      case 4: {
        if (tag == 32) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offset_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_info;
        break;
      }

      // optional .dfsFuse.ClientInfo info = 5;
      case 5: {
        if (tag == 42) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dfsFuse.WriteRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dfsFuse.WriteRequest)
  return false;
#undef DO_
}

void WriteRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dfsFuse.WriteRequest)
  // optional uint32 fileHandle = 1;
  if (this->filehandle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->filehandle(), output);
  }

  // optional bytes data = 2;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  // optional uint32 size = 3;
  if (this->size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->size(), output);
  }

  // optional uint32 offset = 4;
  if (this->offset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->offset(), output);
  }

  // optional .dfsFuse.ClientInfo info = 5;
  if (this->has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->info_, output);
  }

  // @@protoc_insertion_point(serialize_end:dfsFuse.WriteRequest)
}

::google::protobuf::uint8* WriteRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dfsFuse.WriteRequest)
  // optional uint32 fileHandle = 1;
  if (this->filehandle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->filehandle(), target);
  }

  // optional bytes data = 2;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  // optional uint32 size = 3;
  if (this->size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->size(), target);
  }

  // optional uint32 offset = 4;
  if (this->offset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->offset(), target);
  }

  // optional .dfsFuse.ClientInfo info = 5;
  if (this->has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->info_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dfsFuse.WriteRequest)
  return target;
}

int WriteRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dfsFuse.WriteRequest)
  int total_size = 0;

  // optional uint32 fileHandle = 1;
  if (this->filehandle() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->filehandle());
  }

  // optional bytes data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // optional uint32 size = 3;
  if (this->size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->size());
  }

  // optional uint32 offset = 4;
  if (this->offset() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->offset());
  }

  // optional .dfsFuse.ClientInfo info = 5;
  if (this->has_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->info_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WriteRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dfsFuse.WriteRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const WriteRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const WriteRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dfsFuse.WriteRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dfsFuse.WriteRequest)
    MergeFrom(*source);
  }
}

void WriteRequest::MergeFrom(const WriteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dfsFuse.WriteRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.filehandle() != 0) {
    set_filehandle(from.filehandle());
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.size() != 0) {
    set_size(from.size());
  }
  if (from.offset() != 0) {
    set_offset(from.offset());
  }
  if (from.has_info()) {
    mutable_info()->::dfsFuse::ClientInfo::MergeFrom(from.info());
  }
}

void WriteRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dfsFuse.WriteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WriteRequest::CopyFrom(const WriteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dfsFuse.WriteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteRequest::IsInitialized() const {

  return true;
}

void WriteRequest::Swap(WriteRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WriteRequest::InternalSwap(WriteRequest* other) {
  std::swap(filehandle_, other->filehandle_);
  data_.Swap(&other->data_);
  std::swap(size_, other->size_);
  std::swap(offset_, other->offset_);
  std::swap(info_, other->info_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WriteRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WriteRequest_descriptor_;
  metadata.reflection = WriteRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WriteRequest

// optional uint32 fileHandle = 1;
void WriteRequest::clear_filehandle() {
  filehandle_ = 0u;
}
 ::google::protobuf::uint32 WriteRequest::filehandle() const {
  // @@protoc_insertion_point(field_get:dfsFuse.WriteRequest.fileHandle)
  return filehandle_;
}
 void WriteRequest::set_filehandle(::google::protobuf::uint32 value) {
  
  filehandle_ = value;
  // @@protoc_insertion_point(field_set:dfsFuse.WriteRequest.fileHandle)
}

// optional bytes data = 2;
void WriteRequest::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& WriteRequest::data() const {
  // @@protoc_insertion_point(field_get:dfsFuse.WriteRequest.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WriteRequest::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dfsFuse.WriteRequest.data)
}
 void WriteRequest::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dfsFuse.WriteRequest.data)
}
 void WriteRequest::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dfsFuse.WriteRequest.data)
}
 ::std::string* WriteRequest::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:dfsFuse.WriteRequest.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* WriteRequest::release_data() {
  // @@protoc_insertion_point(field_release:dfsFuse.WriteRequest.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WriteRequest::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:dfsFuse.WriteRequest.data)
}

// optional uint32 size = 3;
void WriteRequest::clear_size() {
  size_ = 0u;
}
 ::google::protobuf::uint32 WriteRequest::size() const {
  // @@protoc_insertion_point(field_get:dfsFuse.WriteRequest.size)
  return size_;
}
 void WriteRequest::set_size(::google::protobuf::uint32 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:dfsFuse.WriteRequest.size)
}

// optional uint32 offset = 4;
void WriteRequest::clear_offset() {
  offset_ = 0u;
}
 ::google::protobuf::uint32 WriteRequest::offset() const {
  // @@protoc_insertion_point(field_get:dfsFuse.WriteRequest.offset)
  return offset_;
}
 void WriteRequest::set_offset(::google::protobuf::uint32 value) {
  
  offset_ = value;
  // @@protoc_insertion_point(field_set:dfsFuse.WriteRequest.offset)
}

// optional .dfsFuse.ClientInfo info = 5;
bool WriteRequest::has_info() const {
  return !_is_default_instance_ && info_ != NULL;
}
void WriteRequest::clear_info() {
  if (GetArenaNoVirtual() == NULL && info_ != NULL) delete info_;
  info_ = NULL;
}
const ::dfsFuse::ClientInfo& WriteRequest::info() const {
  // @@protoc_insertion_point(field_get:dfsFuse.WriteRequest.info)
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
::dfsFuse::ClientInfo* WriteRequest::mutable_info() {
  
  if (info_ == NULL) {
    info_ = new ::dfsFuse::ClientInfo;
  }
  // @@protoc_insertion_point(field_mutable:dfsFuse.WriteRequest.info)
  return info_;
}
::dfsFuse::ClientInfo* WriteRequest::release_info() {
  // @@protoc_insertion_point(field_release:dfsFuse.WriteRequest.info)
  
  ::dfsFuse::ClientInfo* temp = info_;
  info_ = NULL;
  return temp;
}
void WriteRequest::set_allocated_info(::dfsFuse::ClientInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dfsFuse.WriteRequest.info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WriteResponse::kDataWrittenFieldNumber;
const int WriteResponse::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WriteResponse::WriteResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dfsFuse.WriteResponse)
}

void WriteResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  status_ = const_cast< ::dfsFuse::FSstatus*>(&::dfsFuse::FSstatus::default_instance());
}

WriteResponse::WriteResponse(const WriteResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dfsFuse.WriteResponse)
}

void WriteResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  datawritten_ = 0;
  status_ = NULL;
}

WriteResponse::~WriteResponse() {
  // @@protoc_insertion_point(destructor:dfsFuse.WriteResponse)
  SharedDtor();
}

void WriteResponse::SharedDtor() {
  if (this != default_instance_) {
    delete status_;
  }
}

void WriteResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WriteResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WriteResponse_descriptor_;
}

const WriteResponse& WriteResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fileserver_2eproto();
  return *default_instance_;
}

WriteResponse* WriteResponse::default_instance_ = NULL;

WriteResponse* WriteResponse::New(::google::protobuf::Arena* arena) const {
  WriteResponse* n = new WriteResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WriteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dfsFuse.WriteResponse)
  datawritten_ = 0;
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}

bool WriteResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dfsFuse.WriteResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 dataWritten = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &datawritten_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_status;
        break;
      }

      // optional .dfsFuse.FSstatus status = 2;
      case 2: {
        if (tag == 18) {
         parse_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dfsFuse.WriteResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dfsFuse.WriteResponse)
  return false;
#undef DO_
}

void WriteResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dfsFuse.WriteResponse)
  // optional int32 dataWritten = 1;
  if (this->datawritten() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->datawritten(), output);
  }

  // optional .dfsFuse.FSstatus status = 2;
  if (this->has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->status_, output);
  }

  // @@protoc_insertion_point(serialize_end:dfsFuse.WriteResponse)
}

::google::protobuf::uint8* WriteResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dfsFuse.WriteResponse)
  // optional int32 dataWritten = 1;
  if (this->datawritten() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->datawritten(), target);
  }

  // optional .dfsFuse.FSstatus status = 2;
  if (this->has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->status_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dfsFuse.WriteResponse)
  return target;
}

int WriteResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dfsFuse.WriteResponse)
  int total_size = 0;

  // optional int32 dataWritten = 1;
  if (this->datawritten() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->datawritten());
  }

  // optional .dfsFuse.FSstatus status = 2;
  if (this->has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->status_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WriteResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dfsFuse.WriteResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const WriteResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const WriteResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dfsFuse.WriteResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dfsFuse.WriteResponse)
    MergeFrom(*source);
  }
}

void WriteResponse::MergeFrom(const WriteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dfsFuse.WriteResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.datawritten() != 0) {
    set_datawritten(from.datawritten());
  }
  if (from.has_status()) {
    mutable_status()->::dfsFuse::FSstatus::MergeFrom(from.status());
  }
}

void WriteResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dfsFuse.WriteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WriteResponse::CopyFrom(const WriteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dfsFuse.WriteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteResponse::IsInitialized() const {

  return true;
}

void WriteResponse::Swap(WriteResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WriteResponse::InternalSwap(WriteResponse* other) {
  std::swap(datawritten_, other->datawritten_);
  std::swap(status_, other->status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WriteResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WriteResponse_descriptor_;
  metadata.reflection = WriteResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WriteResponse

// optional int32 dataWritten = 1;
void WriteResponse::clear_datawritten() {
  datawritten_ = 0;
}
 ::google::protobuf::int32 WriteResponse::datawritten() const {
  // @@protoc_insertion_point(field_get:dfsFuse.WriteResponse.dataWritten)
  return datawritten_;
}
 void WriteResponse::set_datawritten(::google::protobuf::int32 value) {
  
  datawritten_ = value;
  // @@protoc_insertion_point(field_set:dfsFuse.WriteResponse.dataWritten)
}

// optional .dfsFuse.FSstatus status = 2;
bool WriteResponse::has_status() const {
  return !_is_default_instance_ && status_ != NULL;
}
void WriteResponse::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}
const ::dfsFuse::FSstatus& WriteResponse::status() const {
  // @@protoc_insertion_point(field_get:dfsFuse.WriteResponse.status)
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
::dfsFuse::FSstatus* WriteResponse::mutable_status() {
  
  if (status_ == NULL) {
    status_ = new ::dfsFuse::FSstatus;
  }
  // @@protoc_insertion_point(field_mutable:dfsFuse.WriteResponse.status)
  return status_;
}
::dfsFuse::FSstatus* WriteResponse::release_status() {
  // @@protoc_insertion_point(field_release:dfsFuse.WriteResponse.status)
  
  ::dfsFuse::FSstatus* temp = status_;
  status_ = NULL;
  return temp;
}
void WriteResponse::set_allocated_status(::dfsFuse::FSstatus* status) {
  delete status_;
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dfsFuse.WriteResponse.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UnlinkRequest::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UnlinkRequest::UnlinkRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dfsFuse.UnlinkRequest)
}

void UnlinkRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

UnlinkRequest::UnlinkRequest(const UnlinkRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dfsFuse.UnlinkRequest)
}

void UnlinkRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

UnlinkRequest::~UnlinkRequest() {
  // @@protoc_insertion_point(destructor:dfsFuse.UnlinkRequest)
  SharedDtor();
}

void UnlinkRequest::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void UnlinkRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnlinkRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnlinkRequest_descriptor_;
}

const UnlinkRequest& UnlinkRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fileserver_2eproto();
  return *default_instance_;
}

UnlinkRequest* UnlinkRequest::default_instance_ = NULL;

UnlinkRequest* UnlinkRequest::New(::google::protobuf::Arena* arena) const {
  UnlinkRequest* n = new UnlinkRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UnlinkRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dfsFuse.UnlinkRequest)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool UnlinkRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dfsFuse.UnlinkRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dfsFuse.UnlinkRequest.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dfsFuse.UnlinkRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dfsFuse.UnlinkRequest)
  return false;
#undef DO_
}

void UnlinkRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dfsFuse.UnlinkRequest)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dfsFuse.UnlinkRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // @@protoc_insertion_point(serialize_end:dfsFuse.UnlinkRequest)
}

::google::protobuf::uint8* UnlinkRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dfsFuse.UnlinkRequest)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dfsFuse.UnlinkRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dfsFuse.UnlinkRequest)
  return target;
}

int UnlinkRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dfsFuse.UnlinkRequest)
  int total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnlinkRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dfsFuse.UnlinkRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const UnlinkRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UnlinkRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dfsFuse.UnlinkRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dfsFuse.UnlinkRequest)
    MergeFrom(*source);
  }
}

void UnlinkRequest::MergeFrom(const UnlinkRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dfsFuse.UnlinkRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void UnlinkRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dfsFuse.UnlinkRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnlinkRequest::CopyFrom(const UnlinkRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dfsFuse.UnlinkRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnlinkRequest::IsInitialized() const {

  return true;
}

void UnlinkRequest::Swap(UnlinkRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UnlinkRequest::InternalSwap(UnlinkRequest* other) {
  name_.Swap(&other->name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UnlinkRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnlinkRequest_descriptor_;
  metadata.reflection = UnlinkRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UnlinkRequest

// optional string name = 1;
void UnlinkRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& UnlinkRequest::name() const {
  // @@protoc_insertion_point(field_get:dfsFuse.UnlinkRequest.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UnlinkRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dfsFuse.UnlinkRequest.name)
}
 void UnlinkRequest::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dfsFuse.UnlinkRequest.name)
}
 void UnlinkRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dfsFuse.UnlinkRequest.name)
}
 ::std::string* UnlinkRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:dfsFuse.UnlinkRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UnlinkRequest::release_name() {
  // @@protoc_insertion_point(field_release:dfsFuse.UnlinkRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UnlinkRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:dfsFuse.UnlinkRequest.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UnlinkResponse::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UnlinkResponse::UnlinkResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dfsFuse.UnlinkResponse)
}

void UnlinkResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  status_ = const_cast< ::dfsFuse::FSstatus*>(&::dfsFuse::FSstatus::default_instance());
}

UnlinkResponse::UnlinkResponse(const UnlinkResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dfsFuse.UnlinkResponse)
}

void UnlinkResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  status_ = NULL;
}

UnlinkResponse::~UnlinkResponse() {
  // @@protoc_insertion_point(destructor:dfsFuse.UnlinkResponse)
  SharedDtor();
}

void UnlinkResponse::SharedDtor() {
  if (this != default_instance_) {
    delete status_;
  }
}

void UnlinkResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnlinkResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnlinkResponse_descriptor_;
}

const UnlinkResponse& UnlinkResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fileserver_2eproto();
  return *default_instance_;
}

UnlinkResponse* UnlinkResponse::default_instance_ = NULL;

UnlinkResponse* UnlinkResponse::New(::google::protobuf::Arena* arena) const {
  UnlinkResponse* n = new UnlinkResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UnlinkResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dfsFuse.UnlinkResponse)
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}

bool UnlinkResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dfsFuse.UnlinkResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dfsFuse.FSstatus status = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dfsFuse.UnlinkResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dfsFuse.UnlinkResponse)
  return false;
#undef DO_
}

void UnlinkResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dfsFuse.UnlinkResponse)
  // optional .dfsFuse.FSstatus status = 1;
  if (this->has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->status_, output);
  }

  // @@protoc_insertion_point(serialize_end:dfsFuse.UnlinkResponse)
}

::google::protobuf::uint8* UnlinkResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dfsFuse.UnlinkResponse)
  // optional .dfsFuse.FSstatus status = 1;
  if (this->has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->status_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dfsFuse.UnlinkResponse)
  return target;
}

int UnlinkResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dfsFuse.UnlinkResponse)
  int total_size = 0;

  // optional .dfsFuse.FSstatus status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->status_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnlinkResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dfsFuse.UnlinkResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const UnlinkResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UnlinkResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dfsFuse.UnlinkResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dfsFuse.UnlinkResponse)
    MergeFrom(*source);
  }
}

void UnlinkResponse::MergeFrom(const UnlinkResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dfsFuse.UnlinkResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_status()) {
    mutable_status()->::dfsFuse::FSstatus::MergeFrom(from.status());
  }
}

void UnlinkResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dfsFuse.UnlinkResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnlinkResponse::CopyFrom(const UnlinkResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dfsFuse.UnlinkResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnlinkResponse::IsInitialized() const {

  return true;
}

void UnlinkResponse::Swap(UnlinkResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UnlinkResponse::InternalSwap(UnlinkResponse* other) {
  std::swap(status_, other->status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UnlinkResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnlinkResponse_descriptor_;
  metadata.reflection = UnlinkResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UnlinkResponse

// optional .dfsFuse.FSstatus status = 1;
bool UnlinkResponse::has_status() const {
  return !_is_default_instance_ && status_ != NULL;
}
void UnlinkResponse::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}
const ::dfsFuse::FSstatus& UnlinkResponse::status() const {
  // @@protoc_insertion_point(field_get:dfsFuse.UnlinkResponse.status)
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
::dfsFuse::FSstatus* UnlinkResponse::mutable_status() {
  
  if (status_ == NULL) {
    status_ = new ::dfsFuse::FSstatus;
  }
  // @@protoc_insertion_point(field_mutable:dfsFuse.UnlinkResponse.status)
  return status_;
}
::dfsFuse::FSstatus* UnlinkResponse::release_status() {
  // @@protoc_insertion_point(field_release:dfsFuse.UnlinkResponse.status)
  
  ::dfsFuse::FSstatus* temp = status_;
  status_ = NULL;
  return temp;
}
void UnlinkResponse::set_allocated_status(::dfsFuse::FSstatus* status) {
  delete status_;
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dfsFuse.UnlinkResponse.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RenameRequest::kOldnameFieldNumber;
const int RenameRequest::kNewnameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RenameRequest::RenameRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dfsFuse.RenameRequest)
}

void RenameRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

RenameRequest::RenameRequest(const RenameRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dfsFuse.RenameRequest)
}

void RenameRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  oldname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  newname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

RenameRequest::~RenameRequest() {
  // @@protoc_insertion_point(destructor:dfsFuse.RenameRequest)
  SharedDtor();
}

void RenameRequest::SharedDtor() {
  oldname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  newname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void RenameRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RenameRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RenameRequest_descriptor_;
}

const RenameRequest& RenameRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fileserver_2eproto();
  return *default_instance_;
}

RenameRequest* RenameRequest::default_instance_ = NULL;

RenameRequest* RenameRequest::New(::google::protobuf::Arena* arena) const {
  RenameRequest* n = new RenameRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RenameRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dfsFuse.RenameRequest)
  oldname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  newname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool RenameRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dfsFuse.RenameRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string oldname = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_oldname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->oldname().data(), this->oldname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dfsFuse.RenameRequest.oldname"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_newname;
        break;
      }

      // optional string newname = 2;
      case 2: {
        if (tag == 18) {
         parse_newname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_newname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->newname().data(), this->newname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dfsFuse.RenameRequest.newname"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dfsFuse.RenameRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dfsFuse.RenameRequest)
  return false;
#undef DO_
}

void RenameRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dfsFuse.RenameRequest)
  // optional string oldname = 1;
  if (this->oldname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->oldname().data(), this->oldname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dfsFuse.RenameRequest.oldname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->oldname(), output);
  }

  // optional string newname = 2;
  if (this->newname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->newname().data(), this->newname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dfsFuse.RenameRequest.newname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->newname(), output);
  }

  // @@protoc_insertion_point(serialize_end:dfsFuse.RenameRequest)
}

::google::protobuf::uint8* RenameRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dfsFuse.RenameRequest)
  // optional string oldname = 1;
  if (this->oldname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->oldname().data(), this->oldname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dfsFuse.RenameRequest.oldname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->oldname(), target);
  }

  // optional string newname = 2;
  if (this->newname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->newname().data(), this->newname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dfsFuse.RenameRequest.newname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->newname(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dfsFuse.RenameRequest)
  return target;
}

int RenameRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dfsFuse.RenameRequest)
  int total_size = 0;

  // optional string oldname = 1;
  if (this->oldname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->oldname());
  }

  // optional string newname = 2;
  if (this->newname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->newname());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RenameRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dfsFuse.RenameRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RenameRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RenameRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dfsFuse.RenameRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dfsFuse.RenameRequest)
    MergeFrom(*source);
  }
}

void RenameRequest::MergeFrom(const RenameRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dfsFuse.RenameRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.oldname().size() > 0) {

    oldname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.oldname_);
  }
  if (from.newname().size() > 0) {

    newname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.newname_);
  }
}

void RenameRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dfsFuse.RenameRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RenameRequest::CopyFrom(const RenameRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dfsFuse.RenameRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RenameRequest::IsInitialized() const {

  return true;
}

void RenameRequest::Swap(RenameRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RenameRequest::InternalSwap(RenameRequest* other) {
  oldname_.Swap(&other->oldname_);
  newname_.Swap(&other->newname_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RenameRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RenameRequest_descriptor_;
  metadata.reflection = RenameRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RenameRequest

// optional string oldname = 1;
void RenameRequest::clear_oldname() {
  oldname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RenameRequest::oldname() const {
  // @@protoc_insertion_point(field_get:dfsFuse.RenameRequest.oldname)
  return oldname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RenameRequest::set_oldname(const ::std::string& value) {
  
  oldname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dfsFuse.RenameRequest.oldname)
}
 void RenameRequest::set_oldname(const char* value) {
  
  oldname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dfsFuse.RenameRequest.oldname)
}
 void RenameRequest::set_oldname(const char* value, size_t size) {
  
  oldname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dfsFuse.RenameRequest.oldname)
}
 ::std::string* RenameRequest::mutable_oldname() {
  
  // @@protoc_insertion_point(field_mutable:dfsFuse.RenameRequest.oldname)
  return oldname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RenameRequest::release_oldname() {
  // @@protoc_insertion_point(field_release:dfsFuse.RenameRequest.oldname)
  
  return oldname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RenameRequest::set_allocated_oldname(::std::string* oldname) {
  if (oldname != NULL) {
    
  } else {
    
  }
  oldname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), oldname);
  // @@protoc_insertion_point(field_set_allocated:dfsFuse.RenameRequest.oldname)
}

// optional string newname = 2;
void RenameRequest::clear_newname() {
  newname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RenameRequest::newname() const {
  // @@protoc_insertion_point(field_get:dfsFuse.RenameRequest.newname)
  return newname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RenameRequest::set_newname(const ::std::string& value) {
  
  newname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dfsFuse.RenameRequest.newname)
}
 void RenameRequest::set_newname(const char* value) {
  
  newname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dfsFuse.RenameRequest.newname)
}
 void RenameRequest::set_newname(const char* value, size_t size) {
  
  newname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dfsFuse.RenameRequest.newname)
}
 ::std::string* RenameRequest::mutable_newname() {
  
  // @@protoc_insertion_point(field_mutable:dfsFuse.RenameRequest.newname)
  return newname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RenameRequest::release_newname() {
  // @@protoc_insertion_point(field_release:dfsFuse.RenameRequest.newname)
  
  return newname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RenameRequest::set_allocated_newname(::std::string* newname) {
  if (newname != NULL) {
    
  } else {
    
  }
  newname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), newname);
  // @@protoc_insertion_point(field_set_allocated:dfsFuse.RenameRequest.newname)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RenameResponse::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RenameResponse::RenameResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dfsFuse.RenameResponse)
}

void RenameResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  status_ = const_cast< ::dfsFuse::FSstatus*>(&::dfsFuse::FSstatus::default_instance());
}

RenameResponse::RenameResponse(const RenameResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dfsFuse.RenameResponse)
}

void RenameResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  status_ = NULL;
}

RenameResponse::~RenameResponse() {
  // @@protoc_insertion_point(destructor:dfsFuse.RenameResponse)
  SharedDtor();
}

void RenameResponse::SharedDtor() {
  if (this != default_instance_) {
    delete status_;
  }
}

void RenameResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RenameResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RenameResponse_descriptor_;
}

const RenameResponse& RenameResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fileserver_2eproto();
  return *default_instance_;
}

RenameResponse* RenameResponse::default_instance_ = NULL;

RenameResponse* RenameResponse::New(::google::protobuf::Arena* arena) const {
  RenameResponse* n = new RenameResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RenameResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dfsFuse.RenameResponse)
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}

bool RenameResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dfsFuse.RenameResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dfsFuse.FSstatus status = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dfsFuse.RenameResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dfsFuse.RenameResponse)
  return false;
#undef DO_
}

void RenameResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dfsFuse.RenameResponse)
  // optional .dfsFuse.FSstatus status = 1;
  if (this->has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->status_, output);
  }

  // @@protoc_insertion_point(serialize_end:dfsFuse.RenameResponse)
}

::google::protobuf::uint8* RenameResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dfsFuse.RenameResponse)
  // optional .dfsFuse.FSstatus status = 1;
  if (this->has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->status_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dfsFuse.RenameResponse)
  return target;
}

int RenameResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dfsFuse.RenameResponse)
  int total_size = 0;

  // optional .dfsFuse.FSstatus status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->status_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RenameResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dfsFuse.RenameResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RenameResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RenameResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dfsFuse.RenameResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dfsFuse.RenameResponse)
    MergeFrom(*source);
  }
}

void RenameResponse::MergeFrom(const RenameResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dfsFuse.RenameResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_status()) {
    mutable_status()->::dfsFuse::FSstatus::MergeFrom(from.status());
  }
}

void RenameResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dfsFuse.RenameResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RenameResponse::CopyFrom(const RenameResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dfsFuse.RenameResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RenameResponse::IsInitialized() const {

  return true;
}

void RenameResponse::Swap(RenameResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RenameResponse::InternalSwap(RenameResponse* other) {
  std::swap(status_, other->status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RenameResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RenameResponse_descriptor_;
  metadata.reflection = RenameResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RenameResponse

// optional .dfsFuse.FSstatus status = 1;
bool RenameResponse::has_status() const {
  return !_is_default_instance_ && status_ != NULL;
}
void RenameResponse::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}
const ::dfsFuse::FSstatus& RenameResponse::status() const {
  // @@protoc_insertion_point(field_get:dfsFuse.RenameResponse.status)
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
::dfsFuse::FSstatus* RenameResponse::mutable_status() {
  
  if (status_ == NULL) {
    status_ = new ::dfsFuse::FSstatus;
  }
  // @@protoc_insertion_point(field_mutable:dfsFuse.RenameResponse.status)
  return status_;
}
::dfsFuse::FSstatus* RenameResponse::release_status() {
  // @@protoc_insertion_point(field_release:dfsFuse.RenameResponse.status)
  
  ::dfsFuse::FSstatus* temp = status_;
  status_ = NULL;
  return temp;
}
void RenameResponse::set_allocated_status(::dfsFuse::FSstatus* status) {
  delete status_;
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dfsFuse.RenameResponse.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RmdirRequest::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RmdirRequest::RmdirRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dfsFuse.RmdirRequest)
}

void RmdirRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

RmdirRequest::RmdirRequest(const RmdirRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dfsFuse.RmdirRequest)
}

void RmdirRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

RmdirRequest::~RmdirRequest() {
  // @@protoc_insertion_point(destructor:dfsFuse.RmdirRequest)
  SharedDtor();
}

void RmdirRequest::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void RmdirRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RmdirRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RmdirRequest_descriptor_;
}

const RmdirRequest& RmdirRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fileserver_2eproto();
  return *default_instance_;
}

RmdirRequest* RmdirRequest::default_instance_ = NULL;

RmdirRequest* RmdirRequest::New(::google::protobuf::Arena* arena) const {
  RmdirRequest* n = new RmdirRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RmdirRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dfsFuse.RmdirRequest)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool RmdirRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dfsFuse.RmdirRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dfsFuse.RmdirRequest.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dfsFuse.RmdirRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dfsFuse.RmdirRequest)
  return false;
#undef DO_
}

void RmdirRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dfsFuse.RmdirRequest)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dfsFuse.RmdirRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // @@protoc_insertion_point(serialize_end:dfsFuse.RmdirRequest)
}

::google::protobuf::uint8* RmdirRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dfsFuse.RmdirRequest)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dfsFuse.RmdirRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dfsFuse.RmdirRequest)
  return target;
}

int RmdirRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dfsFuse.RmdirRequest)
  int total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RmdirRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dfsFuse.RmdirRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RmdirRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RmdirRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dfsFuse.RmdirRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dfsFuse.RmdirRequest)
    MergeFrom(*source);
  }
}

void RmdirRequest::MergeFrom(const RmdirRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dfsFuse.RmdirRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void RmdirRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dfsFuse.RmdirRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RmdirRequest::CopyFrom(const RmdirRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dfsFuse.RmdirRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RmdirRequest::IsInitialized() const {

  return true;
}

void RmdirRequest::Swap(RmdirRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RmdirRequest::InternalSwap(RmdirRequest* other) {
  name_.Swap(&other->name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RmdirRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RmdirRequest_descriptor_;
  metadata.reflection = RmdirRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RmdirRequest

// optional string name = 1;
void RmdirRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RmdirRequest::name() const {
  // @@protoc_insertion_point(field_get:dfsFuse.RmdirRequest.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RmdirRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dfsFuse.RmdirRequest.name)
}
 void RmdirRequest::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dfsFuse.RmdirRequest.name)
}
 void RmdirRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dfsFuse.RmdirRequest.name)
}
 ::std::string* RmdirRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:dfsFuse.RmdirRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RmdirRequest::release_name() {
  // @@protoc_insertion_point(field_release:dfsFuse.RmdirRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RmdirRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:dfsFuse.RmdirRequest.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RmdirResponse::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RmdirResponse::RmdirResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dfsFuse.RmdirResponse)
}

void RmdirResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  status_ = const_cast< ::dfsFuse::FSstatus*>(&::dfsFuse::FSstatus::default_instance());
}

RmdirResponse::RmdirResponse(const RmdirResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dfsFuse.RmdirResponse)
}

void RmdirResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  status_ = NULL;
}

RmdirResponse::~RmdirResponse() {
  // @@protoc_insertion_point(destructor:dfsFuse.RmdirResponse)
  SharedDtor();
}

void RmdirResponse::SharedDtor() {
  if (this != default_instance_) {
    delete status_;
  }
}

void RmdirResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RmdirResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RmdirResponse_descriptor_;
}

const RmdirResponse& RmdirResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fileserver_2eproto();
  return *default_instance_;
}

RmdirResponse* RmdirResponse::default_instance_ = NULL;

RmdirResponse* RmdirResponse::New(::google::protobuf::Arena* arena) const {
  RmdirResponse* n = new RmdirResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RmdirResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dfsFuse.RmdirResponse)
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}

bool RmdirResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dfsFuse.RmdirResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dfsFuse.FSstatus status = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dfsFuse.RmdirResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dfsFuse.RmdirResponse)
  return false;
#undef DO_
}

void RmdirResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dfsFuse.RmdirResponse)
  // optional .dfsFuse.FSstatus status = 1;
  if (this->has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->status_, output);
  }

  // @@protoc_insertion_point(serialize_end:dfsFuse.RmdirResponse)
}

::google::protobuf::uint8* RmdirResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dfsFuse.RmdirResponse)
  // optional .dfsFuse.FSstatus status = 1;
  if (this->has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->status_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dfsFuse.RmdirResponse)
  return target;
}

int RmdirResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dfsFuse.RmdirResponse)
  int total_size = 0;

  // optional .dfsFuse.FSstatus status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->status_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RmdirResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dfsFuse.RmdirResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RmdirResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RmdirResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dfsFuse.RmdirResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dfsFuse.RmdirResponse)
    MergeFrom(*source);
  }
}

void RmdirResponse::MergeFrom(const RmdirResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dfsFuse.RmdirResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_status()) {
    mutable_status()->::dfsFuse::FSstatus::MergeFrom(from.status());
  }
}

void RmdirResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dfsFuse.RmdirResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RmdirResponse::CopyFrom(const RmdirResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dfsFuse.RmdirResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RmdirResponse::IsInitialized() const {

  return true;
}

void RmdirResponse::Swap(RmdirResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RmdirResponse::InternalSwap(RmdirResponse* other) {
  std::swap(status_, other->status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RmdirResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RmdirResponse_descriptor_;
  metadata.reflection = RmdirResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RmdirResponse

// optional .dfsFuse.FSstatus status = 1;
bool RmdirResponse::has_status() const {
  return !_is_default_instance_ && status_ != NULL;
}
void RmdirResponse::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}
const ::dfsFuse::FSstatus& RmdirResponse::status() const {
  // @@protoc_insertion_point(field_get:dfsFuse.RmdirResponse.status)
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
::dfsFuse::FSstatus* RmdirResponse::mutable_status() {
  
  if (status_ == NULL) {
    status_ = new ::dfsFuse::FSstatus;
  }
  // @@protoc_insertion_point(field_mutable:dfsFuse.RmdirResponse.status)
  return status_;
}
::dfsFuse::FSstatus* RmdirResponse::release_status() {
  // @@protoc_insertion_point(field_release:dfsFuse.RmdirResponse.status)
  
  ::dfsFuse::FSstatus* temp = status_;
  status_ = NULL;
  return temp;
}
void RmdirResponse::set_allocated_status(::dfsFuse::FSstatus* status) {
  delete status_;
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dfsFuse.RmdirResponse.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReleaseRequest::kFileHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReleaseRequest::ReleaseRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dfsFuse.ReleaseRequest)
}

void ReleaseRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ReleaseRequest::ReleaseRequest(const ReleaseRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dfsFuse.ReleaseRequest)
}

void ReleaseRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  filehandle_ = 0u;
}

ReleaseRequest::~ReleaseRequest() {
  // @@protoc_insertion_point(destructor:dfsFuse.ReleaseRequest)
  SharedDtor();
}

void ReleaseRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReleaseRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReleaseRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReleaseRequest_descriptor_;
}

const ReleaseRequest& ReleaseRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fileserver_2eproto();
  return *default_instance_;
}

ReleaseRequest* ReleaseRequest::default_instance_ = NULL;

ReleaseRequest* ReleaseRequest::New(::google::protobuf::Arena* arena) const {
  ReleaseRequest* n = new ReleaseRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReleaseRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dfsFuse.ReleaseRequest)
  filehandle_ = 0u;
}

bool ReleaseRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dfsFuse.ReleaseRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fileHandle = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &filehandle_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dfsFuse.ReleaseRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dfsFuse.ReleaseRequest)
  return false;
#undef DO_
}

void ReleaseRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dfsFuse.ReleaseRequest)
  // optional uint32 fileHandle = 1;
  if (this->filehandle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->filehandle(), output);
  }

  // @@protoc_insertion_point(serialize_end:dfsFuse.ReleaseRequest)
}

::google::protobuf::uint8* ReleaseRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dfsFuse.ReleaseRequest)
  // optional uint32 fileHandle = 1;
  if (this->filehandle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->filehandle(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dfsFuse.ReleaseRequest)
  return target;
}

int ReleaseRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dfsFuse.ReleaseRequest)
  int total_size = 0;

  // optional uint32 fileHandle = 1;
  if (this->filehandle() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->filehandle());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReleaseRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dfsFuse.ReleaseRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ReleaseRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ReleaseRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dfsFuse.ReleaseRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dfsFuse.ReleaseRequest)
    MergeFrom(*source);
  }
}

void ReleaseRequest::MergeFrom(const ReleaseRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dfsFuse.ReleaseRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.filehandle() != 0) {
    set_filehandle(from.filehandle());
  }
}

void ReleaseRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dfsFuse.ReleaseRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReleaseRequest::CopyFrom(const ReleaseRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dfsFuse.ReleaseRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReleaseRequest::IsInitialized() const {

  return true;
}

void ReleaseRequest::Swap(ReleaseRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReleaseRequest::InternalSwap(ReleaseRequest* other) {
  std::swap(filehandle_, other->filehandle_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReleaseRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReleaseRequest_descriptor_;
  metadata.reflection = ReleaseRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReleaseRequest

// optional uint32 fileHandle = 1;
void ReleaseRequest::clear_filehandle() {
  filehandle_ = 0u;
}
 ::google::protobuf::uint32 ReleaseRequest::filehandle() const {
  // @@protoc_insertion_point(field_get:dfsFuse.ReleaseRequest.fileHandle)
  return filehandle_;
}
 void ReleaseRequest::set_filehandle(::google::protobuf::uint32 value) {
  
  filehandle_ = value;
  // @@protoc_insertion_point(field_set:dfsFuse.ReleaseRequest.fileHandle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReleaseResponse::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReleaseResponse::ReleaseResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dfsFuse.ReleaseResponse)
}

void ReleaseResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  status_ = const_cast< ::dfsFuse::FSstatus*>(&::dfsFuse::FSstatus::default_instance());
}

ReleaseResponse::ReleaseResponse(const ReleaseResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dfsFuse.ReleaseResponse)
}

void ReleaseResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  status_ = NULL;
}

ReleaseResponse::~ReleaseResponse() {
  // @@protoc_insertion_point(destructor:dfsFuse.ReleaseResponse)
  SharedDtor();
}

void ReleaseResponse::SharedDtor() {
  if (this != default_instance_) {
    delete status_;
  }
}

void ReleaseResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReleaseResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReleaseResponse_descriptor_;
}

const ReleaseResponse& ReleaseResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fileserver_2eproto();
  return *default_instance_;
}

ReleaseResponse* ReleaseResponse::default_instance_ = NULL;

ReleaseResponse* ReleaseResponse::New(::google::protobuf::Arena* arena) const {
  ReleaseResponse* n = new ReleaseResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReleaseResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dfsFuse.ReleaseResponse)
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}

bool ReleaseResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dfsFuse.ReleaseResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dfsFuse.FSstatus status = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dfsFuse.ReleaseResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dfsFuse.ReleaseResponse)
  return false;
#undef DO_
}

void ReleaseResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dfsFuse.ReleaseResponse)
  // optional .dfsFuse.FSstatus status = 1;
  if (this->has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->status_, output);
  }

  // @@protoc_insertion_point(serialize_end:dfsFuse.ReleaseResponse)
}

::google::protobuf::uint8* ReleaseResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dfsFuse.ReleaseResponse)
  // optional .dfsFuse.FSstatus status = 1;
  if (this->has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->status_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dfsFuse.ReleaseResponse)
  return target;
}

int ReleaseResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dfsFuse.ReleaseResponse)
  int total_size = 0;

  // optional .dfsFuse.FSstatus status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->status_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReleaseResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dfsFuse.ReleaseResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ReleaseResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ReleaseResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dfsFuse.ReleaseResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dfsFuse.ReleaseResponse)
    MergeFrom(*source);
  }
}

void ReleaseResponse::MergeFrom(const ReleaseResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dfsFuse.ReleaseResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_status()) {
    mutable_status()->::dfsFuse::FSstatus::MergeFrom(from.status());
  }
}

void ReleaseResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dfsFuse.ReleaseResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReleaseResponse::CopyFrom(const ReleaseResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dfsFuse.ReleaseResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReleaseResponse::IsInitialized() const {

  return true;
}

void ReleaseResponse::Swap(ReleaseResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReleaseResponse::InternalSwap(ReleaseResponse* other) {
  std::swap(status_, other->status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReleaseResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReleaseResponse_descriptor_;
  metadata.reflection = ReleaseResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReleaseResponse

// optional .dfsFuse.FSstatus status = 1;
bool ReleaseResponse::has_status() const {
  return !_is_default_instance_ && status_ != NULL;
}
void ReleaseResponse::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}
const ::dfsFuse::FSstatus& ReleaseResponse::status() const {
  // @@protoc_insertion_point(field_get:dfsFuse.ReleaseResponse.status)
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
::dfsFuse::FSstatus* ReleaseResponse::mutable_status() {
  
  if (status_ == NULL) {
    status_ = new ::dfsFuse::FSstatus;
  }
  // @@protoc_insertion_point(field_mutable:dfsFuse.ReleaseResponse.status)
  return status_;
}
::dfsFuse::FSstatus* ReleaseResponse::release_status() {
  // @@protoc_insertion_point(field_release:dfsFuse.ReleaseResponse.status)
  
  ::dfsFuse::FSstatus* temp = status_;
  status_ = NULL;
  return temp;
}
void ReleaseResponse::set_allocated_status(::dfsFuse::FSstatus* status) {
  delete status_;
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dfsFuse.ReleaseResponse.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace dfsFuse

// @@protoc_insertion_point(global_scope)
