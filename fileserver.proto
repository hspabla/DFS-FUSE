syntax = "proto3";

package dfsFuse;

service FileSystem {

    // attributes RPC
    rpc GetAttr( GetAttrRequest ) returns ( GetAttrResponse ) {}

    // Directory handling
    rpc Mkdir( MkdirRequest ) returns ( MkdirResponse ) {}
    rpc Opendir( OpenDirRequest ) returns( OpenDirResponse ) {}

    // File handling
    rpc Open( OpenRequest ) returns ( OpenResponse ) {}
    rpc Read( ReadRequest ) returns ( ReadResponse ) {}
    rpc Write( WriteRequest ) returns ( WriteResponse ) {}
}

message FSstatus {
    int32 retCode = 1;
}

// process id and owner information
message Owner {
    uint32 uid = 1;		/* user ID of owner */
    uint32 gid = 2;		/* group ID of owner */
}

message ClientInfo {
    Owner Owner = 1;
    uint32 Pid = 2;		/* process ID */
}


// Attr
message Attr {
    uint32     dev		= 1;    /* ID of device containing file */
    uint32     ino		= 2;    /* inode number */
    uint32     mode		= 3;    /* protection */
    uint32     st_nlink = 4;   	/* number of hard links */
    Owner	   owner 	= 5;
	uint32 	   rdev		= 6;    /* device ID (if special file) */
    uint64     size		= 7;    /* total size, in bytes */
    uint64	   blksize	= 8; 	/* blocksize for file system I/O */
    uint64     blocks	= 9;  	/* number of 512B blocks allocated */

    uint64     atime	= 10;   /* time of last access */
    uint32	   atimens	= 11;
	uint64     mtime	= 12;   /* time of last modification */
    uint32	   mtimens	= 13;
	uint64     ctime	= 14;   /* time of last status change */
	uint32	   ctimens	= 15;

}

message GetAttrRequest {
    string name = 1;
    ClientInfo info = 2;
}

message GetAttrResponse {
	Attr attr = 1;
	FSstatus status = 2;
}

// Make directory

message MkdirRequest {
    string name = 1;
    uint32 mode = 2;
    ClientInfo info = 3;
}

message MkdirResponse {
    FSstatus status = 1;
}


// opening directory

message OpenDirRequest {
    string name = 1;
    ClientInfo info = 2;
}

message DirEntry {
    string name = 1;
    uint32 ino = 2;
    uint32 mode = 3;
}

message OpenDirResponse {
    repeated DirEntry dirs = 1;
    FSstatus status = 2;
}

// File handling

message OpenRequest {
    string name = 1;
    uint32 flags = 2;
    ClientInfo info = 3;
}

message OpenResponse {
    uint32 fileHandle = 1;
    FSstatus status = 2;
}

message ReadRequest {
    uint32 fileHandler = 1;
    uint32 size = 2;
    uint32 offset = 3;
    ClientInfo info = 4;
}

message ReadResponse {
    uint32 dataRead = 1;
    bytes data = 2;
    FSstatus status = 3;
}

message WriteRequest {
    uint32 fileHandler = 1;
    bytes data = 2;
    uint32 size = 3;
    uint32 offset = 4;
    ClientInfo info = 5;
}

message WriteResponse {
    uint32 dataWritten = 1;
    FSstatus status = 2;
}
